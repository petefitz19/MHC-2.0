
Midi_Hand_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008144  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c0  080082c0  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  080082c0  080082c0  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082c0  080082c0  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080082cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  200000f4  080083c0  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  080083c0  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013203  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003435  00000000  00000000  00033320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00036758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000377b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cab1  00000000  00000000  000386e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156c6  00000000  00000000  00055199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a83  00000000  00000000  0006a85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042bc  00000000  00000000  000fb334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f4 	.word	0x200000f4
 8000128:	00000000 	.word	0x00000000
 800012c:	08008238 	.word	0x08008238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f8 	.word	0x200000f8
 8000148:	08008238 	.word	0x08008238

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbf9 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f829 	bl	80001ac <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f93d 	bl	80003d8 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800015e:	f000 f891 	bl	8000284 <_ZL12MX_ADC1_Initv>
  MX_I2C2_Init();
 8000162:	f000 f8d7 	bl	8000314 <_ZL12MX_I2C2_Initv>
  MX_USART1_UART_Init();
 8000166:	f000 f909 	bl	800037c <_ZL19MX_USART1_UART_Initv>
  MX_USB_DEVICE_Init();
 800016a:	f007 fc77 	bl	8007a5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  potentiometer1.Init();
 800016e:	480c      	ldr	r0, [pc, #48]	; (80001a0 <main+0x54>)
 8000170:	f000 fb3c 	bl	80007ec <_ZN13Potentiometer4InitEv>
  rotaryEncoder1.Init();
 8000174:	480b      	ldr	r0, [pc, #44]	; (80001a4 <main+0x58>)
 8000176:	f000 fb9e 	bl	80008b6 <_ZN13RotaryEncoder4InitEv>
    //   }
	  // }

    // Testing MIDI
    uint8_t b[4];
    b[0] = 0x0B;
 800017a:	230b      	movs	r3, #11
 800017c:	713b      	strb	r3, [r7, #4]
    b[1] = 0x90;
 800017e:	2390      	movs	r3, #144	; 0x90
 8000180:	717b      	strb	r3, [r7, #5]
    b[2] = 100;
 8000182:	2364      	movs	r3, #100	; 0x64
 8000184:	71bb      	strb	r3, [r7, #6]
    b[3] = 100;
 8000186:	2364      	movs	r3, #100	; 0x64
 8000188:	71fb      	strb	r3, [r7, #7]

    USBD_MIDI_SendReport(&hUsbDeviceFS, b, sizeof(b));
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2204      	movs	r2, #4
 800018e:	4619      	mov	r1, r3
 8000190:	4805      	ldr	r0, [pc, #20]	; (80001a8 <main+0x5c>)
 8000192:	f006 fb65 	bl	8006860 <USBD_MIDI_SendReport>

    HAL_Delay(1000);
 8000196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019a:	f000 fc37 	bl	8000a0c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800019e:	e7ec      	b.n	800017a <main+0x2e>
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	200001e8 	.word	0x200001e8
 80001a8:	20000248 	.word	0x20000248

080001ac <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b094      	sub	sp, #80	; 0x50
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f008 f834 	bl	8008228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	f107 0314 	add.w	r3, r7, #20
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
 80001ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fed2 	bl	8002fac <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	bf14      	ite	ne
 800020e:	2301      	movne	r3, #1
 8000210:	2300      	moveq	r3, #0
 8000212:	b2db      	uxtb	r3, r3
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000218:	f000 f92e 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021c:	230f      	movs	r3, #15
 800021e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000220:	2302      	movs	r3, #2
 8000222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2102      	movs	r1, #2
 8000238:	4618      	mov	r0, r3
 800023a:	f003 f939 	bl	80034b0 <HAL_RCC_ClockConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf14      	ite	ne
 8000244:	2301      	movne	r3, #1
 8000246:	2300      	moveq	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800024e:	f000 f913 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000252:	2312      	movs	r3, #18
 8000254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800025a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800025c:	2300      	movs	r3, #0
 800025e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fabc 	bl	80037e0 <HAL_RCCEx_PeriphCLKConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	bf14      	ite	ne
 800026e:	2301      	movne	r3, #1
 8000270:	2300      	moveq	r3, #0
 8000272:	b2db      	uxtb	r3, r3
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8000278:	f000 f8fe 	bl	8000478 <Error_Handler>
  }
}
 800027c:	bf00      	nop
 800027e:	3750      	adds	r7, #80	; 0x50
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 8000296:	4a1e      	ldr	r2, [pc, #120]	; (8000310 <_ZL12MX_ADC1_Initv+0x8c>)
 8000298:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800029a:	4b1c      	ldr	r3, [pc, #112]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a6:	4b19      	ldr	r3, [pc, #100]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ac:	4b17      	ldr	r3, [pc, #92]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 80002ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 80002bc:	2201      	movs	r2, #1
 80002be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c0:	4812      	ldr	r0, [pc, #72]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 80002c2:	f000 fbc7 	bl	8000a54 <HAL_ADC_Init>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	bf14      	ite	ne
 80002cc:	2301      	movne	r3, #1
 80002ce:	2300      	moveq	r3, #0
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80002d6:	f000 f8cf 	bl	8000478 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002de:	2301      	movs	r3, #1
 80002e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4619      	mov	r1, r3
 80002ea:	4808      	ldr	r0, [pc, #32]	; (800030c <_ZL12MX_ADC1_Initv+0x88>)
 80002ec:	f000 fc8a 	bl	8000c04 <HAL_ADC_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	bf14      	ite	ne
 80002f6:	2301      	movne	r3, #1
 80002f8:	2300      	moveq	r3, #0
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8000300:	f000 f8ba 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000110 	.word	0x20000110
 8000310:	40012400 	.word	0x40012400

08000314 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 800031a:	4a16      	ldr	r2, [pc, #88]	; (8000374 <_ZL12MX_I2C2_Initv+0x60>)
 800031c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 8000320:	4a15      	ldr	r2, [pc, #84]	; (8000378 <_ZL12MX_I2C2_Initv+0x64>)
 8000322:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 8000332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000336:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000350:	4807      	ldr	r0, [pc, #28]	; (8000370 <_ZL12MX_I2C2_Initv+0x5c>)
 8000352:	f001 f83b 	bl	80013cc <HAL_I2C_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	bf14      	ite	ne
 800035c:	2301      	movne	r3, #1
 800035e:	2300      	moveq	r3, #0
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8000366:	f000 f887 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000140 	.word	0x20000140
 8000374:	40005800 	.word	0x40005800
 8000378:	000186a0 	.word	0x000186a0

0800037c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000382:	4a14      	ldr	r2, [pc, #80]	; (80003d4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000386:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800038c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800039a:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80003a2:	220c      	movs	r2, #12
 80003a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <_ZL19MX_USART1_UART_Initv+0x54>)
 80003b4:	f003 faca 	bl	800394c <HAL_UART_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	bf14      	ite	ne
 80003be:	2301      	movne	r3, #1
 80003c0:	2300      	moveq	r3, #0
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80003c8:	f000 f856 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000194 	.word	0x20000194
 80003d4:	40013800 	.word	0x40013800

080003d8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a1e      	ldr	r2, [pc, #120]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a18      	ldr	r2, [pc, #96]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <_ZL12MX_GPIO_Initv+0x94>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RE0_A_Pin RE0_B_Pin RE0_SW_Pin RE1_A_Pin
                           RE1_B_Pin */
  GPIO_InitStruct.Pin = RE0_A_Pin|RE0_B_Pin|RE0_SW_Pin|RE1_A_Pin
 8000434:	23f8      	movs	r3, #248	; 0xf8
 8000436:	613b      	str	r3, [r7, #16]
                          |RE1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043c:	2301      	movs	r3, #1
 800043e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	480a      	ldr	r0, [pc, #40]	; (8000470 <_ZL12MX_GPIO_Initv+0x98>)
 8000448:	f000 fe24 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pin : RE1_SW_Pin */
  GPIO_InitStruct.Pin = RE1_SW_Pin;
 800044c:	2301      	movs	r3, #1
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000454:	2301      	movs	r3, #1
 8000456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RE1_SW_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <_ZL12MX_GPIO_Initv+0x9c>)
 8000460:	f000 fe18 	bl	8001094 <HAL_GPIO_Init>

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800
 8000474:	40010c00 	.word	0x40010c00

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af04      	add	r7, sp, #16
 800048a:	6078      	str	r0, [r7, #4]
 800048c:	6039      	str	r1, [r7, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d118      	bne.n	80004c6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800049a:	4293      	cmp	r3, r2
 800049c:	d113      	bne.n	80004c6 <_Z41__static_initialization_and_destruction_0ii+0x42>
                             GPIOA, GPIO_PIN_0);
 800049e:	2301      	movs	r3, #1
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	490b      	ldr	r1, [pc, #44]	; (80004d4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80004a8:	480b      	ldr	r0, [pc, #44]	; (80004d8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80004aa:	f000 f986 	bl	80007ba <_ZN13PotentiometerC1EP19__ADC_HandleTypeDefmP12GPIO_TypeDeft>
                             GPIOA, GPIO_PIN_5);
 80004ae:	2320      	movs	r3, #32
 80004b0:	9302      	str	r3, [sp, #8]
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2310      	movs	r3, #16
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80004bc:	2208      	movs	r2, #8
 80004be:	4904      	ldr	r1, [pc, #16]	; (80004d0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80004c0:	4806      	ldr	r0, [pc, #24]	; (80004dc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80004c2:	f000 f9d5 	bl	8000870 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_tS1_t>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	20000110 	.word	0x20000110
 80004d8:	200001d8 	.word	0x200001d8
 80004dc:	200001e8 	.word	0x200001e8

080004e0 <_GLOBAL__sub_I_hadc1>:
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004e8:	2001      	movs	r0, #1
 80004ea:	f7ff ffcb 	bl	8000484 <_Z41__static_initialization_and_destruction_0ii>
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <HAL_MspInit+0x5c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a14      	ldr	r2, [pc, #80]	; (800054c <HAL_MspInit+0x5c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x5c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_MspInit+0x5c>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_MspInit+0x60>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_MspInit+0x60>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40021000 	.word	0x40021000
 8000550:	40010000 	.word	0x40010000

08000554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_ADC_MspInit+0x6c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d121      	bne.n	80005b8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <HAL_ADC_MspInit+0x70>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a12      	ldr	r2, [pc, #72]	; (80005c4 <HAL_ADC_MspInit+0x70>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <HAL_ADC_MspInit+0x70>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_ADC_MspInit+0x70>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <HAL_ADC_MspInit+0x70>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_ADC_MspInit+0x70>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005a4:	2303      	movs	r3, #3
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <HAL_ADC_MspInit+0x74>)
 80005b4:	f000 fd6e 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005b8:	bf00      	nop
 80005ba:	3720      	adds	r7, #32
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40012400 	.word	0x40012400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010800 	.word	0x40010800

080005cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a16      	ldr	r2, [pc, #88]	; (8000640 <HAL_I2C_MspInit+0x74>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d124      	bne.n	8000636 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <HAL_I2C_MspInit+0x78>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a14      	ldr	r2, [pc, #80]	; (8000644 <HAL_I2C_MspInit+0x78>)
 80005f2:	f043 0308 	orr.w	r3, r3, #8
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <HAL_I2C_MspInit+0x78>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000604:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060a:	2312      	movs	r3, #18
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <HAL_I2C_MspInit+0x7c>)
 800061a:	f000 fd3b 	bl	8001094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_I2C_MspInit+0x78>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_I2C_MspInit+0x78>)
 8000624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_I2C_MspInit+0x78>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40005800 	.word	0x40005800
 8000644:	40021000 	.word	0x40021000
 8000648:	40010c00 	.word	0x40010c00

0800064c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <HAL_UART_MspInit+0xa4>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d13d      	bne.n	80006e8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <HAL_UART_MspInit+0xa8>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <HAL_UART_MspInit+0xa8>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <HAL_UART_MspInit+0xa8>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_UART_MspInit+0xa8>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a1a      	ldr	r2, [pc, #104]	; (80006f4 <HAL_UART_MspInit+0xa8>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_UART_MspInit+0xa8>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4812      	ldr	r0, [pc, #72]	; (80006f8 <HAL_UART_MspInit+0xac>)
 80006b0:	f000 fcf0 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480c      	ldr	r0, [pc, #48]	; (80006f8 <HAL_UART_MspInit+0xac>)
 80006c8:	f000 fce4 	bl	8001094 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <HAL_UART_MspInit+0xb0>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <HAL_UART_MspInit+0xb0>)
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	; 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40013800 	.word	0x40013800
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010c00 	.word	0x40010c00
 80006fc:	40010000 	.word	0x40010000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000746:	f000 f945 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000756:	f001 f8ae 	bl	80018b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000070c 	.word	0x2000070c

08000764 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000796:	f7ff ffe5 	bl	8000764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f007 fd21 	bl	80081e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fcd5 	bl	800014c <main>
  bx lr
 80007a2:	4770      	bx	lr
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80007ac:	080082cc 	.word	0x080082cc
  ldr r2, =_sbss
 80007b0:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80007b4:	20000a0c 	.word	0x20000a0c

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>

080007ba <_ZN13PotentiometerC1EP19__ADC_HandleTypeDefmP12GPIO_TypeDeft>:
 *      Author: peterfitzpatrick
 */

#include "Potentiometer.hpp"

Potentiometer::Potentiometer(ADC_HandleTypeDef* hadc, uint32_t channel, GPIO_TypeDef* port, uint16_t pin)
 80007ba:	b480      	push	{r7}
 80007bc:	b085      	sub	sp, #20
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	603b      	str	r3, [r7, #0]
{
    _hadc = hadc;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	601a      	str	r2, [r3, #0]
    _channel = channel;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	605a      	str	r2, [r3, #4]
    _port = port;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	609a      	str	r2, [r3, #8]
    _pin = pin;
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	8b3a      	ldrh	r2, [r7, #24]
 80007de:	819a      	strh	r2, [r3, #12]
}
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4618      	mov	r0, r3
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <_ZN13Potentiometer4InitEv>:

int Potentiometer::Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]

    /** Common config
     */
    _hadc->Instance = ADC1;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a19      	ldr	r2, [pc, #100]	; (800086c <_ZN13Potentiometer4InitEv+0x80>)
 8000806:	601a      	str	r2, [r3, #0]
    _hadc->Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
    _hadc->Init.ContinuousConvMode = ENABLE;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2201      	movs	r2, #1
 8000816:	731a      	strb	r2, [r3, #12]
    _hadc->Init.DiscontinuousConvMode = DISABLE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2200      	movs	r2, #0
 800081e:	751a      	strb	r2, [r3, #20]
    _hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000828:	61da      	str	r2, [r3, #28]
    _hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
    _hadc->Init.NbrOfConversion = 1;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2201      	movs	r2, #1
 8000838:	611a      	str	r2, [r3, #16]
    HAL_ADC_Init(_hadc);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f908 	bl	8000a54 <HAL_ADC_Init>

    /** Configure Regular Channel
     */
    sConfig.Channel = _channel;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800084a:	2301      	movs	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(_hadc, &sConfig);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f107 020c 	add.w	r2, r7, #12
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f9d1 	bl	8000c04 <HAL_ADC_ConfigChannel>

    return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40012400 	.word	0x40012400

08000870 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_tS1_t>:
 *      Author: peterfitzpatrick
 */

#include "RotaryEncoder.hpp"

RotaryEncoder::RotaryEncoder(GPIO_TypeDef* port_a, uint16_t pin_a,
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4613      	mov	r3, r2
 800087e:	80fb      	strh	r3, [r7, #6]
                             GPIO_TypeDef* port_b, uint16_t pin_b,
                             GPIO_TypeDef* port_sw, uint16_t pin_sw)
{
    _port_a = port_a;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	60da      	str	r2, [r3, #12]
    _pin_a = pin_a;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	88fa      	ldrh	r2, [r7, #6]
 800088a:	809a      	strh	r2, [r3, #4]
    _port_b = port_b;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	683a      	ldr	r2, [r7, #0]
 8000890:	611a      	str	r2, [r3, #16]
    _pin_b = pin_b;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	8b3a      	ldrh	r2, [r7, #24]
 8000896:	80da      	strh	r2, [r3, #6]
    _port_sw = port_sw;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	615a      	str	r2, [r3, #20]
    _pin_sw = pin_sw;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	8c3a      	ldrh	r2, [r7, #32]
 80008a2:	811a      	strh	r2, [r3, #8]
    _counter = 0;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
}
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4618      	mov	r0, r3
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <_ZN13RotaryEncoder4InitEv>:

int RotaryEncoder::Init(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b086      	sub	sp, #24
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]

    /* Initialize Input A */
    GPIO_InitStruct.Pin = _pin_a;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	889b      	ldrh	r3, [r3, #4]
 80008d0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port_a, &GPIO_InitStruct);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	f107 0208 	add.w	r2, r7, #8
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fbd5 	bl	8001094 <HAL_GPIO_Init>

    /* Initialize Input B */
    GPIO_InitStruct.Pin = _pin_b;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	88db      	ldrh	r3, [r3, #6]
 80008ee:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port_b, &GPIO_InitStruct);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	f107 0208 	add.w	r2, r7, #8
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fbc6 	bl	8001094 <HAL_GPIO_Init>

    /* Initialize Switch */
    GPIO_InitStruct.Pin = _pin_sw;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	891b      	ldrh	r3, [r3, #8]
 800090c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	2301      	movs	r3, #1
 8000914:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port_sw, &GPIO_InitStruct);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	f107 0208 	add.w	r2, r7, #8
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fbb7 	bl	8001094 <HAL_GPIO_Init>

	_a_last_state = HAL_GPIO_ReadPin(_port_a, _pin_a);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68da      	ldr	r2, [r3, #12]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	889b      	ldrh	r3, [r3, #4]
 800092e:	4619      	mov	r1, r3
 8000930:	4610      	mov	r0, r2
 8000932:	f000 fd33 	bl	800139c <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	70da      	strb	r2, [r3, #3]
    return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 fb59 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fdc4 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 fb71 	bl	800107a <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009b0:	f000 fb39 	bl	8001026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000200 	.word	0x20000200

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000200 	.word	0x20000200

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0be      	b.n	8000bf4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d109      	bne.n	8000a98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2200      	movs	r2, #0
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fd5e 	bl	8000554 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f9ab 	bl	8000df4 <ADC_ConversionStop_Disable>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8099 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8095 	bne.w	8000be2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	f043 0202 	orr.w	r2, r3, #2
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7b1b      	ldrb	r3, [r3, #12]
 8000ada:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000adc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aec:	d003      	beq.n	8000af6 <HAL_ADC_Init+0xa2>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d102      	bne.n	8000afc <HAL_ADC_Init+0xa8>
 8000af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afa:	e000      	b.n	8000afe <HAL_ADC_Init+0xaa>
 8000afc:	2300      	movs	r3, #0
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7d1b      	ldrb	r3, [r3, #20]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d119      	bne.n	8000b40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7b1b      	ldrb	r3, [r3, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	035a      	lsls	r2, r3, #13
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	e00b      	b.n	8000b40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f043 0220 	orr.w	r2, r3, #32
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_ADC_Init+0x1a8>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	6812      	ldr	r2, [r2, #0]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_Init+0x126>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d104      	bne.n	8000b84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	051b      	lsls	r3, r3, #20
 8000b82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_ADC_Init+0x1ac>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb2:	f023 0303 	bic.w	r3, r3, #3
 8000bb6:	f043 0201 	orr.w	r2, r3, #1
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bbe:	e018      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f023 0312 	bic.w	r3, r3, #18
 8000bc8:	f043 0210 	orr.w	r2, r3, #16
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bd4:	f043 0201 	orr.w	r2, r3, #1
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be0:	e007      	b.n	8000bf2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	f043 0210 	orr.w	r2, r3, #16
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	ffe1f7fd 	.word	0xffe1f7fd
 8000c00:	ff1f0efe 	.word	0xff1f0efe

08000c04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d101      	bne.n	8000c24 <HAL_ADC_ConfigChannel+0x20>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e0dc      	b.n	8000dde <HAL_ADC_ConfigChannel+0x1da>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b06      	cmp	r3, #6
 8000c32:	d81c      	bhi.n	8000c6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	3b05      	subs	r3, #5
 8000c46:	221f      	movs	r2, #31
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4019      	ands	r1, r3
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3b05      	subs	r3, #5
 8000c60:	fa00 f203 	lsl.w	r2, r0, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6c:	e03c      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b0c      	cmp	r3, #12
 8000c74:	d81c      	bhi.n	8000cb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3b23      	subs	r3, #35	; 0x23
 8000c88:	221f      	movs	r2, #31
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4019      	ands	r1, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3b23      	subs	r3, #35	; 0x23
 8000ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
 8000cae:	e01b      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3b41      	subs	r3, #65	; 0x41
 8000cc2:	221f      	movs	r2, #31
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4019      	ands	r1, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3b41      	subs	r3, #65	; 0x41
 8000cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d91c      	bls.n	8000d2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68d9      	ldr	r1, [r3, #12]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b1e      	subs	r3, #30
 8000d02:	2207      	movs	r2, #7
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4019      	ands	r1, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6898      	ldr	r0, [r3, #8]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	3b1e      	subs	r3, #30
 8000d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	e019      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6919      	ldr	r1, [r3, #16]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4613      	mov	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4019      	ands	r1, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	6898      	ldr	r0, [r3, #8]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	fa00 f203 	lsl.w	r2, r0, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b10      	cmp	r3, #16
 8000d64:	d003      	beq.n	8000d6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d6a:	2b11      	cmp	r3, #17
 8000d6c:	d132      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d125      	bne.n	8000dc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d126      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d11a      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_ADC_ConfigChannel+0x1e8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	0c9a      	lsrs	r2, r3, #18
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db4:	e002      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x1b2>
 8000dc2:	e007      	b.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	f043 0220 	orr.w	r2, r3, #32
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40012400 	.word	0x40012400
 8000dec:	20000000 	.word	0x20000000
 8000df0:	431bde83 	.word	0x431bde83

08000df4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d12e      	bne.n	8000e6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0201 	bic.w	r2, r2, #1
 8000e1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e1e:	f7ff fdeb 	bl	80009f8 <HAL_GetTick>
 8000e22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e24:	e01b      	b.n	8000e5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e26:	f7ff fde7 	bl	80009f8 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d914      	bls.n	8000e5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d10d      	bne.n	8000e5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f043 0210 	orr.w	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e007      	b.n	8000e6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d0dc      	beq.n	8000e26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4906      	ldr	r1, [pc, #24]	; (8000f10 <__NVIC_EnableIRQ+0x34>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fdc:	d301      	bcc.n	8000fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00f      	b.n	8001002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <SysTick_Config+0x40>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fea:	210f      	movs	r1, #15
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	f7ff ff90 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SysTick_Config+0x40>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <SysTick_Config+0x40>)
 8000ffc:	2207      	movs	r2, #7
 8000ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010

08001010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff2d 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001038:	f7ff ff42 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 800103c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	f7ff ff90 	bl	8000f68 <NVIC_EncodePriority>
 8001048:	4602      	mov	r2, r0
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5f 	bl	8000f14 <__NVIC_SetPriority>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff35 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa2 	bl	8000fcc <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b08b      	sub	sp, #44	; 0x2c
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e169      	b.n	800137c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010a8:	2201      	movs	r2, #1
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	f040 8158 	bne.w	8001376 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4a9a      	ldr	r2, [pc, #616]	; (8001334 <HAL_GPIO_Init+0x2a0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d05e      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010d0:	4a98      	ldr	r2, [pc, #608]	; (8001334 <HAL_GPIO_Init+0x2a0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d875      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010d6:	4a98      	ldr	r2, [pc, #608]	; (8001338 <HAL_GPIO_Init+0x2a4>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d058      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010dc:	4a96      	ldr	r2, [pc, #600]	; (8001338 <HAL_GPIO_Init+0x2a4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d86f      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010e2:	4a96      	ldr	r2, [pc, #600]	; (800133c <HAL_GPIO_Init+0x2a8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d052      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010e8:	4a94      	ldr	r2, [pc, #592]	; (800133c <HAL_GPIO_Init+0x2a8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d869      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010ee:	4a94      	ldr	r2, [pc, #592]	; (8001340 <HAL_GPIO_Init+0x2ac>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d04c      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 80010f4:	4a92      	ldr	r2, [pc, #584]	; (8001340 <HAL_GPIO_Init+0x2ac>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d863      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 80010fa:	4a92      	ldr	r2, [pc, #584]	; (8001344 <HAL_GPIO_Init+0x2b0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d046      	beq.n	800118e <HAL_GPIO_Init+0xfa>
 8001100:	4a90      	ldr	r2, [pc, #576]	; (8001344 <HAL_GPIO_Init+0x2b0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d85d      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 8001106:	2b12      	cmp	r3, #18
 8001108:	d82a      	bhi.n	8001160 <HAL_GPIO_Init+0xcc>
 800110a:	2b12      	cmp	r3, #18
 800110c:	d859      	bhi.n	80011c2 <HAL_GPIO_Init+0x12e>
 800110e:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <HAL_GPIO_Init+0x80>)
 8001110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001114:	0800118f 	.word	0x0800118f
 8001118:	08001169 	.word	0x08001169
 800111c:	0800117b 	.word	0x0800117b
 8001120:	080011bd 	.word	0x080011bd
 8001124:	080011c3 	.word	0x080011c3
 8001128:	080011c3 	.word	0x080011c3
 800112c:	080011c3 	.word	0x080011c3
 8001130:	080011c3 	.word	0x080011c3
 8001134:	080011c3 	.word	0x080011c3
 8001138:	080011c3 	.word	0x080011c3
 800113c:	080011c3 	.word	0x080011c3
 8001140:	080011c3 	.word	0x080011c3
 8001144:	080011c3 	.word	0x080011c3
 8001148:	080011c3 	.word	0x080011c3
 800114c:	080011c3 	.word	0x080011c3
 8001150:	080011c3 	.word	0x080011c3
 8001154:	080011c3 	.word	0x080011c3
 8001158:	08001171 	.word	0x08001171
 800115c:	08001185 	.word	0x08001185
 8001160:	4a79      	ldr	r2, [pc, #484]	; (8001348 <HAL_GPIO_Init+0x2b4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001166:	e02c      	b.n	80011c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	623b      	str	r3, [r7, #32]
          break;
 800116e:	e029      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	3304      	adds	r3, #4
 8001176:	623b      	str	r3, [r7, #32]
          break;
 8001178:	e024      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	3308      	adds	r3, #8
 8001180:	623b      	str	r3, [r7, #32]
          break;
 8001182:	e01f      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	330c      	adds	r3, #12
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e01a      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d102      	bne.n	800119c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001196:	2304      	movs	r3, #4
 8001198:	623b      	str	r3, [r7, #32]
          break;
 800119a:	e013      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d105      	bne.n	80011b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011a4:	2308      	movs	r3, #8
 80011a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	611a      	str	r2, [r3, #16]
          break;
 80011ae:	e009      	b.n	80011c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	615a      	str	r2, [r3, #20]
          break;
 80011ba:	e003      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011bc:	2300      	movs	r3, #0
 80011be:	623b      	str	r3, [r7, #32]
          break;
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x130>
          break;
 80011c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2bff      	cmp	r3, #255	; 0xff
 80011c8:	d801      	bhi.n	80011ce <HAL_GPIO_Init+0x13a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	e001      	b.n	80011d2 <HAL_GPIO_Init+0x13e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3304      	adds	r3, #4
 80011d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d802      	bhi.n	80011e0 <HAL_GPIO_Init+0x14c>
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	e002      	b.n	80011e6 <HAL_GPIO_Init+0x152>
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	3b08      	subs	r3, #8
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	210f      	movs	r1, #15
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	fa01 f303 	lsl.w	r3, r1, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	401a      	ands	r2, r3
 80011f8:	6a39      	ldr	r1, [r7, #32]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	431a      	orrs	r2, r3
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 80b1 	beq.w	8001376 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001214:	4b4d      	ldr	r3, [pc, #308]	; (800134c <HAL_GPIO_Init+0x2b8>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a4c      	ldr	r2, [pc, #304]	; (800134c <HAL_GPIO_Init+0x2b8>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_GPIO_Init+0x2b8>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800122c:	4a48      	ldr	r2, [pc, #288]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a40      	ldr	r2, [pc, #256]	; (8001354 <HAL_GPIO_Init+0x2c0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1ec>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3f      	ldr	r2, [pc, #252]	; (8001358 <HAL_GPIO_Init+0x2c4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1e8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3e      	ldr	r2, [pc, #248]	; (800135c <HAL_GPIO_Init+0x2c8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <HAL_GPIO_Init+0x2cc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1e0>
 8001270:	2303      	movs	r3, #3
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001274:	2304      	movs	r3, #4
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1ee>
 8001280:	2300      	movs	r3, #0
 8001282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001292:	492f      	ldr	r1, [pc, #188]	; (8001350 <HAL_GPIO_Init+0x2bc>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	492c      	ldr	r1, [pc, #176]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4928      	ldr	r1, [pc, #160]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4922      	ldr	r1, [pc, #136]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	491e      	ldr	r1, [pc, #120]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fc:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	4918      	ldr	r1, [pc, #96]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4914      	ldr	r1, [pc, #80]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d021      	beq.n	8001368 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	490e      	ldr	r1, [pc, #56]	; (8001364 <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e021      	b.n	8001376 <HAL_GPIO_Init+0x2e2>
 8001332:	bf00      	nop
 8001334:	10320000 	.word	0x10320000
 8001338:	10310000 	.word	0x10310000
 800133c:	10220000 	.word	0x10220000
 8001340:	10210000 	.word	0x10210000
 8001344:	10120000 	.word	0x10120000
 8001348:	10110000 	.word	0x10110000
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	40011000 	.word	0x40011000
 8001360:	40011400 	.word	0x40011400
 8001364:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_GPIO_Init+0x304>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	43db      	mvns	r3, r3
 8001370:	4909      	ldr	r1, [pc, #36]	; (8001398 <HAL_GPIO_Init+0x304>)
 8001372:	4013      	ands	r3, r2
 8001374:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	3301      	adds	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	fa22 f303 	lsr.w	r3, r2, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	f47f ae8e 	bne.w	80010a8 <HAL_GPIO_Init+0x14>
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	372c      	adds	r7, #44	; 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e12b      	b.n	8001636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff f8ea 	bl	80005cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800141e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800142e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001430:	f002 f990 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8001434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a81      	ldr	r2, [pc, #516]	; (8001640 <HAL_I2C_Init+0x274>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d807      	bhi.n	8001450 <HAL_I2C_Init+0x84>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a80      	ldr	r2, [pc, #512]	; (8001644 <HAL_I2C_Init+0x278>)
 8001444:	4293      	cmp	r3, r2
 8001446:	bf94      	ite	ls
 8001448:	2301      	movls	r3, #1
 800144a:	2300      	movhi	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e006      	b.n	800145e <HAL_I2C_Init+0x92>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4a7d      	ldr	r2, [pc, #500]	; (8001648 <HAL_I2C_Init+0x27c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	bf94      	ite	ls
 8001458:	2301      	movls	r3, #1
 800145a:	2300      	movhi	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0e7      	b.n	8001636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <HAL_I2C_Init+0x280>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a6a      	ldr	r2, [pc, #424]	; (8001640 <HAL_I2C_Init+0x274>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d802      	bhi.n	80014a0 <HAL_I2C_Init+0xd4>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3301      	adds	r3, #1
 800149e:	e009      	b.n	80014b4 <HAL_I2C_Init+0xe8>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	4a69      	ldr	r2, [pc, #420]	; (8001650 <HAL_I2C_Init+0x284>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	3301      	adds	r3, #1
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	495c      	ldr	r1, [pc, #368]	; (8001640 <HAL_I2C_Init+0x274>)
 80014d0:	428b      	cmp	r3, r1
 80014d2:	d819      	bhi.n	8001508 <HAL_I2C_Init+0x13c>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e59      	subs	r1, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014e8:	400b      	ands	r3, r1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <HAL_I2C_Init+0x138>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1e59      	subs	r1, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001502:	e051      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001504:	2304      	movs	r3, #4
 8001506:	e04f      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <HAL_I2C_Init+0x168>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	e012      	b.n	800155a <HAL_I2C_Init+0x18e>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e58      	subs	r0, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	0099      	lsls	r1, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Init+0x196>
 800155e:	2301      	movs	r3, #1
 8001560:	e022      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10e      	bne.n	8001588 <HAL_I2C_Init+0x1bc>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e58      	subs	r0, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6859      	ldr	r1, [r3, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	440b      	add	r3, r1
 8001578:	fbb0 f3f3 	udiv	r3, r0, r3
 800157c:	3301      	adds	r3, #1
 800157e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001586:	e00f      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e58      	subs	r0, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	0099      	lsls	r1, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	6809      	ldr	r1, [r1, #0]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6911      	ldr	r1, [r2, #16]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	4311      	orrs	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	000186a0 	.word	0x000186a0
 8001644:	001e847f 	.word	0x001e847f
 8001648:	003d08ff 	.word	0x003d08ff
 800164c:	431bde83 	.word	0x431bde83
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	b08b      	sub	sp, #44	; 0x2c
 8001658:	af06      	add	r7, sp, #24
 800165a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e0fd      	b.n	8001862 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f006 fb22 	bl	8007cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f002 fa5f 	bl	8003b50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	687e      	ldr	r6, [r7, #4]
 800169a:	466d      	mov	r5, sp
 800169c:	f106 0410 	add.w	r4, r6, #16
 80016a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	602b      	str	r3, [r5, #0]
 80016a8:	1d33      	adds	r3, r6, #4
 80016aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	f002 fa29 	bl	8003b04 <USB_CoreInit>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0ce      	b.n	8001862 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fa5a 	bl	8003b84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e04c      	b.n	8001770 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	3301      	adds	r3, #1
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	b298      	uxth	r0, r3
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3336      	adds	r3, #54	; 0x36
 8001714:	4602      	mov	r2, r0
 8001716:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	1c5a      	adds	r2, r3, #1
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	440b      	add	r3, r1
 8001728:	3303      	adds	r3, #3
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800172e:	7bfa      	ldrb	r2, [r7, #15]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	3338      	adds	r3, #56	; 0x38
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	333c      	adds	r3, #60	; 0x3c
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	440b      	add	r3, r1
 8001764:	3340      	adds	r3, #64	; 0x40
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	3301      	adds	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3ad      	bcc.n	80016d6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e044      	b.n	800180a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	3301      	adds	r3, #1
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	429a      	cmp	r2, r3
 8001812:	d3b5      	bcc.n	8001780 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	687e      	ldr	r6, [r7, #4]
 800181c:	466d      	mov	r5, sp
 800181e:	f106 0410 	add.w	r4, r6, #16
 8001822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	602b      	str	r3, [r5, #0]
 800182a:	1d33      	adds	r3, r6, #4
 800182c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800182e:	6838      	ldr	r0, [r7, #0]
 8001830:	f002 f9b4 	bl	8003b9c <USB_DevInit>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2202      	movs	r2, #2
 800183e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00d      	b.n	8001862 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f004 fe66 	bl	800652c <USB_DevDisconnect>

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800186a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_PCD_Start+0x16>
 800187c:	2302      	movs	r3, #2
 800187e:	e016      	b.n	80018ae <HAL_PCD_Start+0x44>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 f949 	bl	8003b24 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001892:	2101      	movs	r1, #1
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f006 fc6c 	bl	8008172 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fe3a 	bl	8006518 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b088      	sub	sp, #32
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 fe3c 	bl	8006540 <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018d2:	d102      	bne.n	80018da <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fb48 	bl	8001f6a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fe2e 	bl	8006540 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ee:	d112      	bne.n	8001916 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001902:	b292      	uxth	r2, r2
 8001904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f006 fa56 	bl	8007dba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800190e:	2100      	movs	r1, #0
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f923 	bl	8001b5c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f004 fe10 	bl	8006540 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800192a:	d10b      	bne.n	8001944 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800193e:	b292      	uxth	r2, r2
 8001940:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f004 fdf9 	bl	8006540 <USB_ReadInterrupts>
 800194e:	4603      	mov	r3, r0
 8001950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001958:	d10b      	bne.n	8001972 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001962:	b29a      	uxth	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800196c:	b292      	uxth	r2, r2
 800196e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fde2 	bl	8006540 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001986:	d126      	bne.n	80019d6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001990:	b29a      	uxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	b292      	uxth	r2, r2
 800199c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0208 	bic.w	r2, r2, #8
 80019b2:	b292      	uxth	r2, r2
 80019b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f006 fa37 	bl	8007e2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019d0:	b292      	uxth	r2, r2
 80019d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f004 fdb0 	bl	8006540 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ea:	f040 8082 	bne.w	8001af2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	77fb      	strb	r3, [r7, #31]
 80019f2:	e010      	b.n	8001a16 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	7ffb      	ldrb	r3, [r7, #31]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	441a      	add	r2, r3
 8001a00:	7ffb      	ldrb	r3, [r7, #31]
 8001a02:	8812      	ldrh	r2, [r2, #0]
 8001a04:	b292      	uxth	r2, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	3320      	adds	r3, #32
 8001a0a:	443b      	add	r3, r7
 8001a0c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
 8001a12:	3301      	adds	r3, #1
 8001a14:	77fb      	strb	r3, [r7, #31]
 8001a16:	7ffb      	ldrb	r3, [r7, #31]
 8001a18:	2b07      	cmp	r3, #7
 8001a1a:	d9eb      	bls.n	80019f4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001a4c:	bf00      	nop
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f6      	beq.n	8001a4e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a72:	b292      	uxth	r2, r2
 8001a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	77fb      	strb	r3, [r7, #31]
 8001a7c:	e00f      	b.n	8001a9e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	4611      	mov	r1, r2
 8001a86:	7ffa      	ldrb	r2, [r7, #31]
 8001a88:	0092      	lsls	r2, r2, #2
 8001a8a:	440a      	add	r2, r1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	3320      	adds	r3, #32
 8001a90:	443b      	add	r3, r7
 8001a92:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001a96:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001a98:	7ffb      	ldrb	r3, [r7, #31]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	77fb      	strb	r3, [r7, #31]
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	d9ec      	bls.n	8001a7e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0208 	orr.w	r2, r2, #8
 8001ab6:	b292      	uxth	r2, r2
 8001ab8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ace:	b292      	uxth	r2, r2
 8001ad0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0204 	orr.w	r2, r2, #4
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f006 f983 	bl	8007df8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 fd22 	bl	8006540 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b06:	d10e      	bne.n	8001b26 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f006 f93c 	bl	8007d9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f004 fd08 	bl	8006540 <USB_ReadInterrupts>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b3a:	d10b      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4e:	b292      	uxth	r2, r2
 8001b50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_PCD_SetAddress+0x1a>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e013      	b.n	8001b9e <HAL_PCD_SetAddress+0x42>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fcaf 	bl	80064f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	4608      	mov	r0, r1
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	70fb      	strb	r3, [r7, #3]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	803b      	strh	r3, [r7, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	da0e      	bge.n	8001bea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	705a      	strb	r2, [r3, #1]
 8001be8:	e00e      	b.n	8001c08 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	f003 0207 	and.w	r2, r3, #7
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c14:	883a      	ldrh	r2, [r7, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	78ba      	ldrb	r2, [r7, #2]
 8001c1e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	785b      	ldrb	r3, [r3, #1]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c32:	78bb      	ldrb	r3, [r7, #2]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d102      	bne.n	8001c3e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_PCD_EP_Open+0xa6>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e00e      	b.n	8001c6a <HAL_PCD_EP_Open+0xc4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68f9      	ldr	r1, [r7, #12]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f001 ffbe 	bl	8003bdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c68:	7afb      	ldrb	r3, [r7, #11]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da0e      	bge.n	8001ca4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	705a      	strb	r2, [r3, #1]
 8001ca2:	e00e      	b.n	8001cc2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 0207 	and.w	r2, r3, #7
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_PCD_EP_Close+0x6a>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e00e      	b.n	8001cfa <HAL_PCD_EP_Close+0x88>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 fae0 	bl	80042b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d12:	7afb      	ldrb	r3, [r7, #11]
 8001d14:	f003 0207 	and.w	r2, r3, #7
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d106      	bne.n	8001d66 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6979      	ldr	r1, [r7, #20]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fc92 	bl	8004688 <USB_EPStartXfer>
 8001d64:	e005      	b.n	8001d72 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 fc8b 	bl	8004688 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fc4f 	bl	8004688 <USB_EPStartXfer>
 8001dea:	e005      	b.n	8001df8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6979      	ldr	r1, [r7, #20]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f002 fc48 	bl	8004688 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0207 	and.w	r2, r3, #7
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d901      	bls.n	8001e20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e04c      	b.n	8001eba <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0e      	bge.n	8001e46 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	705a      	strb	r2, [r3, #1]
 8001e44:	e00c      	b.n	8001e60 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_EP_SetStall+0x7e>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e01c      	b.n	8001eba <HAL_PCD_EP_SetStall+0xb8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 fa32 	bl	80062f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d108      	bne.n	8001eb0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f004 fb57 	bl	800655e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d901      	bls.n	8001ee0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e040      	b.n	8001f62 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da0e      	bge.n	8001f06 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]
 8001f04:	e00e      	b.n	8001f24 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 0207 	and.w	r2, r3, #7
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_PCD_EP_ClrStall+0x82>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e00e      	b.n	8001f62 <HAL_PCD_EP_ClrStall+0xa0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68f9      	ldr	r1, [r7, #12]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 fa20 	bl	8006398 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b08e      	sub	sp, #56	; 0x38
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f72:	e2ec      	b.n	800254e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f7c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f8a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 8161 	bne.w	8002256 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d152      	bne.n	8002044 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	81fb      	strh	r3, [r7, #14]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
 8001fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3328      	adds	r3, #40	; 0x28
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	441a      	add	r2, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002002:	2100      	movs	r1, #0
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f005 feb0 	bl	8007d6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 829b 	beq.w	800254e <PCD_EP_ISR_Handler+0x5e4>
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 8296 	bne.w	800254e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800202e:	b2da      	uxtb	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b292      	uxth	r2, r2
 8002036:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002042:	e284      	b.n	800254e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002054:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205a:	2b00      	cmp	r3, #0
 800205c:	d034      	beq.n	80020c8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	3306      	adds	r3, #6
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800209c:	b29b      	uxth	r3, r3
 800209e:	f004 faae 	bl	80065fe <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020ae:	4013      	ands	r3, r2
 80020b0:	823b      	strh	r3, [r7, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	8a3a      	ldrh	r2, [r7, #16]
 80020b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020bc:	b292      	uxth	r2, r2
 80020be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f005 fe25 	bl	8007d10 <HAL_PCD_SetupStageCallback>
 80020c6:	e242      	b.n	800254e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f280 823e 	bge.w	800254e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020de:	4013      	ands	r3, r2
 80020e0:	83bb      	strh	r3, [r7, #28]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	8bba      	ldrh	r2, [r7, #28]
 80020e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ec:	b292      	uxth	r2, r2
 80020ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	3306      	adds	r3, #6
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d019      	beq.n	8002158 <PCD_EP_ISR_Handler+0x1ee>
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d015      	beq.n	8002158 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	6959      	ldr	r1, [r3, #20]
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800213c:	b29b      	uxth	r3, r3
 800213e:	f004 fa5e 	bl	80065fe <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	441a      	add	r2, r3
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002150:	2100      	movs	r1, #0
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f005 fdee 	bl	8007d34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 81f2 	bne.w	800254e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002178:	b29b      	uxth	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	4413      	add	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d112      	bne.n	80021b8 <PCD_EP_ISR_Handler+0x24e>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800219c:	b29a      	uxth	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	801a      	strh	r2, [r3, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	e02f      	b.n	8002218 <PCD_EP_ISR_Handler+0x2ae>
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b3e      	cmp	r3, #62	; 0x3e
 80021be:	d813      	bhi.n	80021e8 <PCD_EP_ISR_Handler+0x27e>
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	633b      	str	r3, [r7, #48]	; 0x30
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <PCD_EP_ISR_Handler+0x270>
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	3301      	adds	r3, #1
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	b29b      	uxth	r3, r3
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	e017      	b.n	8002218 <PCD_EP_ISR_Handler+0x2ae>
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <PCD_EP_ISR_Handler+0x298>
 80021fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fe:	3b01      	subs	r3, #1
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	b29b      	uxth	r3, r3
 8002206:	029b      	lsls	r3, r3, #10
 8002208:	b29b      	uxth	r3, r3
 800220a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800220e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002212:	b29a      	uxth	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002228:	827b      	strh	r3, [r7, #18]
 800222a:	8a7b      	ldrh	r3, [r7, #18]
 800222c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002230:	827b      	strh	r3, [r7, #18]
 8002232:	8a7b      	ldrh	r3, [r7, #18]
 8002234:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002238:	827b      	strh	r3, [r7, #18]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	8a7b      	ldrh	r3, [r7, #18]
 8002240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800224c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002250:	b29b      	uxth	r3, r3
 8002252:	8013      	strh	r3, [r2, #0]
 8002254:	e17b      	b.n	800254e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002268:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800226c:	2b00      	cmp	r3, #0
 800226e:	f280 80ea 	bge.w	8002446 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b29a      	uxth	r2, r3
 8002284:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002288:	4013      	ands	r3, r2
 800228a:	853b      	strh	r3, [r7, #40]	; 0x28
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800229c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022a0:	b292      	uxth	r2, r2
 80022a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80022a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	7b1b      	ldrb	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d122      	bne.n	8002308 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	3306      	adds	r3, #6
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ea:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80022ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8087 	beq.w	8002402 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	6959      	ldr	r1, [r3, #20]
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	88da      	ldrh	r2, [r3, #6]
 8002300:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002302:	f004 f97c 	bl	80065fe <USB_ReadPMA>
 8002306:	e07c      	b.n	8002402 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	78db      	ldrb	r3, [r3, #3]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d108      	bne.n	8002322 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002310:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002312:	461a      	mov	r2, r3
 8002314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f927 	bl	800256a <HAL_PCD_EP_DB_Receive>
 800231c:	4603      	mov	r3, r0
 800231e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002320:	e06f      	b.n	8002402 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233c:	847b      	strh	r3, [r7, #34]	; 0x22
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	441a      	add	r2, r3
 800234c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800234e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800235e:	b29b      	uxth	r3, r3
 8002360:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d021      	beq.n	80023c0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	3302      	adds	r3, #2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02a      	beq.n	8002402 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	6959      	ldr	r1, [r3, #20]
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	891a      	ldrh	r2, [r3, #8]
 80023b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ba:	f004 f920 	bl	80065fe <USB_ReadPMA>
 80023be:	e020      	b.n	8002402 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	3306      	adds	r3, #6
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	6959      	ldr	r1, [r3, #20]
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	895a      	ldrh	r2, [r3, #10]
 80023fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023fe:	f004 f8fe 	bl	80065fe <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002408:	441a      	add	r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002414:	441a      	add	r2, r3
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d004      	beq.n	800242c <PCD_EP_ISR_Handler+0x4c2>
 8002422:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d206      	bcs.n	800243a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f005 fc7e 	bl	8007d34 <HAL_PCD_DataOutStageCallback>
 8002438:	e005      	b.n	8002446 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002440:	4618      	mov	r0, r3
 8002442:	f002 f921 	bl	8004688 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d07e      	beq.n	800254e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002450:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	843b      	strh	r3, [r7, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	441a      	add	r2, r3
 800248e:	8c3b      	ldrh	r3, [r7, #32]
 8002490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002498:	b29b      	uxth	r3, r3
 800249a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	78db      	ldrb	r3, [r3, #3]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d00c      	beq.n	80024be <PCD_EP_ISR_Handler+0x554>
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	78db      	ldrb	r3, [r3, #3]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d146      	bne.n	8002542 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80024b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d141      	bne.n	8002542 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4413      	add	r3, r2
 80024d2:	3302      	adds	r3, #2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	8bfb      	ldrh	r3, [r7, #30]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d906      	bls.n	8002500 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	8bfb      	ldrh	r3, [r7, #30]
 80024f8:	1ad2      	subs	r2, r2, r3
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	619a      	str	r2, [r3, #24]
 80024fe:	e002      	b.n	8002506 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f005 fc28 	bl	8007d6a <HAL_PCD_DataInStageCallback>
 800251a:	e018      	b.n	800254e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	8bfb      	ldrh	r3, [r7, #30]
 8002522:	441a      	add	r2, r3
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	8bfb      	ldrh	r3, [r7, #30]
 800252e:	441a      	add	r2, r3
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800253a:	4618      	mov	r0, r3
 800253c:	f002 f8a4 	bl	8004688 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002540:	e005      	b.n	800254e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002542:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002544:	461a      	mov	r2, r3
 8002546:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f91b 	bl	8002784 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002556:	b29b      	uxth	r3, r3
 8002558:	b21b      	sxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f6ff ad0a 	blt.w	8001f74 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3738      	adds	r7, #56	; 0x38
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	4613      	mov	r3, r2
 8002576:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002578:	88fb      	ldrh	r3, [r7, #6]
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d07e      	beq.n	8002680 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	3302      	adds	r3, #2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	699a      	ldr	r2, [r3, #24]
 80025b0:	8b7b      	ldrh	r3, [r7, #26]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d306      	bcc.n	80025c4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	8b7b      	ldrh	r3, [r7, #26]
 80025bc:	1ad2      	subs	r2, r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	619a      	str	r2, [r3, #24]
 80025c2:	e002      	b.n	80025ca <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d123      	bne.n	800261a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ec:	833b      	strh	r3, [r7, #24]
 80025ee:	8b3b      	ldrh	r3, [r7, #24]
 80025f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025f4:	833b      	strh	r3, [r7, #24]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	441a      	add	r2, r3
 8002604:	8b3b      	ldrh	r3, [r7, #24]
 8002606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800260a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800260e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002616:	b29b      	uxth	r3, r3
 8002618:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01f      	beq.n	8002664 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	82fb      	strh	r3, [r7, #22]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	8afb      	ldrh	r3, [r7, #22]
 8002650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002660:	b29b      	uxth	r3, r3
 8002662:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002664:	8b7b      	ldrh	r3, [r7, #26]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8087 	beq.w	800277a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6959      	ldr	r1, [r3, #20]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	891a      	ldrh	r2, [r3, #8]
 8002678:	8b7b      	ldrh	r3, [r7, #26]
 800267a:	f003 ffc0 	bl	80065fe <USB_ReadPMA>
 800267e:	e07c      	b.n	800277a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	3306      	adds	r3, #6
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	4413      	add	r3, r2
 800269e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	8b7b      	ldrh	r3, [r7, #26]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d306      	bcc.n	80026c2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	8b7b      	ldrh	r3, [r7, #26]
 80026ba:	1ad2      	subs	r2, r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	619a      	str	r2, [r3, #24]
 80026c0:	e002      	b.n	80026c8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d123      	bne.n	8002718 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	83fb      	strh	r3, [r7, #30]
 80026ec:	8bfb      	ldrh	r3, [r7, #30]
 80026ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026f2:	83fb      	strh	r3, [r7, #30]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	441a      	add	r2, r3
 8002702:	8bfb      	ldrh	r3, [r7, #30]
 8002704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800270c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002714:	b29b      	uxth	r3, r3
 8002716:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11f      	bne.n	8002762 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273c:	83bb      	strh	r3, [r7, #28]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	441a      	add	r2, r3
 800274c:	8bbb      	ldrh	r3, [r7, #28]
 800274e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800275e:	b29b      	uxth	r3, r3
 8002760:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002762:	8b7b      	ldrh	r3, [r7, #26]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	6959      	ldr	r1, [r3, #20]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	895a      	ldrh	r2, [r3, #10]
 8002774:	8b7b      	ldrh	r3, [r7, #26]
 8002776:	f003 ff42 	bl	80065fe <USB_ReadPMA>
    }
  }

  return count;
 800277a:	8b7b      	ldrh	r3, [r7, #26]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b0a2      	sub	sp, #136	; 0x88
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	4613      	mov	r3, r2
 8002790:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 81c7 	beq.w	8002b2c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	3302      	adds	r3, #2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d907      	bls.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027de:	1ad2      	subs	r2, r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	619a      	str	r2, [r3, #24]
 80027e4:	e002      	b.n	80027ec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 80b9 	bne.w	8002968 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	785b      	ldrb	r3, [r3, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d126      	bne.n	800284c <HAL_PCD_EP_DB_Transmit+0xc8>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280c:	b29b      	uxth	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	4413      	add	r3, r2
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	011a      	lsls	r2, r3, #4
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	4413      	add	r3, r2
 8002820:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002830:	b29a      	uxth	r2, r3
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002844:	b29a      	uxth	r2, r3
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	e01a      	b.n	8002882 <HAL_PCD_EP_DB_Transmit+0xfe>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d116      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	4413      	add	r3, r2
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	011a      	lsls	r2, r3, #4
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	4413      	add	r3, r2
 8002876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	2200      	movs	r2, #0
 8002880:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	623b      	str	r3, [r7, #32]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d126      	bne.n	80028de <HAL_PCD_EP_DB_Transmit+0x15a>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4413      	add	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	011a      	lsls	r2, r3, #4
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4413      	add	r3, r2
 80028b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	801a      	strh	r2, [r3, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	e017      	b.n	800290e <HAL_PCD_EP_DB_Transmit+0x18a>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d113      	bne.n	800290e <HAL_PCD_EP_DB_Transmit+0x18a>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	4413      	add	r3, r2
 80028f6:	623b      	str	r3, [r7, #32]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	011a      	lsls	r2, r3, #4
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	4413      	add	r3, r2
 8002902:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2200      	movs	r2, #0
 800290c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f005 fa28 	bl	8007d6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 82d4 	beq.w	8002ece <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800293c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002940:	827b      	strh	r3, [r7, #18]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	441a      	add	r2, r3
 8002950:	8a7b      	ldrh	r3, [r7, #18]
 8002952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800295a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800295e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002962:	b29b      	uxth	r3, r3
 8002964:	8013      	strh	r3, [r2, #0]
 8002966:	e2b2      	b.n	8002ece <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d021      	beq.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80029a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029bc:	2b01      	cmp	r3, #1
 80029be:	f040 8286 	bne.w	8002ece <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ca:	441a      	add	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	69da      	ldr	r2, [r3, #28]
 80029d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d8:	441a      	add	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6a1a      	ldr	r2, [r3, #32]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d309      	bcc.n	80029fe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6a1a      	ldr	r2, [r3, #32]
 80029f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	621a      	str	r2, [r3, #32]
 80029fc:	e015      	b.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002a06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a0a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a14:	e009      	b.n	8002a2a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	785b      	ldrb	r3, [r3, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d155      	bne.n	8002ade <HAL_PCD_EP_DB_Transmit+0x35a>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	4413      	add	r3, r2
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	011a      	lsls	r2, r3, #4
 8002a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a52:	4413      	add	r3, r2
 8002a54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a58:	637b      	str	r3, [r7, #52]	; 0x34
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d112      	bne.n	8002a86 <HAL_PCD_EP_DB_Transmit+0x302>
 8002a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	801a      	strh	r2, [r3, #0]
 8002a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	e047      	b.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a88:	2b3e      	cmp	r3, #62	; 0x3e
 8002a8a:	d811      	bhi.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	e032      	b.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <HAL_PCD_EP_DB_Transmit+0x342>
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ada:	801a      	strh	r2, [r3, #0]
 8002adc:	e01b      	b.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d117      	bne.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x392>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afa:	4413      	add	r3, r2
 8002afc:	643b      	str	r3, [r7, #64]	; 0x40
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	011a      	lsls	r2, r3, #4
 8002b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b06:	4413      	add	r3, r2
 8002b08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b14:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	6959      	ldr	r1, [r3, #20]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	891a      	ldrh	r2, [r3, #8]
 8002b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f003 fd25 	bl	8006574 <USB_WritePMA>
 8002b2a:	e1d0      	b.n	8002ece <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3306      	adds	r3, #6
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d307      	bcc.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b6c:	1ad2      	subs	r2, r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	619a      	str	r2, [r3, #24]
 8002b72:	e002      	b.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f040 80c4 	bne.w	8002d0c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	785b      	ldrb	r3, [r3, #1]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d126      	bne.n	8002bda <HAL_PCD_EP_DB_Transmit+0x456>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba0:	4413      	add	r3, r2
 8002ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	011a      	lsls	r2, r3, #4
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	4413      	add	r3, r2
 8002bae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc2:	801a      	strh	r2, [r3, #0]
 8002bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd6:	801a      	strh	r2, [r3, #0]
 8002bd8:	e01a      	b.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d116      	bne.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	677b      	str	r3, [r7, #116]	; 0x74
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf6:	4413      	add	r3, r2
 8002bf8:	677b      	str	r3, [r7, #116]	; 0x74
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	011a      	lsls	r2, r3, #4
 8002c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c02:	4413      	add	r3, r2
 8002c04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c08:	673b      	str	r3, [r7, #112]	; 0x70
 8002c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d12f      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c36:	4413      	add	r3, r2
 8002c38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	011a      	lsls	r2, r3, #4
 8002c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c46:	4413      	add	r3, r2
 8002c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c62:	801a      	strh	r2, [r3, #0]
 8002c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	e017      	b.n	8002cae <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d113      	bne.n	8002cae <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c94:	4413      	add	r3, r2
 8002c96:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	011a      	lsls	r2, r3, #4
 8002c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002caa:	2200      	movs	r2, #0
 8002cac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f005 f858 	bl	8007d6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 8104 	bne.w	8002ece <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]
 8002d0a:	e0e0      	b.n	8002ece <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d121      	bne.n	8002d5a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	441a      	add	r2, r3
 8002d42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 80b4 	bne.w	8002ece <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d6e:	441a      	add	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d7c:	441a      	add	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d309      	bcc.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	6a1a      	ldr	r2, [r3, #32]
 8002d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9a:	1ad2      	subs	r2, r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	621a      	str	r2, [r3, #32]
 8002da0:	e015      	b.n	8002dce <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002daa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dae:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002db8:	e009      	b.n	8002dce <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	785b      	ldrb	r3, [r3, #1]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d155      	bne.n	8002e88 <HAL_PCD_EP_DB_Transmit+0x704>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002df0:	4413      	add	r3, r2
 8002df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	011a      	lsls	r2, r3, #4
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e02:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d112      	bne.n	8002e30 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	e044      	b.n	8002eba <HAL_PCD_EP_DB_Transmit+0x736>
 8002e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e32:	2b3e      	cmp	r3, #62	; 0x3e
 8002e34:	d811      	bhi.n	8002e5a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e48:	3301      	adds	r3, #1
 8002e4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	029b      	lsls	r3, r3, #10
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e56:	801a      	strh	r2, [r3, #0]
 8002e58:	e02f      	b.n	8002eba <HAL_PCD_EP_DB_Transmit+0x736>
 8002e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d102      	bne.n	8002e70 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	029b      	lsls	r3, r3, #10
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e84:	801a      	strh	r2, [r3, #0]
 8002e86:	e018      	b.n	8002eba <HAL_PCD_EP_DB_Transmit+0x736>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d114      	bne.n	8002eba <HAL_PCD_EP_DB_Transmit+0x736>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e9e:	4413      	add	r3, r2
 8002ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	011a      	lsls	r2, r3, #4
 8002ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eb8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6959      	ldr	r1, [r3, #20]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	895a      	ldrh	r2, [r3, #10]
 8002ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f003 fb53 	bl	8006574 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee8:	823b      	strh	r3, [r7, #16]
 8002eea:	8a3b      	ldrh	r3, [r7, #16]
 8002eec:	f083 0310 	eor.w	r3, r3, #16
 8002ef0:	823b      	strh	r3, [r7, #16]
 8002ef2:	8a3b      	ldrh	r3, [r7, #16]
 8002ef4:	f083 0320 	eor.w	r3, r3, #32
 8002ef8:	823b      	strh	r3, [r7, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	441a      	add	r2, r3
 8002f08:	8a3b      	ldrh	r3, [r7, #16]
 8002f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3788      	adds	r7, #136	; 0x88
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607b      	str	r3, [r7, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	817b      	strh	r3, [r7, #10]
 8002f36:	4613      	mov	r3, r2
 8002f38:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e009      	b.n	8002f72 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f5e:	897a      	ldrh	r2, [r7, #10]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002f72:	893b      	ldrh	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	80da      	strh	r2, [r3, #6]
 8002f86:	e00b      	b.n	8002fa0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e272      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8087 	beq.w	80030da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fcc:	4b92      	ldr	r3, [pc, #584]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d00c      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fd8:	4b8f      	ldr	r3, [pc, #572]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d112      	bne.n	800300a <HAL_RCC_OscConfig+0x5e>
 8002fe4:	4b8c      	ldr	r3, [pc, #560]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d10b      	bne.n	800300a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff2:	4b89      	ldr	r3, [pc, #548]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d06c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x12c>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d168      	bne.n	80030d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e24c      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x76>
 8003014:	4b80      	ldr	r3, [pc, #512]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a7f      	ldr	r2, [pc, #508]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e02e      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b7b      	ldr	r3, [pc, #492]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7a      	ldr	r2, [pc, #488]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b78      	ldr	r3, [pc, #480]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a77      	ldr	r2, [pc, #476]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800303c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e01d      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0xbc>
 800304e:	4b72      	ldr	r3, [pc, #456]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a71      	ldr	r2, [pc, #452]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	4b6f      	ldr	r3, [pc, #444]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6e      	ldr	r2, [pc, #440]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003068:	4b6b      	ldr	r3, [pc, #428]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6a      	ldr	r2, [pc, #424]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a67      	ldr	r2, [pc, #412]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800307a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d013      	beq.n	80030b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fd fcb6 	bl	80009f8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003090:	f7fd fcb2 	bl	80009f8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	; 0x64
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e200      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b5d      	ldr	r3, [pc, #372]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0xe4>
 80030ae:	e014      	b.n	80030da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fd fca2 	bl	80009f8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b8:	f7fd fc9e 	bl	80009f8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b64      	cmp	r3, #100	; 0x64
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1ec      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x10c>
 80030d6:	e000      	b.n	80030da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d063      	beq.n	80031ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e6:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030f2:	4b49      	ldr	r3, [pc, #292]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d11c      	bne.n	8003138 <HAL_RCC_OscConfig+0x18c>
 80030fe:	4b46      	ldr	r3, [pc, #280]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d116      	bne.n	8003138 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	4b43      	ldr	r3, [pc, #268]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_RCC_OscConfig+0x176>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d001      	beq.n	8003122 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e1c0      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003122:	4b3d      	ldr	r3, [pc, #244]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4939      	ldr	r1, [pc, #228]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003136:	e03a      	b.n	80031ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003140:	4b36      	ldr	r3, [pc, #216]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fd fc57 	bl	80009f8 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800314e:	f7fd fc53 	bl	80009f8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1a1      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4927      	ldr	r1, [pc, #156]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	600b      	str	r3, [r1, #0]
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <HAL_RCC_OscConfig+0x270>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fd fc36 	bl	80009f8 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fd fc32 	bl	80009f8 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e180      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d03a      	beq.n	8003230 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_RCC_OscConfig+0x274>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c8:	f7fd fc16 	bl	80009f8 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d0:	f7fd fc12 	bl	80009f8 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e160      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031ee:	2001      	movs	r0, #1
 80031f0:	f000 fad8 	bl	80037a4 <RCC_Delay>
 80031f4:	e01c      	b.n	8003230 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f6:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <HAL_RCC_OscConfig+0x274>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fd fbfc 	bl	80009f8 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003202:	e00f      	b.n	8003224 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fd fbf8 	bl	80009f8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d908      	bls.n	8003224 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e146      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	42420000 	.word	0x42420000
 8003220:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003224:	4b92      	ldr	r3, [pc, #584]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e9      	bne.n	8003204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a6 	beq.w	800338a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003242:	4b8b      	ldr	r3, [pc, #556]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	4a87      	ldr	r2, [pc, #540]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	61d3      	str	r3, [r2, #28]
 800325a:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b7f      	ldr	r3, [pc, #508]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a7e      	ldr	r2, [pc, #504]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fd fbb9 	bl	80009f8 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fd fbb5 	bl	80009f8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b64      	cmp	r3, #100	; 0x64
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e103      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b75      	ldr	r3, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x4c8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x312>
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6213      	str	r3, [r2, #32]
 80032bc:	e02d      	b.n	800331a <HAL_RCC_OscConfig+0x36e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x334>
 80032c6:	4b6a      	ldr	r3, [pc, #424]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	4a69      	ldr	r2, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6213      	str	r3, [r2, #32]
 80032d2:	4b67      	ldr	r3, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a66      	ldr	r2, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f023 0304 	bic.w	r3, r3, #4
 80032dc:	6213      	str	r3, [r2, #32]
 80032de:	e01c      	b.n	800331a <HAL_RCC_OscConfig+0x36e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d10c      	bne.n	8003302 <HAL_RCC_OscConfig+0x356>
 80032e8:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	4a60      	ldr	r2, [pc, #384]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6213      	str	r3, [r2, #32]
 80032f4:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6213      	str	r3, [r2, #32]
 8003300:	e00b      	b.n	800331a <HAL_RCC_OscConfig+0x36e>
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	4a5a      	ldr	r2, [pc, #360]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6213      	str	r3, [r2, #32]
 800330e:	4b58      	ldr	r3, [pc, #352]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a57      	ldr	r2, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d015      	beq.n	800334e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fd fb69 	bl	80009f8 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fd fb65 	bl	80009f8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0b1      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ee      	beq.n	800332a <HAL_RCC_OscConfig+0x37e>
 800334c:	e014      	b.n	8003378 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fd fb53 	bl	80009f8 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fd fb4f 	bl	80009f8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e09b      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ee      	bne.n	8003356 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4a3b      	ldr	r2, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003388:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8087 	beq.w	80034a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d061      	beq.n	8003464 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d146      	bne.n	8003436 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_OscConfig+0x4cc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fd fb23 	bl	80009f8 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b6:	f7fd fb1f 	bl	80009f8 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e06d      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d108      	bne.n	80033f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033de:	4b24      	ldr	r3, [pc, #144]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4921      	ldr	r1, [pc, #132]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a19      	ldr	r1, [r3, #32]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	430b      	orrs	r3, r1
 8003402:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x4cc>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fd faf3 	bl	80009f8 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003416:	f7fd faef 	bl	80009f8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e03d      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x46a>
 8003434:	e035      	b.n	80034a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCC_OscConfig+0x4cc>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fd fadc 	bl	80009f8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fd fad8 	bl	80009f8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e026      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x498>
 8003462:	e01e      	b.n	80034a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e019      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
 8003470:	40021000 	.word	0x40021000
 8003474:	40007000 	.word	0x40007000
 8003478:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCC_OscConfig+0x500>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	429a      	cmp	r2, r3
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d001      	beq.n	80034a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000

080034b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0d0      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d910      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 0207 	bic.w	r2, r3, #7
 80034da:	4965      	ldr	r1, [pc, #404]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800352e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d040      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d115      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e073      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e06b      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f023 0203 	bic.w	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4936      	ldr	r1, [pc, #216]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a0:	f7fd fa2a 	bl	80009f8 <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a6:	e00a      	b.n	80035be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a8:	f7fd fa26 	bl	80009f8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e053      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 020c 	and.w	r2, r3, #12
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d1eb      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d0:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d210      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	4922      	ldr	r1, [pc, #136]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x1c8>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1cc>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1d0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd f988 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40022000 	.word	0x40022000
 8003674:	40021000 	.word	0x40021000
 8003678:	080082a8 	.word	0x080082a8
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b490      	push	{r4, r7}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_RCC_GetSysClockFreq+0xac>)
 800368c:	1d3c      	adds	r4, r7, #4
 800368e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003694:	f240 2301 	movw	r3, #513	; 0x201
 8003698:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	2300      	movs	r3, #0
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	2300      	movs	r3, #0
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036ae:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d002      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x46>
 80036c2:	e02b      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036c4:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036c6:	623b      	str	r3, [r7, #32]
      break;
 80036c8:	e02b      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	0c9b      	lsrs	r3, r3, #18
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	3328      	adds	r3, #40	; 0x28
 80036d4:	443b      	add	r3, r7
 80036d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d012      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	0c5b      	lsrs	r3, r3, #17
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	3328      	adds	r3, #40	; 0x28
 80036f2:	443b      	add	r3, r7
 80036f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	4a0e      	ldr	r2, [pc, #56]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036fe:	fb03 f202 	mul.w	r2, r3, r2
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	e004      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4a0b      	ldr	r2, [pc, #44]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	623b      	str	r3, [r7, #32]
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_RCC_GetSysClockFreq+0xb4>)
 800371e:	623b      	str	r3, [r7, #32]
      break;
 8003720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003722:	6a3b      	ldr	r3, [r7, #32]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3728      	adds	r7, #40	; 0x28
 8003728:	46bd      	mov	sp, r7
 800372a:	bc90      	pop	{r4, r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	08008250 	.word	0x08008250
 8003734:	40021000 	.word	0x40021000
 8003738:	007a1200 	.word	0x007a1200
 800373c:	003d0900 	.word	0x003d0900

08003740 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003744:	4b02      	ldr	r3, [pc, #8]	; (8003750 <HAL_RCC_GetHCLKFreq+0x10>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	20000000 	.word	0x20000000

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003758:	f7ff fff2 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	080082b8 	.word	0x080082b8

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003780:	f7ff ffde 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	0adb      	lsrs	r3, r3, #11
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40021000 	.word	0x40021000
 80037a0:	080082b8 	.word	0x080082b8

080037a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <RCC_Delay+0x34>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <RCC_Delay+0x38>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a5b      	lsrs	r3, r3, #9
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037c0:	bf00      	nop
  }
  while (Delay --);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e5a      	subs	r2, r3, #1
 80037c6:	60fa      	str	r2, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f9      	bne.n	80037c0 <RCC_Delay+0x1c>
}
 80037cc:	bf00      	nop
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	20000000 	.word	0x20000000
 80037dc:	10624dd3 	.word	0x10624dd3

080037e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d07d      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037fc:	2300      	movs	r3, #0
 80037fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003800:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10d      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800380c:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4a4b      	ldr	r2, [pc, #300]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003816:	61d3      	str	r3, [r2, #28]
 8003818:	4b49      	ldr	r3, [pc, #292]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	4b46      	ldr	r3, [pc, #280]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d118      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a42      	ldr	r2, [pc, #264]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800383e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003840:	f7fd f8da 	bl	80009f8 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003846:	e008      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003848:	f7fd f8d6 	bl	80009f8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e06d      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b3a      	ldr	r3, [pc, #232]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02e      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	429a      	cmp	r2, r3
 8003882:	d027      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003884:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800388e:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800389a:	4a29      	ldr	r2, [pc, #164]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038aa:	f7fd f8a5 	bl	80009f8 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fd f8a1 	bl	80009f8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e036      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4917      	ldr	r1, [pc, #92]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d105      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ec:	4b14      	ldr	r3, [pc, #80]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	490b      	ldr	r1, [pc, #44]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4904      	ldr	r1, [pc, #16]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	42420440 	.word	0x42420440

0800394c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e03f      	b.n	80039de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fc fe6a 	bl	800064c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800398e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f829 	bl	80039e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a22:	f023 030c 	bic.w	r3, r3, #12
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	430b      	orrs	r3, r1
 8003a2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <UART_SetConfig+0x114>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d103      	bne.n	8003a58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a50:	f7ff fe94 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	e002      	b.n	8003a5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a58:	f7ff fe7c 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8003a5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4613      	mov	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	009a      	lsls	r2, r3, #2
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <UART_SetConfig+0x118>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	0119      	lsls	r1, r3, #4
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009a      	lsls	r2, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a94:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <UART_SetConfig+0x118>)
 8003a96:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2064      	movs	r0, #100	; 0x64
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	; 0x32
 8003aa8:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <UART_SetConfig+0x118>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab4:	4419      	add	r1, r3
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009a      	lsls	r2, r3, #2
 8003ac0:	441a      	add	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <UART_SetConfig+0x118>)
 8003ace:	fba3 0302 	umull	r0, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2064      	movs	r0, #100	; 0x64
 8003ad6:	fb00 f303 	mul.w	r3, r0, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	3332      	adds	r3, #50	; 0x32
 8003ae0:	4a07      	ldr	r2, [pc, #28]	; (8003b00 <UART_SetConfig+0x118>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	440a      	add	r2, r1
 8003af2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40013800 	.word	0x40013800
 8003b00:	51eb851f 	.word	0x51eb851f

08003b04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b04:	b084      	sub	sp, #16
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	f107 0014 	add.w	r0, r7, #20
 8003b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	b004      	add	sp, #16
 8003b22:	4770      	bx	lr

08003b24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b34:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b58:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b5c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4013      	ands	r3, r2
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	f107 0014 	add.w	r0, r7, #20
 8003baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	b004      	add	sp, #16
 8003bda:	4770      	bx	lr

08003bdc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b09b      	sub	sp, #108	; 0x6c
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	78db      	ldrb	r3, [r3, #3]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d81f      	bhi.n	8003c4e <USB_ActivateEndpoint+0x72>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <USB_ActivateEndpoint+0x38>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c57 	.word	0x08003c57
 8003c20:	08003c33 	.word	0x08003c33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c30:	e012      	b.n	8003c58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c32:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c36:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c3a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c3e:	e00b      	b.n	8003c58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c4c:	e004      	b.n	8003c58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003c54:	e000      	b.n	8003c58 <USB_ActivateEndpoint+0x7c>
      break;
 8003c56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	441a      	add	r2, r3
 8003c62:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	7b1b      	ldrb	r3, [r3, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 8149 	bne.w	8003f5c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8084 	beq.w	8003ddc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	011a      	lsls	r2, r3, #4
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	88db      	ldrh	r3, [r3, #6]
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	81fb      	strh	r3, [r7, #14]
 8003d16:	89fb      	ldrh	r3, [r7, #14]
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01b      	beq.n	8003d58 <USB_ActivateEndpoint+0x17c>
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	81bb      	strh	r3, [r7, #12]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	89bb      	ldrh	r3, [r7, #12]
 8003d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	78db      	ldrb	r3, [r3, #3]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d020      	beq.n	8003da2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d76:	813b      	strh	r3, [r7, #8]
 8003d78:	893b      	ldrh	r3, [r7, #8]
 8003d7a:	f083 0320 	eor.w	r3, r3, #32
 8003d7e:	813b      	strh	r3, [r7, #8]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	441a      	add	r2, r3
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	8013      	strh	r3, [r2, #0]
 8003da0:	e27f      	b.n	80042a2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db8:	817b      	strh	r3, [r7, #10]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	897b      	ldrh	r3, [r7, #10]
 8003dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	8013      	strh	r3, [r2, #0]
 8003dda:	e262      	b.n	80042a2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	4413      	add	r3, r2
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	011a      	lsls	r2, r3, #4
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	88db      	ldrh	r3, [r3, #6]
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	4413      	add	r3, r2
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	011a      	lsls	r2, r3, #4
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d112      	bne.n	8003e62 <USB_ActivateEndpoint+0x286>
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	801a      	strh	r2, [r3, #0]
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	801a      	strh	r2, [r3, #0]
 8003e60:	e02f      	b.n	8003ec2 <USB_ActivateEndpoint+0x2e6>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b3e      	cmp	r3, #62	; 0x3e
 8003e68:	d813      	bhi.n	8003e92 <USB_ActivateEndpoint+0x2b6>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	085b      	lsrs	r3, r3, #1
 8003e70:	663b      	str	r3, [r7, #96]	; 0x60
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <USB_ActivateEndpoint+0x2a8>
 8003e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e80:	3301      	adds	r3, #1
 8003e82:	663b      	str	r3, [r7, #96]	; 0x60
 8003e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	029b      	lsls	r3, r3, #10
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	e017      	b.n	8003ec2 <USB_ActivateEndpoint+0x2e6>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	663b      	str	r3, [r7, #96]	; 0x60
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <USB_ActivateEndpoint+0x2d0>
 8003ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8003eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	029b      	lsls	r3, r3, #10
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	83fb      	strh	r3, [r7, #30]
 8003ed0:	8bfb      	ldrh	r3, [r7, #30]
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01b      	beq.n	8003f12 <USB_ActivateEndpoint+0x336>
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef0:	83bb      	strh	r3, [r7, #28]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	8bbb      	ldrh	r3, [r7, #28]
 8003efe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f28:	837b      	strh	r3, [r7, #26]
 8003f2a:	8b7b      	ldrh	r3, [r7, #26]
 8003f2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f30:	837b      	strh	r3, [r7, #26]
 8003f32:	8b7b      	ldrh	r3, [r7, #26]
 8003f34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f38:	837b      	strh	r3, [r7, #26]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	8b7b      	ldrh	r3, [r7, #26]
 8003f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	8013      	strh	r3, [r2, #0]
 8003f5a:	e1a2      	b.n	80042a2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa8:	4413      	add	r3, r2
 8003faa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	011a      	lsls	r2, r3, #4
 8003fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fba:	657b      	str	r3, [r7, #84]	; 0x54
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	891b      	ldrh	r3, [r3, #8]
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fdc:	4413      	add	r3, r2
 8003fde:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	011a      	lsls	r2, r3, #4
 8003fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	895b      	ldrh	r3, [r3, #10]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8091 	bne.w	800412c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004018:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800401a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01b      	beq.n	800405a <USB_ActivateEndpoint+0x47e>
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	877b      	strh	r3, [r7, #58]	; 0x3a
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	441a      	add	r2, r3
 8004044:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800404a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800404e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	873b      	strh	r3, [r7, #56]	; 0x38
 8004068:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01b      	beq.n	80040aa <USB_ActivateEndpoint+0x4ce>
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	86fb      	strh	r3, [r7, #54]	; 0x36
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040d0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004108:	867b      	strh	r3, [r7, #50]	; 0x32
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
 800412a:	e0ba      	b.n	80042a2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800413c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01d      	beq.n	8004184 <USB_ActivateEndpoint+0x5a8>
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800417c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004180:	b29b      	uxth	r3, r3
 8004182:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004194:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01d      	beq.n	80041dc <USB_ActivateEndpoint+0x600>
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041d8:	b29b      	uxth	r3, r3
 80041da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	78db      	ldrb	r3, [r3, #3]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d024      	beq.n	800422e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004202:	f083 0320 	eor.w	r3, r3, #32
 8004206:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	441a      	add	r2, r3
 8004214:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004228:	b29b      	uxth	r3, r3
 800422a:	8013      	strh	r3, [r2, #0]
 800422c:	e01d      	b.n	800426a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004244:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800428e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80042a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	376c      	adds	r7, #108	; 0x6c
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b08d      	sub	sp, #52	; 0x34
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	7b1b      	ldrb	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f040 808e 	bne.w	80043e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d044      	beq.n	8004356 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	81bb      	strh	r3, [r7, #12]
 80042da:	89bb      	ldrh	r3, [r7, #12]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <USB_DeactivateEndpoint+0x6c>
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	817b      	strh	r3, [r7, #10]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004332:	813b      	strh	r3, [r7, #8]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	893b      	ldrh	r3, [r7, #8]
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]
 8004354:	e192      	b.n	800467c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	827b      	strh	r3, [r7, #18]
 8004364:	8a7b      	ldrh	r3, [r7, #18]
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01b      	beq.n	80043a6 <USB_DeactivateEndpoint+0xf6>
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	823b      	strh	r3, [r7, #16]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	8a3b      	ldrh	r3, [r7, #16]
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800439e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	81fb      	strh	r3, [r7, #14]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	441a      	add	r2, r3
 80043c8:	89fb      	ldrh	r3, [r7, #14]
 80043ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8013      	strh	r3, [r2, #0]
 80043de:	e14d      	b.n	800467c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f040 80a5 	bne.w	8004534 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	843b      	strh	r3, [r7, #32]
 80043f8:	8c3b      	ldrh	r3, [r7, #32]
 80043fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01b      	beq.n	800443a <USB_DeactivateEndpoint+0x18a>
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004418:	83fb      	strh	r3, [r7, #30]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	8bfb      	ldrh	r3, [r7, #30]
 8004426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800442e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004436:	b29b      	uxth	r3, r3
 8004438:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	83bb      	strh	r3, [r7, #28]
 8004448:	8bbb      	ldrh	r3, [r7, #28]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01b      	beq.n	800448a <USB_DeactivateEndpoint+0x1da>
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	837b      	strh	r3, [r7, #26]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	8b7b      	ldrh	r3, [r7, #26]
 8004476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	833b      	strh	r3, [r7, #24]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	441a      	add	r2, r3
 80044ac:	8b3b      	ldrh	r3, [r7, #24]
 80044ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	82fb      	strh	r3, [r7, #22]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8afb      	ldrh	r3, [r7, #22]
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	82bb      	strh	r3, [r7, #20]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	8abb      	ldrh	r3, [r7, #20]
 800451e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452e:	b29b      	uxth	r3, r3
 8004530:	8013      	strh	r3, [r2, #0]
 8004532:	e0a3      	b.n	800467c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <USB_DeactivateEndpoint+0x2d4>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	441a      	add	r2, r3
 800456e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800457c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004580:	b29b      	uxth	r3, r3
 8004582:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <USB_DeactivateEndpoint+0x324>
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004622:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	b29b      	uxth	r3, r3
 8004642:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	847b      	strh	r3, [r7, #34]	; 0x22
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004678:	b29b      	uxth	r3, r3
 800467a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3734      	adds	r7, #52	; 0x34
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b0cc      	sub	sp, #304	; 0x130
 800468c:	af00      	add	r7, sp, #0
 800468e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004696:	6018      	str	r0, [r3, #0]
 8004698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800469c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f041 817d 	bne.w	80059ae <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d908      	bls.n	80046e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80046d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80046e0:	e007      	b.n	80046f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80046e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	7b1b      	ldrb	r3, [r3, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d152      	bne.n	80047a8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6959      	ldr	r1, [r3, #20]
 800470e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	88da      	ldrh	r2, [r3, #6]
 800471a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800471e:	b29b      	uxth	r3, r3
 8004720:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004724:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004728:	6800      	ldr	r0, [r0, #0]
 800472a:	f001 ff23 	bl	8006574 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800472e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004732:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004736:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800473a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004750:	b29b      	uxth	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004758:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800475c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004760:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	440a      	add	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	011a      	lsls	r2, r3, #4
 8004778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4413      	add	r3, r2
 8004784:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004796:	b29a      	uxth	r2, r3
 8004798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	f001 b8b5 	b.w	8005912 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80047a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	78db      	ldrb	r3, [r3, #3]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	f040 84c6 	bne.w	8005146 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80047ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	f240 8443 	bls.w	800505e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80047d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004806:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	441a      	add	r2, r3
 800481c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004828:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800482c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004844:	1ad2      	subs	r2, r2, r3
 8004846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 823e 	beq.w	8004cf6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800487a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004882:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004886:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 809a 	bne.w	80049d4 <USB_EPStartXfer+0x34c>
 80048a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048ac:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4619      	mov	r1, r3
 80048c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048d2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	440a      	add	r2, r1
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	011a      	lsls	r2, r3, #4
 80048ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4413      	add	r3, r2
 80048f6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80048fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d122      	bne.n	8004952 <USB_EPStartXfer+0x2ca>
 800490c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004910:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800491e:	b29a      	uxth	r2, r3
 8004920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004924:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004942:	b29a      	uxth	r2, r3
 8004944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004948:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	801a      	strh	r2, [r3, #0]
 8004950:	e079      	b.n	8004a46 <USB_EPStartXfer+0x3be>
 8004952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004956:	2b3e      	cmp	r3, #62	; 0x3e
 8004958:	d81b      	bhi.n	8004992 <USB_EPStartXfer+0x30a>
 800495a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <USB_EPStartXfer+0x2f2>
 8004970:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004974:	3301      	adds	r3, #1
 8004976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800497a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800497e:	b29b      	uxth	r3, r3
 8004980:	029b      	lsls	r3, r3, #10
 8004982:	b29a      	uxth	r2, r3
 8004984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004988:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	e059      	b.n	8004a46 <USB_EPStartXfer+0x3be>
 8004992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800499c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <USB_EPStartXfer+0x32a>
 80049a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049ac:	3b01      	subs	r3, #1
 80049ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80049b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	029b      	lsls	r3, r3, #10
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	e038      	b.n	8004a46 <USB_EPStartXfer+0x3be>
 80049d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d130      	bne.n	8004a46 <USB_EPStartXfer+0x3be>
 80049e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a02:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	440a      	add	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	011a      	lsls	r2, r3, #4
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	895b      	ldrh	r3, [r3, #10]
 8004a52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6959      	ldr	r1, [r3, #20]
 8004a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a74:	6800      	ldr	r0, [r0, #0]
 8004a76:	f001 fd7d 	bl	8006574 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8a:	441a      	add	r2, r3
 8004a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d90f      	bls.n	8004ad4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ac4:	1ad2      	subs	r2, r2, r3
 8004ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	621a      	str	r2, [r3, #32]
 8004ad2:	e00e      	b.n	8004af2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2200      	movs	r2, #0
 8004af0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	785b      	ldrb	r3, [r3, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 809a 	bne.w	8004c38 <USB_EPStartXfer+0x5b0>
 8004b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4619      	mov	r1, r3
 8004b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b36:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	011a      	lsls	r2, r3, #4
 8004b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d122      	bne.n	8004bb6 <USB_EPStartXfer+0x52e>
 8004b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b94:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	801a      	strh	r2, [r3, #0]
 8004bb4:	e083      	b.n	8004cbe <USB_EPStartXfer+0x636>
 8004bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bba:	2b3e      	cmp	r3, #62	; 0x3e
 8004bbc:	d81b      	bhi.n	8004bf6 <USB_EPStartXfer+0x56e>
 8004bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <USB_EPStartXfer+0x556>
 8004bd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	e063      	b.n	8004cbe <USB_EPStartXfer+0x636>
 8004bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <USB_EPStartXfer+0x58e>
 8004c0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c10:	3b01      	subs	r3, #1
 8004c12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c16:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	029b      	lsls	r3, r3, #10
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	801a      	strh	r2, [r3, #0]
 8004c36:	e042      	b.n	8004cbe <USB_EPStartXfer+0x636>
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d13a      	bne.n	8004cbe <USB_EPStartXfer+0x636>
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c54:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c7a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	440a      	add	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	011a      	lsls	r2, r3, #4
 8004c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c96:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	891b      	ldrh	r3, [r3, #8]
 8004cca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6959      	ldr	r1, [r3, #20]
 8004cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ce4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ce8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004cec:	6800      	ldr	r0, [r0, #0]
 8004cee:	f001 fc41 	bl	8006574 <USB_WritePMA>
 8004cf2:	f000 be0e 	b.w	8005912 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	785b      	ldrb	r3, [r3, #1]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d16d      	bne.n	8004de2 <USB_EPStartXfer+0x75a>
 8004d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d26:	4413      	add	r3, r2
 8004d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	011a      	lsls	r2, r3, #4
 8004d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d40:	647b      	str	r3, [r7, #68]	; 0x44
 8004d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d112      	bne.n	8004d70 <USB_EPStartXfer+0x6e8>
 8004d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e063      	b.n	8004e38 <USB_EPStartXfer+0x7b0>
 8004d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d74:	2b3e      	cmp	r3, #62	; 0x3e
 8004d76:	d817      	bhi.n	8004da8 <USB_EPStartXfer+0x720>
 8004d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <USB_EPStartXfer+0x710>
 8004d8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d92:	3301      	adds	r3, #1
 8004d94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e047      	b.n	8004e38 <USB_EPStartXfer+0x7b0>
 8004da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <USB_EPStartXfer+0x740>
 8004dbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004dc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e02a      	b.n	8004e38 <USB_EPStartXfer+0x7b0>
 8004de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d122      	bne.n	8004e38 <USB_EPStartXfer+0x7b0>
 8004df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	653b      	str	r3, [r7, #80]	; 0x50
 8004dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e12:	4413      	add	r3, r2
 8004e14:	653b      	str	r3, [r7, #80]	; 0x50
 8004e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	011a      	lsls	r2, r3, #4
 8004e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e26:	4413      	add	r3, r2
 8004e28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	891b      	ldrh	r3, [r3, #8]
 8004e44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6959      	ldr	r1, [r3, #20]
 8004e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e5e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e62:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e66:	6800      	ldr	r0, [r0, #0]
 8004e68:	f001 fb84 	bl	8006574 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7c:	441a      	add	r2, r3
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6a1a      	ldr	r2, [r3, #32]
 8004e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d90f      	bls.n	8004ec6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb6:	1ad2      	subs	r2, r2, r3
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	621a      	str	r2, [r3, #32]
 8004ec4:	e00e      	b.n	8004ee4 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d16d      	bne.n	8004fdc <USB_EPStartXfer+0x954>
 8004f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	4413      	add	r3, r2
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	011a      	lsls	r2, r3, #4
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	4413      	add	r3, r2
 8004f36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d112      	bne.n	8004f6a <USB_EPStartXfer+0x8e2>
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f52:	801a      	strh	r2, [r3, #0]
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e05d      	b.n	8005026 <USB_EPStartXfer+0x99e>
 8004f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f70:	d817      	bhi.n	8004fa2 <USB_EPStartXfer+0x91a>
 8004f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <USB_EPStartXfer+0x90a>
 8004f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e041      	b.n	8005026 <USB_EPStartXfer+0x99e>
 8004fa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <USB_EPStartXfer+0x93a>
 8004fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	e024      	b.n	8005026 <USB_EPStartXfer+0x99e>
 8004fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d11c      	bne.n	8005026 <USB_EPStartXfer+0x99e>
 8004fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005000:	4413      	add	r3, r2
 8005002:	643b      	str	r3, [r7, #64]	; 0x40
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	011a      	lsls	r2, r3, #4
 8005012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005014:	4413      	add	r3, r2
 8005016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800501c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005020:	b29a      	uxth	r2, r3
 8005022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005024:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	895b      	ldrh	r3, [r3, #10]
 8005032:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6959      	ldr	r1, [r3, #20]
 8005042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005046:	b29b      	uxth	r3, r3
 8005048:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800504c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005050:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005054:	6800      	ldr	r0, [r0, #0]
 8005056:	f001 fa8d 	bl	8006574 <USB_WritePMA>
 800505a:	f000 bc5a 	b.w	8005912 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005094:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	441a      	add	r2, r3
 80050b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80050b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	461a      	mov	r2, r3
 80050e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ea:	4413      	add	r3, r2
 80050ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	011a      	lsls	r2, r3, #4
 80050fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fe:	4413      	add	r3, r2
 8005100:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005104:	65bb      	str	r3, [r7, #88]	; 0x58
 8005106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510a:	b29a      	uxth	r2, r3
 800510c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800510e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	891b      	ldrh	r3, [r3, #8]
 800511c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6959      	ldr	r1, [r3, #20]
 800512c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005130:	b29b      	uxth	r3, r3
 8005132:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005136:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800513a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800513e:	6800      	ldr	r0, [r0, #0]
 8005140:	f001 fa18 	bl	8006574 <USB_WritePMA>
 8005144:	e3e5      	b.n	8005912 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800514a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	441a      	add	r2, r3
 800518a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005196:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800519e:	b29b      	uxth	r3, r3
 80051a0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	b29b      	uxth	r3, r3
 80051de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 81bc 	beq.w	8005560 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d16d      	bne.n	80052e2 <USB_EPStartXfer+0xc5a>
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	67bb      	str	r3, [r7, #120]	; 0x78
 8005212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005226:	4413      	add	r3, r2
 8005228:	67bb      	str	r3, [r7, #120]	; 0x78
 800522a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	011a      	lsls	r2, r3, #4
 8005238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800523a:	4413      	add	r3, r2
 800523c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005240:	677b      	str	r3, [r7, #116]	; 0x74
 8005242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d112      	bne.n	8005270 <USB_EPStartXfer+0xbe8>
 800524a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005254:	b29a      	uxth	r2, r3
 8005256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29b      	uxth	r3, r3
 8005260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005268:	b29a      	uxth	r2, r3
 800526a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e060      	b.n	8005332 <USB_EPStartXfer+0xcaa>
 8005270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005274:	2b3e      	cmp	r3, #62	; 0x3e
 8005276:	d817      	bhi.n	80052a8 <USB_EPStartXfer+0xc20>
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <USB_EPStartXfer+0xc10>
 800528e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005292:	3301      	adds	r3, #1
 8005294:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005298:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800529c:	b29b      	uxth	r3, r3
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	e044      	b.n	8005332 <USB_EPStartXfer+0xcaa>
 80052a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80052b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <USB_EPStartXfer+0xc40>
 80052be:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80052c2:	3b01      	subs	r3, #1
 80052c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80052c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	029b      	lsls	r3, r3, #10
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052da:	b29a      	uxth	r2, r3
 80052dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	e027      	b.n	8005332 <USB_EPStartXfer+0xcaa>
 80052e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d11f      	bne.n	8005332 <USB_EPStartXfer+0xcaa>
 80052f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005308:	4413      	add	r3, r2
 800530a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800530e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	011a      	lsls	r2, r3, #4
 800531c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005320:	4413      	add	r3, r2
 8005322:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005326:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532c:	b29a      	uxth	r2, r3
 800532e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005330:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	895b      	ldrh	r3, [r3, #10]
 800533e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6959      	ldr	r1, [r3, #20]
 800534e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005352:	b29b      	uxth	r3, r3
 8005354:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005358:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800535c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005360:	6800      	ldr	r0, [r0, #0]
 8005362:	f001 f907 	bl	8006574 <USB_WritePMA>
          ep->xfer_buff += len;
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005376:	441a      	add	r2, r3
 8005378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6a1a      	ldr	r2, [r3, #32]
 8005390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	429a      	cmp	r2, r3
 800539e:	d90f      	bls.n	80053c0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6a1a      	ldr	r2, [r3, #32]
 80053ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b0:	1ad2      	subs	r2, r2, r3
 80053b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	621a      	str	r2, [r3, #32]
 80053be:	e00e      	b.n	80053de <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80053de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 8295 	beq.w	8005912 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d16d      	bne.n	80054d4 <USB_EPStartXfer+0xe4c>
 80053f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	66bb      	str	r3, [r7, #104]	; 0x68
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005412:	b29b      	uxth	r3, r3
 8005414:	461a      	mov	r2, r3
 8005416:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005418:	4413      	add	r3, r2
 800541a:	66bb      	str	r3, [r7, #104]	; 0x68
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	011a      	lsls	r2, r3, #4
 800542a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800542c:	4413      	add	r3, r2
 800542e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005432:	667b      	str	r3, [r7, #100]	; 0x64
 8005434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d112      	bne.n	8005462 <USB_EPStartXfer+0xdda>
 800543c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005446:	b29a      	uxth	r2, r3
 8005448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e063      	b.n	800552a <USB_EPStartXfer+0xea2>
 8005462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005466:	2b3e      	cmp	r3, #62	; 0x3e
 8005468:	d817      	bhi.n	800549a <USB_EPStartXfer+0xe12>
 800546a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <USB_EPStartXfer+0xe02>
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005484:	3301      	adds	r3, #1
 8005486:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29a      	uxth	r2, r3
 8005494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	e047      	b.n	800552a <USB_EPStartXfer+0xea2>
 800549a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <USB_EPStartXfer+0xe32>
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b4:	3b01      	subs	r3, #1
 80054b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054be:	b29b      	uxth	r3, r3
 80054c0:	029b      	lsls	r3, r3, #10
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	e02a      	b.n	800552a <USB_EPStartXfer+0xea2>
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d122      	bne.n	800552a <USB_EPStartXfer+0xea2>
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	673b      	str	r3, [r7, #112]	; 0x70
 80054f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005504:	4413      	add	r3, r2
 8005506:	673b      	str	r3, [r7, #112]	; 0x70
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	011a      	lsls	r2, r3, #4
 8005516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005518:	4413      	add	r3, r2
 800551a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800551e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005524:	b29a      	uxth	r2, r3
 8005526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005528:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800552a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	891b      	ldrh	r3, [r3, #8]
 8005536:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800553a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6959      	ldr	r1, [r3, #20]
 8005546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554a:	b29b      	uxth	r3, r3
 800554c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005550:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005554:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005558:	6800      	ldr	r0, [r0, #0]
 800555a:	f001 f80b 	bl	8006574 <USB_WritePMA>
 800555e:	e1d8      	b.n	8005912 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d178      	bne.n	8005662 <USB_EPStartXfer+0xfda>
 8005570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800557e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558c:	b29b      	uxth	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005594:	4413      	add	r3, r2
 8005596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	011a      	lsls	r2, r3, #4
 80055a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055ac:	4413      	add	r3, r2
 80055ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d116      	bne.n	80055ec <USB_EPStartXfer+0xf64>
 80055be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d0:	801a      	strh	r2, [r3, #0]
 80055d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e06b      	b.n	80056c4 <USB_EPStartXfer+0x103c>
 80055ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f0:	2b3e      	cmp	r3, #62	; 0x3e
 80055f2:	d818      	bhi.n	8005626 <USB_EPStartXfer+0xf9e>
 80055f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f8:	085b      	lsrs	r3, r3, #1
 80055fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <USB_EPStartXfer+0xf8c>
 800560a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800560e:	3301      	adds	r3, #1
 8005610:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005614:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005618:	b29b      	uxth	r3, r3
 800561a:	029b      	lsls	r3, r3, #10
 800561c:	b29a      	uxth	r2, r3
 800561e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e04e      	b.n	80056c4 <USB_EPStartXfer+0x103c>
 8005626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <USB_EPStartXfer+0xfbe>
 800563c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005640:	3b01      	subs	r3, #1
 8005642:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005646:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800564a:	b29b      	uxth	r3, r3
 800564c:	029b      	lsls	r3, r3, #10
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005658:	b29a      	uxth	r2, r3
 800565a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e030      	b.n	80056c4 <USB_EPStartXfer+0x103c>
 8005662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d128      	bne.n	80056c4 <USB_EPStartXfer+0x103c>
 8005672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005696:	4413      	add	r3, r2
 8005698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	011a      	lsls	r2, r3, #4
 80056aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	891b      	ldrh	r3, [r3, #8]
 80056d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6959      	ldr	r1, [r3, #20]
 80056e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056f2:	6800      	ldr	r0, [r0, #0]
 80056f4:	f000 ff3e 	bl	8006574 <USB_WritePMA>
          ep->xfer_buff += len;
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005708:	441a      	add	r2, r3
 800570a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d90f      	bls.n	8005752 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	621a      	str	r2, [r3, #32]
 8005750:	e00e      	b.n	8005770 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80cc 	beq.w	8005912 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800577a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d178      	bne.n	800588a <USB_EPStartXfer+0x1202>
 8005798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057bc:	4413      	add	r3, r2
 80057be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	011a      	lsls	r2, r3, #4
 80057d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d116      	bne.n	8005814 <USB_EPStartXfer+0x118c>
 80057e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580a:	b29a      	uxth	r2, r3
 800580c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	e064      	b.n	80058de <USB_EPStartXfer+0x1256>
 8005814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005818:	2b3e      	cmp	r3, #62	; 0x3e
 800581a:	d818      	bhi.n	800584e <USB_EPStartXfer+0x11c6>
 800581c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005820:	085b      	lsrs	r3, r3, #1
 8005822:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <USB_EPStartXfer+0x11b4>
 8005832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005836:	3301      	adds	r3, #1
 8005838:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800583c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005840:	b29b      	uxth	r3, r3
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	b29a      	uxth	r2, r3
 8005846:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800584a:	801a      	strh	r2, [r3, #0]
 800584c:	e047      	b.n	80058de <USB_EPStartXfer+0x1256>
 800584e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2b00      	cmp	r3, #0
 8005862:	d104      	bne.n	800586e <USB_EPStartXfer+0x11e6>
 8005864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005868:	3b01      	subs	r3, #1
 800586a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800586e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005872:	b29b      	uxth	r3, r3
 8005874:	029b      	lsls	r3, r3, #10
 8005876:	b29b      	uxth	r3, r3
 8005878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005880:	b29a      	uxth	r2, r3
 8005882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e029      	b.n	80058de <USB_EPStartXfer+0x1256>
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d121      	bne.n	80058de <USB_EPStartXfer+0x1256>
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058b0:	4413      	add	r3, r2
 80058b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058c8:	4413      	add	r3, r2
 80058ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	895b      	ldrh	r3, [r3, #10]
 80058ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6959      	ldr	r1, [r3, #20]
 80058fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005904:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005908:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800590c:	6800      	ldr	r0, [r0, #0]
 800590e:	f000 fe31 	bl	8006574 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005934:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005940:	8013      	strh	r3, [r2, #0]
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800594a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800594e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005952:	8812      	ldrh	r2, [r2, #0]
 8005954:	f082 0210 	eor.w	r2, r2, #16
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005962:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005966:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800596a:	8812      	ldrh	r2, [r2, #0]
 800596c:	f082 0220 	eor.w	r2, r2, #32
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005990:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]
 80059aa:	f000 bc9f 	b.w	80062ec <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	7b1b      	ldrb	r3, [r3, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f040 80ae 	bne.w	8005b1c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d917      	bls.n	8005a0c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fc:	1ad2      	subs	r2, r2, r3
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	619a      	str	r2, [r3, #24]
 8005a0a:	e00e      	b.n	8005a2a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a4e:	4413      	add	r3, r2
 8005a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	011a      	lsls	r2, r3, #4
 8005a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a66:	4413      	add	r3, r2
 8005a68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d116      	bne.n	8005aa6 <USB_EPStartXfer+0x141e>
 8005a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	e3e8      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
 8005aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8005aac:	d818      	bhi.n	8005ae0 <USB_EPStartXfer+0x1458>
 8005aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <USB_EPStartXfer+0x1446>
 8005ac4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	029b      	lsls	r3, r3, #10
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005adc:	801a      	strh	r2, [r3, #0]
 8005ade:	e3cb      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
 8005ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <USB_EPStartXfer+0x1478>
 8005af6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005afa:	3b01      	subs	r3, #1
 8005afc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e3ad      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f040 8200 	bne.w	8005f2e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 8091 	bne.w	8005c62 <USB_EPStartXfer+0x15da>
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b64:	4413      	add	r3, r2
 8005b66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	011a      	lsls	r2, r3, #4
 8005b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d116      	bne.n	8005bc4 <USB_EPStartXfer+0x153c>
 8005b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bc0:	801a      	strh	r2, [r3, #0]
 8005bc2:	e083      	b.n	8005ccc <USB_EPStartXfer+0x1644>
 8005bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd2:	d820      	bhi.n	8005c16 <USB_EPStartXfer+0x158e>
 8005bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <USB_EPStartXfer+0x157c>
 8005bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfe:	3301      	adds	r3, #1
 8005c00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	029b      	lsls	r3, r3, #10
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	e05a      	b.n	8005ccc <USB_EPStartXfer+0x1644>
 8005c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d104      	bne.n	8005c46 <USB_EPStartXfer+0x15be>
 8005c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c40:	3b01      	subs	r3, #1
 8005c42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c5e:	801a      	strh	r2, [r3, #0]
 8005c60:	e034      	b.n	8005ccc <USB_EPStartXfer+0x1644>
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d12c      	bne.n	8005ccc <USB_EPStartXfer+0x1644>
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c96:	4413      	add	r3, r2
 8005c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	011a      	lsls	r2, r3, #4
 8005caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cae:	4413      	add	r3, r2
 8005cb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f040 8091 	bne.w	8005e0e <USB_EPStartXfer+0x1786>
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d10:	4413      	add	r3, r2
 8005d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	011a      	lsls	r2, r3, #4
 8005d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d116      	bne.n	8005d70 <USB_EPStartXfer+0x16e8>
 8005d42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e07c      	b.n	8005e6a <USB_EPStartXfer+0x17e2>
 8005d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7e:	d820      	bhi.n	8005dc2 <USB_EPStartXfer+0x173a>
 8005d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d004      	beq.n	8005db0 <USB_EPStartXfer+0x1728>
 8005da6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005daa:	3301      	adds	r3, #1
 8005dac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005db0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	e053      	b.n	8005e6a <USB_EPStartXfer+0x17e2>
 8005dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d104      	bne.n	8005df2 <USB_EPStartXfer+0x176a>
 8005de8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dec:	3b01      	subs	r3, #1
 8005dee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005df2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	029b      	lsls	r3, r3, #10
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	e02d      	b.n	8005e6a <USB_EPStartXfer+0x17e2>
 8005e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d125      	bne.n	8005e6a <USB_EPStartXfer+0x17e2>
 8005e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e34:	4413      	add	r3, r2
 8005e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	011a      	lsls	r2, r3, #4
 8005e48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e68:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 81fe 	beq.w	8006278 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <USB_EPStartXfer+0x182c>
 8005ea8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10d      	bne.n	8005ed0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eb4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 81db 	bne.w	8006278 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ec2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f040 81d4 	bne.w	8006278 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
 8005f2c:	e1a4      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	78db      	ldrb	r3, [r3, #3]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	f040 819a 	bne.w	8006274 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699a      	ldr	r2, [r3, #24]
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d917      	bls.n	8005f8c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7c:	1ad2      	subs	r2, r2, r3
 8005f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	619a      	str	r2, [r3, #24]
 8005f8a:	e00e      	b.n	8005faa <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d178      	bne.n	80060ac <USB_EPStartXfer+0x1a24>
 8005fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fde:	4413      	add	r3, r2
 8005fe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	011a      	lsls	r2, r3, #4
 8005ff2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ffc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d116      	bne.n	8006036 <USB_EPStartXfer+0x19ae>
 8006008:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29b      	uxth	r3, r3
 8006024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602c:	b29a      	uxth	r2, r3
 800602e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006032:	801a      	strh	r2, [r3, #0]
 8006034:	e06b      	b.n	800610e <USB_EPStartXfer+0x1a86>
 8006036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603a:	2b3e      	cmp	r3, #62	; 0x3e
 800603c:	d818      	bhi.n	8006070 <USB_EPStartXfer+0x19e8>
 800603e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006042:	085b      	lsrs	r3, r3, #1
 8006044:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <USB_EPStartXfer+0x19d6>
 8006054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006058:	3301      	adds	r3, #1
 800605a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800605e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006062:	b29b      	uxth	r3, r3
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	b29a      	uxth	r2, r3
 8006068:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	e04e      	b.n	800610e <USB_EPStartXfer+0x1a86>
 8006070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800607a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2b00      	cmp	r3, #0
 8006084:	d104      	bne.n	8006090 <USB_EPStartXfer+0x1a08>
 8006086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800608a:	3b01      	subs	r3, #1
 800608c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006094:	b29b      	uxth	r3, r3
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	b29b      	uxth	r3, r3
 800609a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	e030      	b.n	800610e <USB_EPStartXfer+0x1a86>
 80060ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d128      	bne.n	800610e <USB_EPStartXfer+0x1a86>
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	4413      	add	r3, r2
 80060e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	011a      	lsls	r2, r3, #4
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006106:	b29a      	uxth	r2, r3
 8006108:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d178      	bne.n	800621e <USB_EPStartXfer+0x1b96>
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006150:	4413      	add	r3, r2
 8006152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	011a      	lsls	r2, r3, #4
 8006164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006168:	4413      	add	r3, r2
 800616a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800616e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <USB_EPStartXfer+0x1b20>
 800617a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e067      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
 80061a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ac:	2b3e      	cmp	r3, #62	; 0x3e
 80061ae:	d818      	bhi.n	80061e2 <USB_EPStartXfer+0x1b5a>
 80061b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <USB_EPStartXfer+0x1b48>
 80061c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ca:	3301      	adds	r3, #1
 80061cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	e04a      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <USB_EPStartXfer+0x1b7a>
 80061f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061fc:	3b01      	subs	r3, #1
 80061fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006206:	b29b      	uxth	r3, r3
 8006208:	029b      	lsls	r3, r3, #10
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e02c      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d124      	bne.n	8006278 <USB_EPStartXfer+0x1bf0>
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006244:	4413      	add	r3, r2
 8006246:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625c:	4413      	add	r3, r2
 800625e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006262:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	e001      	b.n	8006278 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e03a      	b.n	80062ee <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062a2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062aa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	441a      	add	r2, r3
 80062d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d020      	beq.n	800634c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006320:	81bb      	strh	r3, [r7, #12]
 8006322:	89bb      	ldrh	r3, [r7, #12]
 8006324:	f083 0310 	eor.w	r3, r3, #16
 8006328:	81bb      	strh	r3, [r7, #12]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	441a      	add	r2, r3
 8006334:	89bb      	ldrh	r3, [r7, #12]
 8006336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800633e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006346:	b29b      	uxth	r3, r3
 8006348:	8013      	strh	r3, [r2, #0]
 800634a:	e01f      	b.n	800638c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800635e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006362:	81fb      	strh	r3, [r7, #14]
 8006364:	89fb      	ldrh	r3, [r7, #14]
 8006366:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800636a:	81fb      	strh	r3, [r7, #14]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	89fb      	ldrh	r3, [r7, #14]
 8006378:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006388:	b29b      	uxth	r3, r3
 800638a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	7b1b      	ldrb	r3, [r3, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 809d 	bne.w	80064e6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d04c      	beq.n	800644e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	823b      	strh	r3, [r7, #16]
 80063c2:	8a3b      	ldrh	r3, [r7, #16]
 80063c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01b      	beq.n	8006404 <USB_EPClearStall+0x6c>
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	881b      	ldrh	r3, [r3, #0]
 80063d8:	b29b      	uxth	r3, r3
 80063da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	81fb      	strh	r3, [r7, #14]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	89fb      	ldrh	r3, [r7, #14]
 80063f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006400:	b29b      	uxth	r3, r3
 8006402:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	78db      	ldrb	r3, [r3, #3]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d06c      	beq.n	80064e6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006422:	81bb      	strh	r3, [r7, #12]
 8006424:	89bb      	ldrh	r3, [r7, #12]
 8006426:	f083 0320 	eor.w	r3, r3, #32
 800642a:	81bb      	strh	r3, [r7, #12]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	441a      	add	r2, r3
 8006436:	89bb      	ldrh	r3, [r7, #12]
 8006438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800643c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	b29b      	uxth	r3, r3
 800644a:	8013      	strh	r3, [r2, #0]
 800644c:	e04b      	b.n	80064e6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	82fb      	strh	r3, [r7, #22]
 800645c:	8afb      	ldrh	r3, [r7, #22]
 800645e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d01b      	beq.n	800649e <USB_EPClearStall+0x106>
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	82bb      	strh	r3, [r7, #20]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	441a      	add	r2, r3
 8006488:	8abb      	ldrh	r3, [r7, #20]
 800648a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649a:	b29b      	uxth	r3, r3
 800649c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b4:	827b      	strh	r3, [r7, #18]
 80064b6:	8a7b      	ldrh	r3, [r7, #18]
 80064b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064bc:	827b      	strh	r3, [r7, #18]
 80064be:	8a7b      	ldrh	r3, [r7, #18]
 80064c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80064c4:	827b      	strh	r3, [r7, #18]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	8a7b      	ldrh	r3, [r7, #18]
 80064d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr

080064f2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2280      	movs	r2, #128	; 0x80
 8006508:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	bc80      	pop	{r7}
 800652a:	4770      	bx	lr

0800652c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800654e:	b29b      	uxth	r3, r3
 8006550:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006552:	68fb      	ldr	r3, [r7, #12]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr

0800655e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006574:	b480      	push	{r7}
 8006576:	b08d      	sub	sp, #52	; 0x34
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	460b      	mov	r3, r1
 8006584:	80fb      	strh	r3, [r7, #6]
 8006586:	4613      	mov	r3, r2
 8006588:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800658a:	88bb      	ldrh	r3, [r7, #4]
 800658c:	3301      	adds	r3, #1
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	005a      	lsls	r2, r3, #1
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ac:	e01e      	b.n	80065ec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	3301      	adds	r3, #1
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	3302      	adds	r3, #2
 80065d8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	3302      	adds	r3, #2
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	3301      	adds	r3, #1
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80065e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e8:	3b01      	subs	r3, #1
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1dd      	bne.n	80065ae <USB_WritePMA+0x3a>
  }
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	3734      	adds	r7, #52	; 0x34
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065fe:	b480      	push	{r7}
 8006600:	b08b      	sub	sp, #44	; 0x2c
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	4611      	mov	r1, r2
 800660a:	461a      	mov	r2, r3
 800660c:	460b      	mov	r3, r1
 800660e:	80fb      	strh	r3, [r7, #6]
 8006610:	4613      	mov	r3, r2
 8006612:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006614:	88bb      	ldrh	r3, [r7, #4]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	b29b      	uxth	r3, r3
 800661a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	005a      	lsls	r2, r3, #1
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006630:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
 8006636:	e01b      	b.n	8006670 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	3302      	adds	r3, #2
 8006644:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3301      	adds	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	0a1b      	lsrs	r3, r3, #8
 8006658:	b2da      	uxtb	r2, r3
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	3301      	adds	r3, #1
 8006662:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	3302      	adds	r3, #2
 8006668:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	3b01      	subs	r3, #1
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1e0      	bne.n	8006638 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006676:	88bb      	ldrh	r3, [r7, #4]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	b2da      	uxtb	r2, r3
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	701a      	strb	r2, [r3, #0]
  }
}
 8006692:	bf00      	nop
 8006694:	372c      	adds	r7, #44	; 0x2c
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr

0800669c <USBD_MIDI_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
  
  USBD_LL_OpenEP(pdev,
 80066ac:	2340      	movs	r3, #64	; 0x40
 80066ae:	2203      	movs	r2, #3
 80066b0:	2181      	movs	r1, #129	; 0x81
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fc33 	bl	8007f1e <USBD_LL_OpenEP>
                 MIDI_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 MIDI_EPIN_SIZE);  

  USBD_LL_OpenEP(pdev,
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	2203      	movs	r2, #3
 80066bc:	2101      	movs	r1, #1
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fc2d 	bl	8007f1e <USBD_LL_OpenEP>
               MIDI_EPOUT_ADDR,
               USBD_EP_TYPE_INTR,
               MIDI_EPOUT_SIZE);
  
  USBD_LL_PrepareReceive(pdev, 
 80066c4:	2340      	movs	r3, #64	; 0x40
 80066c6:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <USBD_MIDI_Init+0x68>)
 80066c8:	2101      	movs	r1, #1
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 fd18 	bl	8008100 <USBD_LL_PrepareReceive>
               MIDI_EPOUT_ADDR,                                      
               usb_rx_buffer,
               MIDI_EPOUT_SIZE);    
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_MIDI_HandleTypeDef));
 80066d0:	2010      	movs	r0, #16
 80066d2:	f001 fd39 	bl	8008148 <USBD_static_malloc>
 80066d6:	4602      	mov	r2, r0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  
  if(pdev->pClassData == NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <USBD_MIDI_Init+0x52>
  {
    ret = 1; 
 80066e8:	2301      	movs	r3, #1
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e004      	b.n	80066f8 <USBD_MIDI_Init+0x5c>
  }
  else
  {
    ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	2200      	movs	r2, #0
 80066f6:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000204 	.word	0x20000204

08006708 <USBD_MIDI_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	70fb      	strb	r3, [r7, #3]
  /* Close MIDI EPs */
  USBD_LL_CloseEP(pdev, MIDI_EPIN_SIZE);
 8006714:	2140      	movs	r1, #64	; 0x40
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 fc27 	bl	8007f6a <USBD_LL_CloseEP>
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <USBD_MIDI_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800672c:	4618      	mov	r0, r3
 800672e:	f001 fd17 	bl	8008160 <USBD_static_free>
    pdev->pClassData = NULL;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  } 
  
  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_MIDI_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_MIDI_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
  USBD_MIDI_HandleTypeDef     *hmidi = pdev->pClassData;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006766:	2b00      	cmp	r3, #0
 8006768:	d044      	beq.n	80067f4 <USBD_MIDI_Setup+0xb0>
 800676a:	2b20      	cmp	r3, #32
 800676c:	d171      	bne.n	8006852 <USBD_MIDI_Setup+0x10e>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	3b02      	subs	r3, #2
 8006774:	2b09      	cmp	r3, #9
 8006776:	d836      	bhi.n	80067e6 <USBD_MIDI_Setup+0xa2>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <USBD_MIDI_Setup+0x3c>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067d7 	.word	0x080067d7
 8006784:	080067b7 	.word	0x080067b7
 8006788:	080067e7 	.word	0x080067e7
 800678c:	080067e7 	.word	0x080067e7
 8006790:	080067e7 	.word	0x080067e7
 8006794:	080067e7 	.word	0x080067e7
 8006798:	080067e7 	.word	0x080067e7
 800679c:	080067e7 	.word	0x080067e7
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067a9 	.word	0x080067a9
    {
      case MIDI_REQ_SET_PROTOCOL:
        hmidi->Protocol = (uint8_t)(req->wValue);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	885b      	ldrh	r3, [r3, #2]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	601a      	str	r2, [r3, #0]
        break;
 80067b4:	e01d      	b.n	80067f2 <USBD_MIDI_Setup+0xae>
        
      case MIDI_REQ_GET_PROTOCOL:
        USBD_CtlSendData (pdev, 
                          (uint8_t *)&hmidi->Protocol,
 80067b6:	68fb      	ldr	r3, [r7, #12]
        USBD_CtlSendData (pdev, 
 80067b8:	2201      	movs	r2, #1
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 f8e6 	bl	800798e <USBD_CtlSendData>
                          1);    
        break;
 80067c2:	e016      	b.n	80067f2 <USBD_MIDI_Setup+0xae>
        
      case MIDI_REQ_SET_IDLE:
        hmidi->IdleState = (uint8_t)(req->wValue >> 8);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	885b      	ldrh	r3, [r3, #2]
 80067c8:	0a1b      	lsrs	r3, r3, #8
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	605a      	str	r2, [r3, #4]
        break;
 80067d4:	e00d      	b.n	80067f2 <USBD_MIDI_Setup+0xae>
        
      case MIDI_REQ_GET_IDLE:
        USBD_CtlSendData (pdev, 
                          (uint8_t *)&hmidi->IdleState,
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3304      	adds	r3, #4
        USBD_CtlSendData (pdev, 
 80067da:	2201      	movs	r2, #1
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f8d5 	bl	800798e <USBD_CtlSendData>
                          1);        
        break;      
 80067e4:	e005      	b.n	80067f2 <USBD_MIDI_Setup+0xae>
        
      default:
        USBD_CtlError (pdev, req);
 80067e6:	6839      	ldr	r1, [r7, #0]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 f866 	bl	80078ba <USBD_CtlError>
        return USBD_FAIL; 
 80067ee:	2302      	movs	r3, #2
 80067f0:	e030      	b.n	8006854 <USBD_MIDI_Setup+0x110>
    }
    break;
 80067f2:	e02e      	b.n	8006852 <USBD_MIDI_Setup+0x10e>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b0b      	cmp	r3, #11
 80067fa:	d023      	beq.n	8006844 <USBD_MIDI_Setup+0x100>
 80067fc:	2b0b      	cmp	r3, #11
 80067fe:	dc28      	bgt.n	8006852 <USBD_MIDI_Setup+0x10e>
 8006800:	2b06      	cmp	r3, #6
 8006802:	d002      	beq.n	800680a <USBD_MIDI_Setup+0xc6>
 8006804:	2b0a      	cmp	r3, #10
 8006806:	d015      	beq.n	8006834 <USBD_MIDI_Setup+0xf0>
 8006808:	e023      	b.n	8006852 <USBD_MIDI_Setup+0x10e>
    {
      case USB_REQ_GET_DESCRIPTOR: 
        if( req->wValue >> 8 == MIDI_DESCRIPTOR_TYPE)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	885b      	ldrh	r3, [r3, #2]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b21      	cmp	r3, #33	; 0x21
 8006814:	d107      	bne.n	8006826 <USBD_MIDI_Setup+0xe2>
        {
          pbuf = USBD_MIDI_CfgDesc + USB_MIDI_CLASS_DESC_SHIFT;
 8006816:	4b11      	ldr	r3, [pc, #68]	; (800685c <USBD_MIDI_Setup+0x118>)
 8006818:	613b      	str	r3, [r7, #16]
          len = MIN(USB_MIDI_DESC_SIZE , req->wLength);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	88db      	ldrh	r3, [r3, #6]
 800681e:	2b07      	cmp	r3, #7
 8006820:	bf28      	it	cs
 8006822:	2307      	movcs	r3, #7
 8006824:	82fb      	strh	r3, [r7, #22]
        }
        
        USBD_CtlSendData (pdev, pbuf, len);
 8006826:	8afb      	ldrh	r3, [r7, #22]
 8006828:	461a      	mov	r2, r3
 800682a:	6939      	ldr	r1, [r7, #16]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f8ae 	bl	800798e <USBD_CtlSendData>
        break;
 8006832:	e00e      	b.n	8006852 <USBD_MIDI_Setup+0x10e>
        
      case USB_REQ_GET_INTERFACE :
        USBD_CtlSendData (pdev,
                          (uint8_t *)&hmidi->AltSetting,
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3308      	adds	r3, #8
        USBD_CtlSendData (pdev,
 8006838:	2201      	movs	r2, #1
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 f8a6 	bl	800798e <USBD_CtlSendData>
                          1);
        break;
 8006842:	e006      	b.n	8006852 <USBD_MIDI_Setup+0x10e>
        
      case USB_REQ_SET_INTERFACE :
        hmidi->AltSetting = (uint8_t)(req->wValue);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	885b      	ldrh	r3, [r3, #2]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	609a      	str	r2, [r3, #8]
        break;
 8006850:	bf00      	nop
    }
  }
  return USBD_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000056 	.word	0x20000056

08006860 <USBD_MIDI_SendReport>:
  * @retval status
  */
uint8_t USBD_MIDI_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  USBD_MIDI_HandleTypeDef *hmidi = pdev->pClassData;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	617b      	str	r3, [r7, #20]
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	2b03      	cmp	r3, #3
 800687e:	d10c      	bne.n	800689a <USBD_MIDI_SendReport+0x3a>
  {
    if(hmidi->state == MIDI_IDLE)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	7b1b      	ldrb	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d108      	bne.n	800689a <USBD_MIDI_SendReport+0x3a>
    {
      hmidi->state = MIDI_BUSY;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2201      	movs	r2, #1
 800688c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev, MIDI_EPIN_ADDR, report, len);
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	2181      	movs	r1, #129	; 0x81
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f001 fc10 	bl	80080ba <USBD_LL_Transmit>
    }
  }
  return USBD_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_MIDI_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2253      	movs	r2, #83	; 0x53
 80068b0:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 80068b2:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bc80      	pop	{r7}
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000044 	.word	0x20000044

080068c4 <USBD_MIDI_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_MIDI_HandleTypeDef *)pdev->pClassData)->state = MIDI_IDLE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d6:	2200      	movs	r2, #0
 80068d8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bc80      	pop	{r7}
 80068e4:	4770      	bx	lr
	...

080068e8 <USBD_MIDI_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  if (epnum != (MIDI_EPOUT_ADDR & 0x0F)) return USBD_FAIL;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d001      	beq.n	80068fe <USBD_MIDI_DataOut+0x16>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e00f      	b.n	800691e <USBD_MIDI_DataOut+0x36>

  USBD_MIDI_DataInHandler(usb_rx_buffer, MIDI_EPOUT_SIZE);
 80068fe:	2140      	movs	r1, #64	; 0x40
 8006900:	4809      	ldr	r0, [pc, #36]	; (8006928 <USBD_MIDI_DataOut+0x40>)
 8006902:	f000 f813 	bl	800692c <USBD_MIDI_DataInHandler>
  
  memset(usb_rx_buffer, 0, MIDI_EPOUT_SIZE);
 8006906:	2240      	movs	r2, #64	; 0x40
 8006908:	2100      	movs	r1, #0
 800690a:	4807      	ldr	r0, [pc, #28]	; (8006928 <USBD_MIDI_DataOut+0x40>)
 800690c:	f001 fc8c 	bl	8008228 <memset>
  
  USBD_LL_PrepareReceive(pdev, MIDI_EPOUT_ADDR, usb_rx_buffer, MIDI_EPOUT_SIZE);  
 8006910:	2340      	movs	r3, #64	; 0x40
 8006912:	4a05      	ldr	r2, [pc, #20]	; (8006928 <USBD_MIDI_DataOut+0x40>)
 8006914:	2101      	movs	r1, #1
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fbf2 	bl	8008100 <USBD_LL_PrepareReceive>
  
  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000204 	.word	0x20000204

0800692c <USBD_MIDI_DataInHandler>:
  * @brief  USBD_MIDI_DataInHandler
  * @param  usb_rx_buffer: midi messages buffer
  * @param  usb_rx_buffer_length: midi messages buffer length
  */
__weak extern void USBD_MIDI_DataInHandler(uint8_t * usb_rx_buffer, uint8_t usb_rx_buffer_length)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  // For user implementation.
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr
	...

08006944 <USBD_MIDI_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_MIDI_GetDeviceQualifierDesc (uint16_t *length)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	220a      	movs	r2, #10
 8006950:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_DeviceQualifierDesc;
 8006952:	4b03      	ldr	r3, [pc, #12]	; (8006960 <USBD_MIDI_GetDeviceQualifierDesc+0x1c>)
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000098 	.word	0x20000098

08006964 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006978:	2302      	movs	r3, #2
 800697a:	e01a      	b.n	80069b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	79fa      	ldrb	r2, [r7, #7]
 80069a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f001 fa4c 	bl	8007e48 <USBD_LL_Init>

  return USBD_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b085      	sub	sp, #20
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d006      	beq.n	80069dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
 80069da:	e001      	b.n	80069e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80069dc:	2302      	movs	r3, #2
 80069de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr

080069ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fa77 	bl	8007ee8 <USBD_LL_Start>

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a24:	2302      	movs	r3, #2
 8006a26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00c      	beq.n	8006a4c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3

  return USBD_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fed7 	bl	8007842 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ab0:	f003 031f 	and.w	r3, r3, #31
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d016      	beq.n	8006ae6 <USBD_LL_SetupStage+0x6a>
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d81c      	bhi.n	8006af6 <USBD_LL_SetupStage+0x7a>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <USBD_LL_SetupStage+0x4a>
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d008      	beq.n	8006ad6 <USBD_LL_SetupStage+0x5a>
 8006ac4:	e017      	b.n	8006af6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9ca 	bl	8006e68 <USBD_StdDevReq>
      break;
 8006ad4:	e01a      	b.n	8006b0c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa2c 	bl	8006f3c <USBD_StdItfReq>
      break;
 8006ae4:	e012      	b.n	8006b0c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa6c 	bl	8006fcc <USBD_StdEPReq>
      break;
 8006af4:	e00a      	b.n	8006b0c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006afc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f001 fa4f 	bl	8007fa8 <USBD_LL_StallEP>
      break;
 8006b0a:	bf00      	nop
  }

  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b086      	sub	sp, #24
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	60f8      	str	r0, [r7, #12]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b24:	7afb      	ldrb	r3, [r7, #11]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d14b      	bne.n	8006bc2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d134      	bne.n	8006ba6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d919      	bls.n	8006b7c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	1ad2      	subs	r2, r2, r3
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d203      	bcs.n	8006b6a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	e002      	b.n	8006b70 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 ff38 	bl	80079ea <USBD_CtlContinueRx>
 8006b7a:	e038      	b.n	8006bee <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d105      	bne.n	8006b9e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 ff35 	bl	8007a0e <USBD_CtlSendStatus>
 8006ba4:	e023      	b.n	8006bee <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d11e      	bne.n	8006bee <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006bb8:	2100      	movs	r1, #0
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f001 f9f4 	bl	8007fa8 <USBD_LL_StallEP>
 8006bc0:	e015      	b.n	8006bee <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00d      	beq.n	8006bea <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d108      	bne.n	8006bea <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	7afa      	ldrb	r2, [r7, #11]
 8006be2:	4611      	mov	r1, r2
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	4798      	blx	r3
 8006be8:	e001      	b.n	8006bee <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006bea:	2302      	movs	r3, #2
 8006bec:	e000      	b.n	8006bf0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	460b      	mov	r3, r1
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c06:	7afb      	ldrb	r3, [r7, #11]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d17f      	bne.n	8006d0c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d15c      	bne.n	8006cd6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d915      	bls.n	8006c54 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	1ad2      	subs	r2, r2, r3
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fec0 	bl	80079c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c46:	2300      	movs	r3, #0
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f001 fa57 	bl	8008100 <USBD_LL_PrepareReceive>
 8006c52:	e04e      	b.n	8006cf2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	6912      	ldr	r2, [r2, #16]
 8006c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c60:	fb01 f202 	mul.w	r2, r1, r2
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d11c      	bne.n	8006ca4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d316      	bcc.n	8006ca4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d20f      	bcs.n	8006ca4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c84:	2200      	movs	r2, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fe9c 	bl	80079c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c96:	2300      	movs	r3, #0
 8006c98:	2200      	movs	r2, #0
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f001 fa2f 	bl	8008100 <USBD_LL_PrepareReceive>
 8006ca2:	e026      	b.n	8006cf2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d105      	bne.n	8006cc6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006cc6:	2180      	movs	r1, #128	; 0x80
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f001 f96d 	bl	8007fa8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 feb0 	bl	8007a34 <USBD_CtlReceiveStatus>
 8006cd4:	e00d      	b.n	8006cf2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d004      	beq.n	8006cea <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006cea:	2180      	movs	r1, #128	; 0x80
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f001 f95b 	bl	8007fa8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d11d      	bne.n	8006d38 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff fe81 	bl	8006a04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d0a:	e015      	b.n	8006d38 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00d      	beq.n	8006d34 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	d108      	bne.n	8006d34 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	7afa      	ldrb	r2, [r7, #11]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	4798      	blx	r3
 8006d32:	e001      	b.n	8006d38 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d34:	2302      	movs	r3, #2
 8006d36:	e000      	b.n	8006d3a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2100      	movs	r1, #0
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 f8e4 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2240      	movs	r2, #64	; 0x40
 8006d62:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d66:	2340      	movs	r3, #64	; 0x40
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2180      	movs	r1, #128	; 0x80
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f8d6 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6852      	ldr	r2, [r2, #4]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	4611      	mov	r1, r2
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
  }

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	78fa      	ldrb	r2, [r7, #3]
 8006dd4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr

08006de2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2204      	movs	r2, #4
 8006dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bc80      	pop	{r7}
 8006e08:	4770      	bx	lr

08006e0a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d105      	bne.n	8006e28 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d10b      	bne.n	8006e5e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e7e:	2b40      	cmp	r3, #64	; 0x40
 8006e80:	d005      	beq.n	8006e8e <USBD_StdDevReq+0x26>
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d84f      	bhi.n	8006f26 <USBD_StdDevReq+0xbe>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <USBD_StdDevReq+0x36>
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d14b      	bne.n	8006f26 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
      break;
 8006e9c:	e048      	b.n	8006f30 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b09      	cmp	r3, #9
 8006ea4:	d839      	bhi.n	8006f1a <USBD_StdDevReq+0xb2>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_StdDevReq+0x44>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006f11 	.word	0x08006f11
 8006eb4:	08006f1b 	.word	0x08006f1b
 8006eb8:	08006f07 	.word	0x08006f07
 8006ebc:	08006f1b 	.word	0x08006f1b
 8006ec0:	08006edf 	.word	0x08006edf
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006f1b 	.word	0x08006f1b
 8006ecc:	08006ef3 	.word	0x08006ef3
 8006ed0:	08006ee9 	.word	0x08006ee9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f9dc 	bl	8007294 <USBD_GetDescriptor>
          break;
 8006edc:	e022      	b.n	8006f24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fb3f 	bl	8007564 <USBD_SetAddress>
          break;
 8006ee6:	e01d      	b.n	8006f24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb7e 	bl	80075ec <USBD_SetConfig>
          break;
 8006ef0:	e018      	b.n	8006f24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc07 	bl	8007708 <USBD_GetConfig>
          break;
 8006efa:	e013      	b.n	8006f24 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fc37 	bl	8007772 <USBD_GetStatus>
          break;
 8006f04:	e00e      	b.n	8006f24 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fc65 	bl	80077d8 <USBD_SetFeature>
          break;
 8006f0e:	e009      	b.n	8006f24 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fc74 	bl	8007800 <USBD_ClrFeature>
          break;
 8006f18:	e004      	b.n	8006f24 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fccc 	bl	80078ba <USBD_CtlError>
          break;
 8006f22:	bf00      	nop
      }
      break;
 8006f24:	e004      	b.n	8006f30 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fcc6 	bl	80078ba <USBD_CtlError>
      break;
 8006f2e:	bf00      	nop
  }

  return ret;
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop

08006f3c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f52:	2b40      	cmp	r3, #64	; 0x40
 8006f54:	d005      	beq.n	8006f62 <USBD_StdItfReq+0x26>
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d82e      	bhi.n	8006fb8 <USBD_StdItfReq+0x7c>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <USBD_StdItfReq+0x26>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d12a      	bne.n	8006fb8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d81d      	bhi.n	8006faa <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	889b      	ldrh	r3, [r3, #4]
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d813      	bhi.n	8006fa0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d110      	bne.n	8006fb4 <USBD_StdItfReq+0x78>
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10d      	bne.n	8006fb4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fd38 	bl	8007a0e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f9e:	e009      	b.n	8006fb4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fc89 	bl	80078ba <USBD_CtlError>
          break;
 8006fa8:	e004      	b.n	8006fb4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fc84 	bl	80078ba <USBD_CtlError>
          break;
 8006fb2:	e000      	b.n	8006fb6 <USBD_StdItfReq+0x7a>
          break;
 8006fb4:	bf00      	nop
      }
      break;
 8006fb6:	e004      	b.n	8006fc2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fc7d 	bl	80078ba <USBD_CtlError>
      break;
 8006fc0:	bf00      	nop
  }

  return USBD_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	889b      	ldrh	r3, [r3, #4]
 8006fde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d007      	beq.n	8006ffc <USBD_StdEPReq+0x30>
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	f200 8146 	bhi.w	800727e <USBD_StdEPReq+0x2b2>
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <USBD_StdEPReq+0x40>
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	f040 8141 	bne.w	800727e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
      break;
 800700a:	e13d      	b.n	8007288 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007014:	2b20      	cmp	r3, #32
 8007016:	d10a      	bne.n	800702e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	73fb      	strb	r3, [r7, #15]

        return ret;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	e12d      	b.n	800728a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d007      	beq.n	8007046 <USBD_StdEPReq+0x7a>
 8007036:	2b03      	cmp	r3, #3
 8007038:	f300 811b 	bgt.w	8007272 <USBD_StdEPReq+0x2a6>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d072      	beq.n	8007126 <USBD_StdEPReq+0x15a>
 8007040:	2b01      	cmp	r3, #1
 8007042:	d03a      	beq.n	80070ba <USBD_StdEPReq+0xee>
 8007044:	e115      	b.n	8007272 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704c:	2b02      	cmp	r3, #2
 800704e:	d002      	beq.n	8007056 <USBD_StdEPReq+0x8a>
 8007050:	2b03      	cmp	r3, #3
 8007052:	d015      	beq.n	8007080 <USBD_StdEPReq+0xb4>
 8007054:	e02b      	b.n	80070ae <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00c      	beq.n	8007076 <USBD_StdEPReq+0xaa>
 800705c:	7bbb      	ldrb	r3, [r7, #14]
 800705e:	2b80      	cmp	r3, #128	; 0x80
 8007060:	d009      	beq.n	8007076 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 ff9e 	bl	8007fa8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800706c:	2180      	movs	r1, #128	; 0x80
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 ff9a 	bl	8007fa8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007074:	e020      	b.n	80070b8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fc1e 	bl	80078ba <USBD_CtlError>
              break;
 800707e:	e01b      	b.n	80070b8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10e      	bne.n	80070a6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00b      	beq.n	80070a6 <USBD_StdEPReq+0xda>
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d008      	beq.n	80070a6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	88db      	ldrh	r3, [r3, #6]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 ff81 	bl	8007fa8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fcb1 	bl	8007a0e <USBD_CtlSendStatus>

              break;
 80070ac:	e004      	b.n	80070b8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fc02 	bl	80078ba <USBD_CtlError>
              break;
 80070b6:	bf00      	nop
          }
          break;
 80070b8:	e0e0      	b.n	800727c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d002      	beq.n	80070ca <USBD_StdEPReq+0xfe>
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d015      	beq.n	80070f4 <USBD_StdEPReq+0x128>
 80070c8:	e026      	b.n	8007118 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00c      	beq.n	80070ea <USBD_StdEPReq+0x11e>
 80070d0:	7bbb      	ldrb	r3, [r7, #14]
 80070d2:	2b80      	cmp	r3, #128	; 0x80
 80070d4:	d009      	beq.n	80070ea <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 ff64 	bl	8007fa8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80070e0:	2180      	movs	r1, #128	; 0x80
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 ff60 	bl	8007fa8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070e8:	e01c      	b.n	8007124 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fbe4 	bl	80078ba <USBD_CtlError>
              break;
 80070f2:	e017      	b.n	8007124 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	885b      	ldrh	r3, [r3, #2]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d112      	bne.n	8007122 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 ff6b 	bl	8007fe6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fc7c 	bl	8007a0e <USBD_CtlSendStatus>
              }
              break;
 8007116:	e004      	b.n	8007122 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fbcd 	bl	80078ba <USBD_CtlError>
              break;
 8007120:	e000      	b.n	8007124 <USBD_StdEPReq+0x158>
              break;
 8007122:	bf00      	nop
          }
          break;
 8007124:	e0aa      	b.n	800727c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712c:	2b02      	cmp	r3, #2
 800712e:	d002      	beq.n	8007136 <USBD_StdEPReq+0x16a>
 8007130:	2b03      	cmp	r3, #3
 8007132:	d032      	beq.n	800719a <USBD_StdEPReq+0x1ce>
 8007134:	e097      	b.n	8007266 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <USBD_StdEPReq+0x180>
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	2b80      	cmp	r3, #128	; 0x80
 8007140:	d004      	beq.n	800714c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fbb8 	bl	80078ba <USBD_CtlError>
                break;
 800714a:	e091      	b.n	8007270 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800714c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007150:	2b00      	cmp	r3, #0
 8007152:	da0b      	bge.n	800716c <USBD_StdEPReq+0x1a0>
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	3310      	adds	r3, #16
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4413      	add	r3, r2
 8007168:	3304      	adds	r3, #4
 800716a:	e00b      	b.n	8007184 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4413      	add	r3, r2
 8007182:	3304      	adds	r3, #4
 8007184:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2202      	movs	r2, #2
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fbfb 	bl	800798e <USBD_CtlSendData>
              break;
 8007198:	e06a      	b.n	8007270 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800719a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da11      	bge.n	80071c6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3318      	adds	r3, #24
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d117      	bne.n	80071ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fb7b 	bl	80078ba <USBD_CtlError>
                  break;
 80071c4:	e054      	b.n	8007270 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	f003 020f 	and.w	r2, r3, #15
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d104      	bne.n	80071ec <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fb68 	bl	80078ba <USBD_CtlError>
                  break;
 80071ea:	e041      	b.n	8007270 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	da0b      	bge.n	800720c <USBD_StdEPReq+0x240>
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	3310      	adds	r3, #16
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	4413      	add	r3, r2
 8007208:	3304      	adds	r3, #4
 800720a:	e00b      	b.n	8007224 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	3304      	adds	r3, #4
 8007224:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <USBD_StdEPReq+0x266>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b80      	cmp	r3, #128	; 0x80
 8007230:	d103      	bne.n	800723a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	e00e      	b.n	8007258 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fef0 	bl	8008024 <USBD_LL_IsStallEP>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e002      	b.n	8007258 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2202      	movs	r2, #2
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fb95 	bl	800798e <USBD_CtlSendData>
              break;
 8007264:	e004      	b.n	8007270 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fb26 	bl	80078ba <USBD_CtlError>
              break;
 800726e:	bf00      	nop
          }
          break;
 8007270:	e004      	b.n	800727c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb20 	bl	80078ba <USBD_CtlError>
          break;
 800727a:	bf00      	nop
      }
      break;
 800727c:	e004      	b.n	8007288 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fb1a 	bl	80078ba <USBD_CtlError>
      break;
 8007286:	bf00      	nop
  }

  return ret;
 8007288:	7bfb      	ldrb	r3, [r7, #15]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	885b      	ldrh	r3, [r3, #2]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	2b06      	cmp	r3, #6
 80072b6:	f200 8128 	bhi.w	800750a <USBD_GetDescriptor+0x276>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <USBD_GetDescriptor+0x2c>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	080072dd 	.word	0x080072dd
 80072c4:	080072f5 	.word	0x080072f5
 80072c8:	08007335 	.word	0x08007335
 80072cc:	0800750b 	.word	0x0800750b
 80072d0:	0800750b 	.word	0x0800750b
 80072d4:	080074ab 	.word	0x080074ab
 80072d8:	080074d7 	.word	0x080074d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	7c12      	ldrb	r2, [r2, #16]
 80072e8:	f107 0108 	add.w	r1, r7, #8
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	60f8      	str	r0, [r7, #12]
      break;
 80072f2:	e112      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	7c1b      	ldrb	r3, [r3, #16]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	f107 0208 	add.w	r2, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3301      	adds	r3, #1
 8007312:	2202      	movs	r2, #2
 8007314:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007316:	e100      	b.n	800751a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	f107 0208 	add.w	r2, r7, #8
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
 8007328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	2202      	movs	r2, #2
 8007330:	701a      	strb	r2, [r3, #0]
      break;
 8007332:	e0f2      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b05      	cmp	r3, #5
 800733c:	f200 80ac 	bhi.w	8007498 <USBD_GetDescriptor+0x204>
 8007340:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <USBD_GetDescriptor+0xb4>)
 8007342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007346:	bf00      	nop
 8007348:	08007361 	.word	0x08007361
 800734c:	08007395 	.word	0x08007395
 8007350:	080073c9 	.word	0x080073c9
 8007354:	080073fd 	.word	0x080073fd
 8007358:	08007431 	.word	0x08007431
 800735c:	08007465 	.word	0x08007465
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	7c12      	ldrb	r2, [r2, #16]
 8007378:	f107 0108 	add.w	r1, r7, #8
 800737c:	4610      	mov	r0, r2
 800737e:	4798      	blx	r3
 8007380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007382:	e091      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa97 	bl	80078ba <USBD_CtlError>
            err++;
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	3301      	adds	r3, #1
 8007390:	72fb      	strb	r3, [r7, #11]
          break;
 8007392:	e089      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	7c12      	ldrb	r2, [r2, #16]
 80073ac:	f107 0108 	add.w	r1, r7, #8
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b6:	e077      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa7d 	bl	80078ba <USBD_CtlError>
            err++;
 80073c0:	7afb      	ldrb	r3, [r7, #11]
 80073c2:	3301      	adds	r3, #1
 80073c4:	72fb      	strb	r3, [r7, #11]
          break;
 80073c6:	e06f      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	7c12      	ldrb	r2, [r2, #16]
 80073e0:	f107 0108 	add.w	r1, r7, #8
 80073e4:	4610      	mov	r0, r2
 80073e6:	4798      	blx	r3
 80073e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ea:	e05d      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa63 	bl	80078ba <USBD_CtlError>
            err++;
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	3301      	adds	r3, #1
 80073f8:	72fb      	strb	r3, [r7, #11]
          break;
 80073fa:	e055      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	7c12      	ldrb	r2, [r2, #16]
 8007414:	f107 0108 	add.w	r1, r7, #8
 8007418:	4610      	mov	r0, r2
 800741a:	4798      	blx	r3
 800741c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741e:	e043      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fa49 	bl	80078ba <USBD_CtlError>
            err++;
 8007428:	7afb      	ldrb	r3, [r7, #11]
 800742a:	3301      	adds	r3, #1
 800742c:	72fb      	strb	r3, [r7, #11]
          break;
 800742e:	e03b      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7c12      	ldrb	r2, [r2, #16]
 8007448:	f107 0108 	add.w	r1, r7, #8
 800744c:	4610      	mov	r0, r2
 800744e:	4798      	blx	r3
 8007450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007452:	e029      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa2f 	bl	80078ba <USBD_CtlError>
            err++;
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	3301      	adds	r3, #1
 8007460:	72fb      	strb	r3, [r7, #11]
          break;
 8007462:	e021      	b.n	80074a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7c12      	ldrb	r2, [r2, #16]
 800747c:	f107 0108 	add.w	r1, r7, #8
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
 8007484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007486:	e00f      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa15 	bl	80078ba <USBD_CtlError>
            err++;
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	3301      	adds	r3, #1
 8007494:	72fb      	strb	r3, [r7, #11]
          break;
 8007496:	e007      	b.n	80074a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa0d 	bl	80078ba <USBD_CtlError>
          err++;
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	3301      	adds	r3, #1
 80074a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80074a6:	e038      	b.n	800751a <USBD_GetDescriptor+0x286>
 80074a8:	e037      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	7c1b      	ldrb	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d109      	bne.n	80074c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ba:	f107 0208 	add.w	r2, r7, #8
 80074be:	4610      	mov	r0, r2
 80074c0:	4798      	blx	r3
 80074c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074c4:	e029      	b.n	800751a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9f6 	bl	80078ba <USBD_CtlError>
        err++;
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	3301      	adds	r3, #1
 80074d2:	72fb      	strb	r3, [r7, #11]
      break;
 80074d4:	e021      	b.n	800751a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7c1b      	ldrb	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10d      	bne.n	80074fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f107 0208 	add.w	r2, r7, #8
 80074ea:	4610      	mov	r0, r2
 80074ec:	4798      	blx	r3
 80074ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	2207      	movs	r2, #7
 80074f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f8:	e00f      	b.n	800751a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074fa:	6839      	ldr	r1, [r7, #0]
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9dc 	bl	80078ba <USBD_CtlError>
        err++;
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	3301      	adds	r3, #1
 8007506:	72fb      	strb	r3, [r7, #11]
      break;
 8007508:	e007      	b.n	800751a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f9d4 	bl	80078ba <USBD_CtlError>
      err++;
 8007512:	7afb      	ldrb	r3, [r7, #11]
 8007514:	3301      	adds	r3, #1
 8007516:	72fb      	strb	r3, [r7, #11]
      break;
 8007518:	bf00      	nop
  }

  if (err != 0U)
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d11c      	bne.n	800755a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007520:	893b      	ldrh	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d011      	beq.n	800754a <USBD_GetDescriptor+0x2b6>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00d      	beq.n	800754a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	88da      	ldrh	r2, [r3, #6]
 8007532:	893b      	ldrh	r3, [r7, #8]
 8007534:	4293      	cmp	r3, r2
 8007536:	bf28      	it	cs
 8007538:	4613      	movcs	r3, r2
 800753a:	b29b      	uxth	r3, r3
 800753c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800753e:	893b      	ldrh	r3, [r7, #8]
 8007540:	461a      	mov	r2, r3
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fa22 	bl	800798e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	88db      	ldrh	r3, [r3, #6]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d104      	bne.n	800755c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa5b 	bl	8007a0e <USBD_CtlSendStatus>
 8007558:	e000      	b.n	800755c <USBD_GetDescriptor+0x2c8>
    return;
 800755a:	bf00      	nop
    }
  }
}
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	889b      	ldrh	r3, [r3, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d130      	bne.n	80075d8 <USBD_SetAddress+0x74>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	88db      	ldrh	r3, [r3, #6]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d12c      	bne.n	80075d8 <USBD_SetAddress+0x74>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	885b      	ldrh	r3, [r3, #2]
 8007582:	2b7f      	cmp	r3, #127	; 0x7f
 8007584:	d828      	bhi.n	80075d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	885b      	ldrh	r3, [r3, #2]
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007598:	2b03      	cmp	r3, #3
 800759a:	d104      	bne.n	80075a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f98b 	bl	80078ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a4:	e01d      	b.n	80075e2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7bfa      	ldrb	r2, [r7, #15]
 80075aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fd62 	bl	800807c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa28 	bl	8007a0e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d004      	beq.n	80075ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075cc:	e009      	b.n	80075e2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	e004      	b.n	80075e2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f96d 	bl	80078ba <USBD_CtlError>
  }
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	885b      	ldrh	r3, [r3, #2]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	4b41      	ldr	r3, [pc, #260]	; (8007704 <USBD_SetConfig+0x118>)
 80075fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007600:	4b40      	ldr	r3, [pc, #256]	; (8007704 <USBD_SetConfig+0x118>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d904      	bls.n	8007612 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f955 	bl	80078ba <USBD_CtlError>
 8007610:	e075      	b.n	80076fe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	2b02      	cmp	r3, #2
 800761a:	d002      	beq.n	8007622 <USBD_SetConfig+0x36>
 800761c:	2b03      	cmp	r3, #3
 800761e:	d023      	beq.n	8007668 <USBD_SetConfig+0x7c>
 8007620:	e062      	b.n	80076e8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007622:	4b38      	ldr	r3, [pc, #224]	; (8007704 <USBD_SetConfig+0x118>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01a      	beq.n	8007660 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800762a:	4b36      	ldr	r3, [pc, #216]	; (8007704 <USBD_SetConfig+0x118>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2203      	movs	r2, #3
 8007638:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800763c:	4b31      	ldr	r3, [pc, #196]	; (8007704 <USBD_SetConfig+0x118>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff f9e8 	bl	8006a18 <USBD_SetClassConfig>
 8007648:	4603      	mov	r3, r0
 800764a:	2b02      	cmp	r3, #2
 800764c:	d104      	bne.n	8007658 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f932 	bl	80078ba <USBD_CtlError>
            return;
 8007656:	e052      	b.n	80076fe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f9d8 	bl	8007a0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800765e:	e04e      	b.n	80076fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9d4 	bl	8007a0e <USBD_CtlSendStatus>
        break;
 8007666:	e04a      	b.n	80076fe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007668:	4b26      	ldr	r3, [pc, #152]	; (8007704 <USBD_SetConfig+0x118>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d112      	bne.n	8007696 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007678:	4b22      	ldr	r3, [pc, #136]	; (8007704 <USBD_SetConfig+0x118>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007682:	4b20      	ldr	r3, [pc, #128]	; (8007704 <USBD_SetConfig+0x118>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff f9e4 	bl	8006a56 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9bd 	bl	8007a0e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007694:	e033      	b.n	80076fe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007696:	4b1b      	ldr	r3, [pc, #108]	; (8007704 <USBD_SetConfig+0x118>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d01d      	beq.n	80076e0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff f9d2 	bl	8006a56 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <USBD_SetConfig+0x118>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076bc:	4b11      	ldr	r3, [pc, #68]	; (8007704 <USBD_SetConfig+0x118>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff f9a8 	bl	8006a18 <USBD_SetClassConfig>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d104      	bne.n	80076d8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f8f2 	bl	80078ba <USBD_CtlError>
            return;
 80076d6:	e012      	b.n	80076fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f998 	bl	8007a0e <USBD_CtlSendStatus>
        break;
 80076de:	e00e      	b.n	80076fe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f994 	bl	8007a0e <USBD_CtlSendStatus>
        break;
 80076e6:	e00a      	b.n	80076fe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f8e5 	bl	80078ba <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80076f0:	4b04      	ldr	r3, [pc, #16]	; (8007704 <USBD_SetConfig+0x118>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	4619      	mov	r1, r3
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff f9ad 	bl	8006a56 <USBD_ClrClassConfig>
        break;
 80076fc:	bf00      	nop
    }
  }
}
 80076fe:	3708      	adds	r7, #8
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000244 	.word	0x20000244

08007708 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d004      	beq.n	8007724 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8cc 	bl	80078ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007722:	e022      	b.n	800776a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772a:	2b02      	cmp	r3, #2
 800772c:	dc02      	bgt.n	8007734 <USBD_GetConfig+0x2c>
 800772e:	2b00      	cmp	r3, #0
 8007730:	dc03      	bgt.n	800773a <USBD_GetConfig+0x32>
 8007732:	e015      	b.n	8007760 <USBD_GetConfig+0x58>
 8007734:	2b03      	cmp	r3, #3
 8007736:	d00b      	beq.n	8007750 <USBD_GetConfig+0x48>
 8007738:	e012      	b.n	8007760 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3308      	adds	r3, #8
 8007744:	2201      	movs	r2, #1
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f920 	bl	800798e <USBD_CtlSendData>
        break;
 800774e:	e00c      	b.n	800776a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	2201      	movs	r2, #1
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f918 	bl	800798e <USBD_CtlSendData>
        break;
 800775e:	e004      	b.n	800776a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007760:	6839      	ldr	r1, [r7, #0]
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f8a9 	bl	80078ba <USBD_CtlError>
        break;
 8007768:	bf00      	nop
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007782:	3b01      	subs	r3, #1
 8007784:	2b02      	cmp	r3, #2
 8007786:	d81e      	bhi.n	80077c6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	88db      	ldrh	r3, [r3, #6]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d004      	beq.n	800779a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f891 	bl	80078ba <USBD_CtlError>
        break;
 8007798:	e01a      	b.n	80077d0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f043 0202 	orr.w	r2, r3, #2
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	330c      	adds	r3, #12
 80077ba:	2202      	movs	r2, #2
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8e5 	bl	800798e <USBD_CtlSendData>
      break;
 80077c4:	e004      	b.n	80077d0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80077c6:	6839      	ldr	r1, [r7, #0]
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f876 	bl	80078ba <USBD_CtlError>
      break;
 80077ce:	bf00      	nop
  }
}
 80077d0:	bf00      	nop
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d106      	bne.n	80077f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f90b 	bl	8007a0e <USBD_CtlSendStatus>
  }
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007810:	3b01      	subs	r3, #1
 8007812:	2b02      	cmp	r3, #2
 8007814:	d80b      	bhi.n	800782e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	885b      	ldrh	r3, [r3, #2]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d10c      	bne.n	8007838 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f8f1 	bl	8007a0e <USBD_CtlSendStatus>
      }
      break;
 800782c:	e004      	b.n	8007838 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f842 	bl	80078ba <USBD_CtlError>
      break;
 8007836:	e000      	b.n	800783a <USBD_ClrFeature+0x3a>
      break;
 8007838:	bf00      	nop
  }
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781a      	ldrb	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	785a      	ldrb	r2, [r3, #1]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	3302      	adds	r3, #2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b29a      	uxth	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	3303      	adds	r3, #3
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b29b      	uxth	r3, r3
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b29b      	uxth	r3, r3
 8007870:	4413      	add	r3, r2
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	3304      	adds	r3, #4
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b29a      	uxth	r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	3305      	adds	r3, #5
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b29b      	uxth	r3, r3
 800788c:	4413      	add	r3, r2
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3306      	adds	r3, #6
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	b29a      	uxth	r2, r3
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	3307      	adds	r3, #7
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4413      	add	r3, r2
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	80da      	strh	r2, [r3, #6]

}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb6e 	bl	8007fa8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80078cc:	2100      	movs	r1, #0
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fb6a 	bl	8007fa8 <USBD_LL_StallEP>
}
 80078d4:	bf00      	nop
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d032      	beq.n	8007958 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 f834 	bl	8007960 <USBD_GetLen>
 80078f8:	4603      	mov	r3, r0
 80078fa:	3301      	adds	r3, #1
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	75fa      	strb	r2, [r7, #23]
 800790c:	461a      	mov	r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	4413      	add	r3, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	75fa      	strb	r2, [r7, #23]
 800791e:	461a      	mov	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4413      	add	r3, r2
 8007924:	2203      	movs	r2, #3
 8007926:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007928:	e012      	b.n	8007950 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	60fa      	str	r2, [r7, #12]
 8007930:	7dfa      	ldrb	r2, [r7, #23]
 8007932:	1c51      	adds	r1, r2, #1
 8007934:	75f9      	strb	r1, [r7, #23]
 8007936:	4611      	mov	r1, r2
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	440a      	add	r2, r1
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	75fa      	strb	r2, [r7, #23]
 8007946:	461a      	mov	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4413      	add	r3, r2
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e8      	bne.n	800792a <USBD_GetString+0x4e>
    }
  }
}
 8007958:	bf00      	nop
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800796c:	e005      	b.n	800797a <USBD_GetLen+0x1a>
  {
    len++;
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	3301      	adds	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3301      	adds	r3, #1
 8007978:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f5      	bne.n	800796e <USBD_GetLen+0xe>
  }

  return len;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	bc80      	pop	{r7}
 800798c:	4770      	bx	lr

0800798e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	4613      	mov	r3, r2
 800799a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2202      	movs	r2, #2
 80079a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079a4:	88fa      	ldrh	r2, [r7, #6]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079b0:	88fb      	ldrh	r3, [r7, #6]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	2100      	movs	r1, #0
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 fb7f 	bl	80080ba <USBD_LL_Transmit>

  return USBD_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	4613      	mov	r3, r2
 80079d2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079d4:	88fb      	ldrh	r3, [r7, #6]
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	2100      	movs	r1, #0
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 fb6d 	bl	80080ba <USBD_LL_Transmit>

  return USBD_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	60f8      	str	r0, [r7, #12]
 80079f2:	60b9      	str	r1, [r7, #8]
 80079f4:	4613      	mov	r3, r2
 80079f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079f8:	88fb      	ldrh	r3, [r7, #6]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	2100      	movs	r1, #0
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fb7e 	bl	8008100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2204      	movs	r2, #4
 8007a1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2200      	movs	r2, #0
 8007a22:	2100      	movs	r1, #0
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fb48 	bl	80080ba <USBD_LL_Transmit>

  return USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2205      	movs	r2, #5
 8007a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a44:	2300      	movs	r3, #0
 8007a46:	2200      	movs	r2, #0
 8007a48:	2100      	movs	r1, #0
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb58 	bl	8008100 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a60:	2200      	movs	r2, #0
 8007a62:	490e      	ldr	r1, [pc, #56]	; (8007a9c <MX_USB_DEVICE_Init+0x40>)
 8007a64:	480e      	ldr	r0, [pc, #56]	; (8007aa0 <MX_USB_DEVICE_Init+0x44>)
 8007a66:	f7fe ff7d 	bl	8006964 <USBD_Init>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a70:	f7f8 fd02 	bl	8000478 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 8007a74:	490b      	ldr	r1, [pc, #44]	; (8007aa4 <MX_USB_DEVICE_Init+0x48>)
 8007a76:	480a      	ldr	r0, [pc, #40]	; (8007aa0 <MX_USB_DEVICE_Init+0x44>)
 8007a78:	f7fe ff9f 	bl	80069ba <USBD_RegisterClass>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a82:	f7f8 fcf9 	bl	8000478 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a86:	4806      	ldr	r0, [pc, #24]	; (8007aa0 <MX_USB_DEVICE_Init+0x44>)
 8007a88:	f7fe ffb0 	bl	80069ec <USBD_Start>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007a92:	f7f8 fcf1 	bl	8000478 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a96:	bf00      	nop
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	200000a4 	.word	0x200000a4
 8007aa0:	20000248 	.word	0x20000248
 8007aa4:	2000000c 	.word	0x2000000c

08007aa8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2212      	movs	r2, #18
 8007ab8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007aba:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	200000c0 	.word	0x200000c0

08007acc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2204      	movs	r2, #4
 8007adc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ade:	4b03      	ldr	r3, [pc, #12]	; (8007aec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	200000d4 	.word	0x200000d4

08007af0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	6039      	str	r1, [r7, #0]
 8007afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4907      	ldr	r1, [pc, #28]	; (8007b24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b06:	4808      	ldr	r0, [pc, #32]	; (8007b28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b08:	f7ff fee8 	bl	80078dc <USBD_GetString>
 8007b0c:	e004      	b.n	8007b18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4904      	ldr	r1, [pc, #16]	; (8007b24 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b12:	4805      	ldr	r0, [pc, #20]	; (8007b28 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b14:	f7ff fee2 	bl	80078dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b18:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	2000050c 	.word	0x2000050c
 8007b28:	08008260 	.word	0x08008260

08007b2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	6039      	str	r1, [r7, #0]
 8007b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	4904      	ldr	r1, [pc, #16]	; (8007b4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b3c:	4804      	ldr	r0, [pc, #16]	; (8007b50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b3e:	f7ff fecd 	bl	80078dc <USBD_GetString>
  return USBD_StrDesc;
 8007b42:	4b02      	ldr	r3, [pc, #8]	; (8007b4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	2000050c 	.word	0x2000050c
 8007b50:	08008278 	.word	0x08008278

08007b54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	6039      	str	r1, [r7, #0]
 8007b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	221a      	movs	r2, #26
 8007b64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b66:	f000 f843 	bl	8007bf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b6a:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	200000d8 	.word	0x200000d8

08007b78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	6039      	str	r1, [r7, #0]
 8007b82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	4907      	ldr	r1, [pc, #28]	; (8007bac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b8e:	4808      	ldr	r0, [pc, #32]	; (8007bb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b90:	f7ff fea4 	bl	80078dc <USBD_GetString>
 8007b94:	e004      	b.n	8007ba0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	4904      	ldr	r1, [pc, #16]	; (8007bac <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b9a:	4805      	ldr	r0, [pc, #20]	; (8007bb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b9c:	f7ff fe9e 	bl	80078dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ba0:	4b02      	ldr	r3, [pc, #8]	; (8007bac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000050c 	.word	0x2000050c
 8007bb0:	0800828c 	.word	0x0800828c

08007bb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6039      	str	r1, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d105      	bne.n	8007bd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4907      	ldr	r1, [pc, #28]	; (8007be8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bca:	4808      	ldr	r0, [pc, #32]	; (8007bec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bcc:	f7ff fe86 	bl	80078dc <USBD_GetString>
 8007bd0:	e004      	b.n	8007bdc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	4904      	ldr	r1, [pc, #16]	; (8007be8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bd6:	4805      	ldr	r0, [pc, #20]	; (8007bec <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bd8:	f7ff fe80 	bl	80078dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bdc:	4b02      	ldr	r3, [pc, #8]	; (8007be8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	2000050c 	.word	0x2000050c
 8007bec:	08008298 	.word	0x08008298

08007bf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <Get_SerialNum+0x44>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <Get_SerialNum+0x48>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c02:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <Get_SerialNum+0x4c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d009      	beq.n	8007c2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c16:	2208      	movs	r2, #8
 8007c18:	4909      	ldr	r1, [pc, #36]	; (8007c40 <Get_SerialNum+0x50>)
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f000 f814 	bl	8007c48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c20:	2204      	movs	r2, #4
 8007c22:	4908      	ldr	r1, [pc, #32]	; (8007c44 <Get_SerialNum+0x54>)
 8007c24:	68b8      	ldr	r0, [r7, #8]
 8007c26:	f000 f80f 	bl	8007c48 <IntToUnicode>
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	1ffff7e8 	.word	0x1ffff7e8
 8007c38:	1ffff7ec 	.word	0x1ffff7ec
 8007c3c:	1ffff7f0 	.word	0x1ffff7f0
 8007c40:	200000da 	.word	0x200000da
 8007c44:	200000ea 	.word	0x200000ea

08007c48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4613      	mov	r3, r2
 8007c54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75fb      	strb	r3, [r7, #23]
 8007c5e:	e027      	b.n	8007cb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	0f1b      	lsrs	r3, r3, #28
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d80b      	bhi.n	8007c80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	0f1b      	lsrs	r3, r3, #28
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	4619      	mov	r1, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	440b      	add	r3, r1
 8007c78:	3230      	adds	r2, #48	; 0x30
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	e00a      	b.n	8007c96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	0f1b      	lsrs	r3, r3, #28
 8007c84:	b2da      	uxtb	r2, r3
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	440b      	add	r3, r1
 8007c90:	3237      	adds	r2, #55	; 0x37
 8007c92:	b2d2      	uxtb	r2, r2
 8007c94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
 8007cac:	3301      	adds	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
 8007cb0:	7dfa      	ldrb	r2, [r7, #23]
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d3d3      	bcc.n	8007c60 <IntToUnicode+0x18>
  }
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a0d      	ldr	r2, [pc, #52]	; (8007d08 <HAL_PCD_MspInit+0x44>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d113      	bne.n	8007cfe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <HAL_PCD_MspInit+0x48>)
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	4a0c      	ldr	r2, [pc, #48]	; (8007d0c <HAL_PCD_MspInit+0x48>)
 8007cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ce0:	61d3      	str	r3, [r2, #28]
 8007ce2:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <HAL_PCD_MspInit+0x48>)
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	2014      	movs	r0, #20
 8007cf4:	f7f9 f997 	bl	8001026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007cf8:	2014      	movs	r0, #20
 8007cfa:	f7f9 f9b0 	bl	800105e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40005c00 	.word	0x40005c00
 8007d0c:	40021000 	.word	0x40021000

08007d10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fe fea8 	bl	8006a7c <USBD_LL_SetupStage>
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	6879      	ldr	r1, [r7, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	440b      	add	r3, r1
 8007d54:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	78fb      	ldrb	r3, [r7, #3]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	f7fe feda 	bl	8006b16 <USBD_LL_DataOutStage>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	440b      	add	r3, r1
 8007d8a:	333c      	adds	r3, #60	; 0x3c
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f7fe ff31 	bl	8006bf8 <USBD_LL_DataInStage>
}
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff f841 	bl	8006e34 <USBD_LL_SOF>
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d001      	beq.n	8007dd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dce:	f7f8 fb53 	bl	8000478 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007dd8:	7bfa      	ldrb	r2, [r7, #15]
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fff1 	bl	8006dc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe ffaa 	bl	8006d42 <USBD_LL_Reset>
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe ffeb 	bl	8006de2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <HAL_PCD_SuspendCallback+0x30>)
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	4a03      	ldr	r2, [pc, #12]	; (8007e28 <HAL_PCD_SuspendCallback+0x30>)
 8007e1a:	f043 0306 	orr.w	r3, r3, #6
 8007e1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	e000ed00 	.word	0xe000ed00

08007e2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe ffe5 	bl	8006e0a <USBD_LL_Resume>
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e50:	4a23      	ldr	r2, [pc, #140]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a21      	ldr	r2, [pc, #132]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e60:	4b1f      	ldr	r3, [pc, #124]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e62:	4a20      	ldr	r2, [pc, #128]	; (8007ee4 <USBD_LL_Init+0x9c>)
 8007e64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e66:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e68:	2208      	movs	r2, #8
 8007e6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e6e:	2202      	movs	r2, #2
 8007e70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e78:	4b19      	ldr	r3, [pc, #100]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e7e:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e84:	4816      	ldr	r0, [pc, #88]	; (8007ee0 <USBD_LL_Init+0x98>)
 8007e86:	f7f9 fbe5 	bl	8001654 <HAL_PCD_Init>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007e90:	f7f8 faf2 	bl	8000478 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e9a:	2318      	movs	r3, #24
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	f7fb f842 	bl	8002f28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eaa:	2358      	movs	r3, #88	; 0x58
 8007eac:	2200      	movs	r2, #0
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	f7fb f83a 	bl	8002f28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */ // You may replace HID with MIDI for more convenience, but code generator will not keep it on next code generate
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xC0); // add this line
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eba:	23c0      	movs	r3, #192	; 0xc0
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	f7fb f832 	bl	8002f28 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100); // leave this line as is
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2181      	movs	r1, #129	; 0x81
 8007ed2:	f7fb f829 	bl	8002f28 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	2000070c 	.word	0x2000070c
 8007ee4:	40005c00 	.word	0x40005c00

08007ee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f9 fcb3 	bl	800186a <HAL_PCD_Start>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f93c 	bl	8008188 <USBD_Get_USB_Status>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	70fb      	strb	r3, [r7, #3]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70bb      	strb	r3, [r7, #2]
 8007f34:	4613      	mov	r3, r2
 8007f36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f46:	78bb      	ldrb	r3, [r7, #2]
 8007f48:	883a      	ldrh	r2, [r7, #0]
 8007f4a:	78f9      	ldrb	r1, [r7, #3]
 8007f4c:	f7f9 fe2b 	bl	8001ba6 <HAL_PCD_EP_Open>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f916 	bl	8008188 <USBD_Get_USB_Status>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7f9 fe72 	bl	8001c72 <HAL_PCD_EP_Close>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f8f7 	bl	8008188 <USBD_Get_USB_Status>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc2:	78fa      	ldrb	r2, [r7, #3]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7f9 ff1b 	bl	8001e02 <HAL_PCD_EP_SetStall>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f8d8 	bl	8008188 <USBD_Get_USB_Status>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f7f9 ff5c 	bl	8001ec2 <HAL_PCD_EP_ClrStall>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f8b9 	bl	8008188 <USBD_Get_USB_Status>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801a:	7bbb      	ldrb	r3, [r7, #14]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008036:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da0c      	bge.n	800805a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	4613      	mov	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	440b      	add	r3, r1
 8008054:	3302      	adds	r3, #2
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	e00b      	b.n	8008072 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008060:	68f9      	ldr	r1, [r7, #12]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	00db      	lsls	r3, r3, #3
 800806a:	440b      	add	r3, r1
 800806c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008070:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr

0800807c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f7f9 fd5e 	bl	8001b5c <HAL_PCD_SetAddress>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f86e 	bl	8008188 <USBD_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	461a      	mov	r2, r3
 80080c6:	460b      	mov	r3, r1
 80080c8:	72fb      	strb	r3, [r7, #11]
 80080ca:	4613      	mov	r3, r2
 80080cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080dc:	893b      	ldrh	r3, [r7, #8]
 80080de:	7af9      	ldrb	r1, [r7, #11]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	f7f9 fe4b 	bl	8001d7c <HAL_PCD_EP_Transmit>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 f84b 	bl	8008188 <USBD_Get_USB_Status>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	461a      	mov	r2, r3
 800810c:	460b      	mov	r3, r1
 800810e:	72fb      	strb	r3, [r7, #11]
 8008110:	4613      	mov	r3, r2
 8008112:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008122:	893b      	ldrh	r3, [r7, #8]
 8008124:	7af9      	ldrb	r1, [r7, #11]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	f7f9 fdeb 	bl	8001d02 <HAL_PCD_EP_Receive>
 800812c:	4603      	mov	r3, r0
 800812e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	4618      	mov	r0, r3
 8008134:	f000 f828 	bl	8008188 <USBD_Get_USB_Status>
 8008138:	4603      	mov	r3, r0
 800813a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800813c:	7dbb      	ldrb	r3, [r7, #22]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MIDI_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008150:	4b02      	ldr	r3, [pc, #8]	; (800815c <USBD_static_malloc+0x14>)
}
 8008152:	4618      	mov	r0, r3
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr
 800815c:	200009f8 	.word	0x200009f8

08008160 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]

}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	bc80      	pop	{r7}
 8008170:	4770      	bx	lr

08008172 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	460b      	mov	r3, r1
 800817c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	2b03      	cmp	r3, #3
 800819a:	d817      	bhi.n	80081cc <USBD_Get_USB_Status+0x44>
 800819c:	a201      	add	r2, pc, #4	; (adr r2, 80081a4 <USBD_Get_USB_Status+0x1c>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081bb 	.word	0x080081bb
 80081ac:	080081c1 	.word	0x080081c1
 80081b0:	080081c7 	.word	0x080081c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
    break;
 80081b8:	e00b      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081ba:	2302      	movs	r3, #2
 80081bc:	73fb      	strb	r3, [r7, #15]
    break;
 80081be:	e008      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	e005      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081c6:	2302      	movs	r3, #2
 80081c8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ca:	e002      	b.n	80081d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081cc:	2302      	movs	r3, #2
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	bf00      	nop
  }
  return usb_status;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop

080081e0 <__libc_init_array>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	2600      	movs	r6, #0
 80081e4:	4d0c      	ldr	r5, [pc, #48]	; (8008218 <__libc_init_array+0x38>)
 80081e6:	4c0d      	ldr	r4, [pc, #52]	; (800821c <__libc_init_array+0x3c>)
 80081e8:	1b64      	subs	r4, r4, r5
 80081ea:	10a4      	asrs	r4, r4, #2
 80081ec:	42a6      	cmp	r6, r4
 80081ee:	d109      	bne.n	8008204 <__libc_init_array+0x24>
 80081f0:	f000 f822 	bl	8008238 <_init>
 80081f4:	2600      	movs	r6, #0
 80081f6:	4d0a      	ldr	r5, [pc, #40]	; (8008220 <__libc_init_array+0x40>)
 80081f8:	4c0a      	ldr	r4, [pc, #40]	; (8008224 <__libc_init_array+0x44>)
 80081fa:	1b64      	subs	r4, r4, r5
 80081fc:	10a4      	asrs	r4, r4, #2
 80081fe:	42a6      	cmp	r6, r4
 8008200:	d105      	bne.n	800820e <__libc_init_array+0x2e>
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	f855 3b04 	ldr.w	r3, [r5], #4
 8008208:	4798      	blx	r3
 800820a:	3601      	adds	r6, #1
 800820c:	e7ee      	b.n	80081ec <__libc_init_array+0xc>
 800820e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008212:	4798      	blx	r3
 8008214:	3601      	adds	r6, #1
 8008216:	e7f2      	b.n	80081fe <__libc_init_array+0x1e>
 8008218:	080082c0 	.word	0x080082c0
 800821c:	080082c0 	.word	0x080082c0
 8008220:	080082c0 	.word	0x080082c0
 8008224:	080082c8 	.word	0x080082c8

08008228 <memset>:
 8008228:	4603      	mov	r3, r0
 800822a:	4402      	add	r2, r0
 800822c:	4293      	cmp	r3, r2
 800822e:	d100      	bne.n	8008232 <memset+0xa>
 8008230:	4770      	bx	lr
 8008232:	f803 1b01 	strb.w	r1, [r3], #1
 8008236:	e7f9      	b.n	800822c <memset+0x4>

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
