
Midi_Hand_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08008b70  08008b70  00018b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c24  08008c24  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008c24  08008c24  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c24  08008c24  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08008c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c4  200001c8  08008df4  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a8c  08008df4  00020a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e9c  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f3c  00000000  00000000  0003208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00034fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  00035fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca1a  00000000  00000000  00036e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b33  00000000  00000000  000538aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906e5  00000000  00000000  000683dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004550  00000000  00000000  000f8b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c8 	.word	0x200001c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008b58 	.word	0x08008b58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001cc 	.word	0x200001cc
 8000148:	08008b58 	.word	0x08008b58

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb19 	bl	8000788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f81f 	bl	8000198 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f933 	bl	80003c4 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800015e:	f000 f887 	bl	8000270 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000162:	f000 f8cd 	bl	8000300 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 8000166:	f000 f8ff 	bl	8000368 <_ZL19MX_USART1_UART_Initv>
  MX_USB_DEVICE_Init();
 800016a:	f007 fc8f 	bl	8007a8c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    char buffer[20];		
    sprintf(buffer, "Hello World\r\n");
 800016e:	1d3b      	adds	r3, r7, #4
 8000170:	4907      	ldr	r1, [pc, #28]	; (8000190 <main+0x44>)
 8000172:	4618      	mov	r0, r3
 8000174:	f008 f876 	bl	8008264 <siprintf>
    HAL_UART_Transmit(&huart1,(uint8_t*)buffer,sizeof(buffer),10);// Sending in normal mode
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	230a      	movs	r3, #10
 800017c:	2214      	movs	r2, #20
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <main+0x48>)
 8000180:	f003 fb39 	bl	80037f6 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000184:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000188:	f000 fb60 	bl	800084c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800018c:	e7ef      	b.n	800016e <main+0x22>
 800018e:	bf00      	nop
 8000190:	08008b70 	.word	0x08008b70
 8000194:	20000268 	.word	0x20000268

08000198 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b094      	sub	sp, #80	; 0x50
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f008 f854 	bl	8008254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	f107 0314 	add.w	r3, r7, #20
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 fde4 	bl	8002dbc <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	bf14      	ite	ne
 80001fa:	2301      	movne	r3, #1
 80001fc:	2300      	moveq	r3, #0
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000204:	f000 f92e 	bl	8000464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000208:	230f      	movs	r3, #15
 800020a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020c:	2302      	movs	r3, #2
 800020e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000218:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2102      	movs	r1, #2
 8000224:	4618      	mov	r0, r3
 8000226:	f003 f84b 	bl	80032c0 <HAL_RCC_ClockConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	bf14      	ite	ne
 8000230:	2301      	movne	r3, #1
 8000232:	2300      	moveq	r3, #0
 8000234:	b2db      	uxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 800023a:	f000 f913 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800023e:	2312      	movs	r3, #18
 8000240:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000246:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000248:	2300      	movs	r3, #0
 800024a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f003 f9ce 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	bf14      	ite	ne
 800025a:	2301      	movne	r3, #1
 800025c:	2300      	moveq	r3, #0
 800025e:	b2db      	uxtb	r3, r3
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 8000264:	f000 f8fe 	bl	8000464 <Error_Handler>
  }
}
 8000268:	bf00      	nop
 800026a:	3750      	adds	r7, #80	; 0x50
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000280:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 8000282:	4a1e      	ldr	r2, [pc, #120]	; (80002fc <_ZL12MX_ADC1_Initv+0x8c>)
 8000284:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000286:	4b1c      	ldr	r3, [pc, #112]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 800028e:	2201      	movs	r2, #1
 8000290:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 8000294:	2200      	movs	r2, #0
 8000296:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 800029a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800029e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ac:	4812      	ldr	r0, [pc, #72]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 80002ae:	f000 faf1 	bl	8000894 <HAL_ADC_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	bf14      	ite	ne
 80002b8:	2301      	movne	r3, #1
 80002ba:	2300      	moveq	r3, #0
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 80002c2:	f000 f8cf 	bl	8000464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4619      	mov	r1, r3
 80002d6:	4808      	ldr	r0, [pc, #32]	; (80002f8 <_ZL12MX_ADC1_Initv+0x88>)
 80002d8:	f000 fbb4 	bl	8000a44 <HAL_ADC_ConfigChannel>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	bf14      	ite	ne
 80002e2:	2301      	movne	r3, #1
 80002e4:	2300      	moveq	r3, #0
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 80002ec:	f000 f8ba 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	200001e4 	.word	0x200001e4
 80002fc:	40012400 	.word	0x40012400

08000300 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 8000306:	4a16      	ldr	r2, [pc, #88]	; (8000360 <_ZL12MX_I2C1_Initv+0x60>)
 8000308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 800030c:	4a15      	ldr	r2, [pc, #84]	; (8000364 <_ZL12MX_I2C1_Initv+0x64>)
 800030e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 800031e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 8000326:	2200      	movs	r2, #0
 8000328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <_ZL12MX_I2C1_Initv+0x5c>)
 800033e:	f000 ff4d 	bl	80011dc <HAL_I2C_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	bf14      	ite	ne
 8000348:	2301      	movne	r3, #1
 800034a:	2300      	moveq	r3, #0
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000352:	f000 f887 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000214 	.word	0x20000214
 8000360:	40005400 	.word	0x40005400
 8000364:	000186a0 	.word	0x000186a0

08000368 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800036e:	4a14      	ldr	r2, [pc, #80]	; (80003c0 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8000374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037a:	4b10      	ldr	r3, [pc, #64]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000380:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8000382:	2200      	movs	r2, #0
 8000384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800038e:	220c      	movs	r2, #12
 8000390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039e:	4807      	ldr	r0, [pc, #28]	; (80003bc <_ZL19MX_USART1_UART_Initv+0x54>)
 80003a0:	f003 f9dc 	bl	800375c <HAL_UART_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	bf14      	ite	ne
 80003aa:	2301      	movne	r3, #1
 80003ac:	2300      	moveq	r3, #0
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80003b4:	f000 f856 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000268 	.word	0x20000268
 80003c0:	40013800 	.word	0x40013800

080003c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b19      	ldr	r3, [pc, #100]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a18      	ldr	r2, [pc, #96]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a12      	ldr	r2, [pc, #72]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b10      	ldr	r3, [pc, #64]	; (8000458 <_ZL12MX_GPIO_Initv+0x94>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RE0_A_Pin RE0_B_Pin RE0_SW_Pin RE1_A_Pin
                           RE1_B_Pin */
  GPIO_InitStruct.Pin = RE0_A_Pin|RE0_B_Pin|RE0_SW_Pin|RE1_A_Pin
 8000420:	23f8      	movs	r3, #248	; 0xf8
 8000422:	613b      	str	r3, [r7, #16]
                          |RE1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000428:	2301      	movs	r3, #1
 800042a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	480a      	ldr	r0, [pc, #40]	; (800045c <_ZL12MX_GPIO_Initv+0x98>)
 8000434:	f000 fd4e 	bl	8000ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RE1_SW_Pin */
  GPIO_InitStruct.Pin = RE1_SW_Pin;
 8000438:	2301      	movs	r3, #1
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000440:	2301      	movs	r3, #1
 8000442:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RE1_SW_GPIO_Port, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <_ZL12MX_GPIO_Initv+0x9c>)
 800044c:	f000 fd42 	bl	8000ed4 <HAL_GPIO_Init>

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800
 8000460:	40010c00 	.word	0x40010c00

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
}
 800046a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046c:	e7fe      	b.n	800046c <Error_Handler+0x8>
	...

08000470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <HAL_MspInit+0x5c>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a14      	ldr	r2, [pc, #80]	; (80004cc <HAL_MspInit+0x5c>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048e:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <HAL_MspInit+0x5c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a0e      	ldr	r2, [pc, #56]	; (80004cc <HAL_MspInit+0x5c>)
 8000494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <HAL_MspInit+0x60>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <HAL_MspInit+0x60>)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010000 	.word	0x40010000

080004d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <HAL_ADC_MspInit+0x6c>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d121      	bne.n	8000538 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <HAL_ADC_MspInit+0x70>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <HAL_ADC_MspInit+0x70>)
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <HAL_ADC_MspInit+0x70>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <HAL_ADC_MspInit+0x70>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a0c      	ldr	r2, [pc, #48]	; (8000544 <HAL_ADC_MspInit+0x70>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_ADC_MspInit+0x70>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000524:	2303      	movs	r3, #3
 8000526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000528:	2303      	movs	r3, #3
 800052a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_ADC_MspInit+0x74>)
 8000534:	f000 fcce 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40012400 	.word	0x40012400
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800

0800054c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a15      	ldr	r2, [pc, #84]	; (80005bc <HAL_I2C_MspInit+0x70>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d123      	bne.n	80005b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <HAL_I2C_MspInit+0x74>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <HAL_I2C_MspInit+0x74>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <HAL_I2C_MspInit+0x74>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0308 	and.w	r3, r3, #8
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000584:	23c0      	movs	r3, #192	; 0xc0
 8000586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000588:	2312      	movs	r3, #18
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800058c:	2303      	movs	r3, #3
 800058e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	480b      	ldr	r0, [pc, #44]	; (80005c4 <HAL_I2C_MspInit+0x78>)
 8000598:	f000 fc9c 	bl	8000ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_I2C_MspInit+0x74>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_I2C_MspInit+0x74>)
 80005a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a6:	61d3      	str	r3, [r2, #28]
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_I2C_MspInit+0x74>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005b4:	bf00      	nop
 80005b6:	3720      	adds	r7, #32
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40005400 	.word	0x40005400
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010c00 	.word	0x40010c00

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <HAL_UART_MspInit+0x8c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d131      	bne.n	800064c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_UART_MspInit+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_UART_MspInit+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_UART_MspInit+0x90>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_UART_MspInit+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800061c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_UART_MspInit+0x94>)
 800062e:	f000 fc51 	bl	8000ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <HAL_UART_MspInit+0x94>)
 8000648:	f000 fc44 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40013800 	.word	0x40013800
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f8b5 	bl	8000814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80006b6:	f001 f806 	bl	80016c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000077c 	.word	0x2000077c

080006c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006cc:	4a14      	ldr	r2, [pc, #80]	; (8000720 <_sbrk+0x5c>)
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <_sbrk+0x60>)
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <_sbrk+0x64>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <_sbrk+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f4:	f007 fd84 	bl	8008200 <__errno>
 80006f8:	4603      	mov	r3, r0
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000702:	e009      	b.n	8000718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <_sbrk+0x64>)
 8000714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20005000 	.word	0x20005000
 8000724:	00000400 	.word	0x00000400
 8000728:	200002ac 	.word	0x200002ac
 800072c:	20000a90 	.word	0x20000a90

08000730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000762:	f7ff ffe5 	bl	8000730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000766:	f007 fd51 	bl	800820c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fcef 	bl	800014c <main>
  bx lr
 800076e:	4770      	bx	lr
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000778:	08008c2c 	.word	0x08008c2c
  ldr r2, =_sbss
 800077c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000780:	20000a8c 	.word	0x20000a8c

08000784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC1_2_IRQHandler>
	...

08000788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_Init+0x28>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_Init+0x28>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000798:	2003      	movs	r0, #3
 800079a:	f000 fb59 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079e:	200f      	movs	r0, #15
 80007a0:	f000 f808 	bl	80007b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a4:	f7ff fe64 	bl	8000470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x54>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x58>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fb71 	bl	8000eba <HAL_SYSTICK_Config>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e00e      	b.n	8000800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d80a      	bhi.n	80007fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e8:	2200      	movs	r2, #0
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f0:	f000 fb39 	bl	8000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_InitTick+0x5c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e000      	b.n	8000800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000000 	.word	0x20000000
 800080c:	20000008 	.word	0x20000008
 8000810:	20000004 	.word	0x20000004

08000814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_IncTick+0x1c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_IncTick+0x20>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4413      	add	r3, r2
 8000824:	4a03      	ldr	r2, [pc, #12]	; (8000834 <HAL_IncTick+0x20>)
 8000826:	6013      	str	r3, [r2, #0]
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000008 	.word	0x20000008
 8000834:	200002b0 	.word	0x200002b0

08000838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <HAL_GetTick+0x10>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	200002b0 	.word	0x200002b0

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff fff0 	bl	8000838 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffe0 	bl	8000838 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d101      	bne.n	80008b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e0be      	b.n	8000a34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d109      	bne.n	80008d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fdfe 	bl	80004d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f9ab 	bl	8000c34 <ADC_ConversionStop_Disable>
 80008de:	4603      	mov	r3, r0
 80008e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f040 8099 	bne.w	8000a22 <HAL_ADC_Init+0x18e>
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f040 8095 	bne.w	8000a22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000900:	f023 0302 	bic.w	r3, r3, #2
 8000904:	f043 0202 	orr.w	r2, r3, #2
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000914:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7b1b      	ldrb	r3, [r3, #12]
 800091a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800091c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	4313      	orrs	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800092c:	d003      	beq.n	8000936 <HAL_ADC_Init+0xa2>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d102      	bne.n	800093c <HAL_ADC_Init+0xa8>
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	e000      	b.n	800093e <HAL_ADC_Init+0xaa>
 800093c:	2300      	movs	r3, #0
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7d1b      	ldrb	r3, [r3, #20]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d119      	bne.n	8000980 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7b1b      	ldrb	r3, [r3, #12]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d109      	bne.n	8000968 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	3b01      	subs	r3, #1
 800095a:	035a      	lsls	r2, r3, #13
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	4313      	orrs	r3, r2
 8000960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	e00b      	b.n	8000980 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	f043 0220 	orr.w	r2, r3, #32
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	f043 0201 	orr.w	r2, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	430a      	orrs	r2, r1
 8000992:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <HAL_ADC_Init+0x1a8>)
 800099c:	4013      	ands	r3, r2
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	430b      	orrs	r3, r1
 80009a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009b0:	d003      	beq.n	80009ba <HAL_ADC_Init+0x126>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d104      	bne.n	80009c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	3b01      	subs	r3, #1
 80009c0:	051b      	lsls	r3, r3, #20
 80009c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_ADC_Init+0x1ac>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d10b      	bne.n	8000a00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	f023 0303 	bic.w	r3, r3, #3
 80009f6:	f043 0201 	orr.w	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009fe:	e018      	b.n	8000a32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a04:	f023 0312 	bic.w	r3, r3, #18
 8000a08:	f043 0210 	orr.w	r2, r3, #16
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a14:	f043 0201 	orr.w	r2, r3, #1
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a20:	e007      	b.n	8000a32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	f043 0210 	orr.w	r2, r3, #16
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a40:	ff1f0efe 	.word	0xff1f0efe

08000a44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <HAL_ADC_ConfigChannel+0x20>
 8000a60:	2302      	movs	r3, #2
 8000a62:	e0dc      	b.n	8000c1e <HAL_ADC_ConfigChannel+0x1da>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	d81c      	bhi.n	8000aae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	3b05      	subs	r3, #5
 8000a86:	221f      	movs	r2, #31
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4019      	ands	r1, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4413      	add	r3, r2
 8000a9e:	3b05      	subs	r3, #5
 8000aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
 8000aac:	e03c      	b.n	8000b28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b0c      	cmp	r3, #12
 8000ab4:	d81c      	bhi.n	8000af0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	3b23      	subs	r3, #35	; 0x23
 8000ac8:	221f      	movs	r2, #31
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	4019      	ands	r1, r3
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	3b23      	subs	r3, #35	; 0x23
 8000ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
 8000aee:	e01b      	b.n	8000b28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	4613      	mov	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	3b41      	subs	r3, #65	; 0x41
 8000b02:	221f      	movs	r2, #31
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	4019      	ands	r1, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	3b41      	subs	r3, #65	; 0x41
 8000b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	430a      	orrs	r2, r1
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b09      	cmp	r3, #9
 8000b2e:	d91c      	bls.n	8000b6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68d9      	ldr	r1, [r3, #12]
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	3b1e      	subs	r3, #30
 8000b42:	2207      	movs	r2, #7
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	4019      	ands	r1, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	6898      	ldr	r0, [r3, #8]
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	3b1e      	subs	r3, #30
 8000b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	e019      	b.n	8000b9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6919      	ldr	r1, [r3, #16]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4613      	mov	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	4413      	add	r3, r2
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	4019      	ands	r1, r3
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	6898      	ldr	r0, [r3, #8]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	fa00 f203 	lsl.w	r2, r0, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b10      	cmp	r3, #16
 8000ba4:	d003      	beq.n	8000bae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000baa:	2b11      	cmp	r3, #17
 8000bac:	d132      	bne.n	8000c14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d125      	bne.n	8000c04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d126      	bne.n	8000c14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000bd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b10      	cmp	r3, #16
 8000bdc:	d11a      	bne.n	8000c14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_ADC_ConfigChannel+0x1e8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_ADC_ConfigChannel+0x1ec>)
 8000be4:	fba2 2303 	umull	r2, r3, r2, r3
 8000be8:	0c9a      	lsrs	r2, r3, #18
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bf4:	e002      	b.n	8000bfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1f9      	bne.n	8000bf6 <HAL_ADC_ConfigChannel+0x1b2>
 8000c02:	e007      	b.n	8000c14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c08:	f043 0220 	orr.w	r2, r3, #32
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40012400 	.word	0x40012400
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	431bde83 	.word	0x431bde83

08000c34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d12e      	bne.n	8000cac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689a      	ldr	r2, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f022 0201 	bic.w	r2, r2, #1
 8000c5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c5e:	f7ff fdeb 	bl	8000838 <HAL_GetTick>
 8000c62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c64:	e01b      	b.n	8000c9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c66:	f7ff fde7 	bl	8000838 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d914      	bls.n	8000c9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d10d      	bne.n	8000c9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c86:	f043 0210 	orr.w	r2, r3, #16
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	f043 0201 	orr.w	r2, r3, #1
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e007      	b.n	8000cae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d0dc      	beq.n	8000c66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4906      	ldr	r1, [pc, #24]	; (8000d50 <__NVIC_EnableIRQ+0x34>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e30:	f7ff ff90 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff2d 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff42 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff90 	bl	8000da8 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5f 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff35 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa2 	bl	8000e0c <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b08b      	sub	sp, #44	; 0x2c
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	e169      	b.n	80011bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 8158 	bne.w	80011b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	4a9a      	ldr	r2, [pc, #616]	; (8001174 <HAL_GPIO_Init+0x2a0>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d05e      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f10:	4a98      	ldr	r2, [pc, #608]	; (8001174 <HAL_GPIO_Init+0x2a0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d875      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f16:	4a98      	ldr	r2, [pc, #608]	; (8001178 <HAL_GPIO_Init+0x2a4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d058      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f1c:	4a96      	ldr	r2, [pc, #600]	; (8001178 <HAL_GPIO_Init+0x2a4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d86f      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f22:	4a96      	ldr	r2, [pc, #600]	; (800117c <HAL_GPIO_Init+0x2a8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d052      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f28:	4a94      	ldr	r2, [pc, #592]	; (800117c <HAL_GPIO_Init+0x2a8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d869      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f2e:	4a94      	ldr	r2, [pc, #592]	; (8001180 <HAL_GPIO_Init+0x2ac>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d04c      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f34:	4a92      	ldr	r2, [pc, #584]	; (8001180 <HAL_GPIO_Init+0x2ac>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d863      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f3a:	4a92      	ldr	r2, [pc, #584]	; (8001184 <HAL_GPIO_Init+0x2b0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d046      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
 8000f40:	4a90      	ldr	r2, [pc, #576]	; (8001184 <HAL_GPIO_Init+0x2b0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d85d      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d82a      	bhi.n	8000fa0 <HAL_GPIO_Init+0xcc>
 8000f4a:	2b12      	cmp	r3, #18
 8000f4c:	d859      	bhi.n	8001002 <HAL_GPIO_Init+0x12e>
 8000f4e:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <HAL_GPIO_Init+0x80>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000fcf 	.word	0x08000fcf
 8000f58:	08000fa9 	.word	0x08000fa9
 8000f5c:	08000fbb 	.word	0x08000fbb
 8000f60:	08000ffd 	.word	0x08000ffd
 8000f64:	08001003 	.word	0x08001003
 8000f68:	08001003 	.word	0x08001003
 8000f6c:	08001003 	.word	0x08001003
 8000f70:	08001003 	.word	0x08001003
 8000f74:	08001003 	.word	0x08001003
 8000f78:	08001003 	.word	0x08001003
 8000f7c:	08001003 	.word	0x08001003
 8000f80:	08001003 	.word	0x08001003
 8000f84:	08001003 	.word	0x08001003
 8000f88:	08001003 	.word	0x08001003
 8000f8c:	08001003 	.word	0x08001003
 8000f90:	08001003 	.word	0x08001003
 8000f94:	08001003 	.word	0x08001003
 8000f98:	08000fb1 	.word	0x08000fb1
 8000f9c:	08000fc5 	.word	0x08000fc5
 8000fa0:	4a79      	ldr	r2, [pc, #484]	; (8001188 <HAL_GPIO_Init+0x2b4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fa6:	e02c      	b.n	8001002 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e029      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	623b      	str	r3, [r7, #32]
          break;
 8000fb8:	e024      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	3308      	adds	r3, #8
 8000fc0:	623b      	str	r3, [r7, #32]
          break;
 8000fc2:	e01f      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	330c      	adds	r3, #12
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e01a      	b.n	8001004 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e013      	b.n	8001004 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d105      	bne.n	8000ff0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	611a      	str	r2, [r3, #16]
          break;
 8000fee:	e009      	b.n	8001004 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	615a      	str	r2, [r3, #20]
          break;
 8000ffa:	e003      	b.n	8001004 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x130>
          break;
 8001002:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2bff      	cmp	r3, #255	; 0xff
 8001008:	d801      	bhi.n	800100e <HAL_GPIO_Init+0x13a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	e001      	b.n	8001012 <HAL_GPIO_Init+0x13e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3304      	adds	r3, #4
 8001012:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2bff      	cmp	r3, #255	; 0xff
 8001018:	d802      	bhi.n	8001020 <HAL_GPIO_Init+0x14c>
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	e002      	b.n	8001026 <HAL_GPIO_Init+0x152>
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	3b08      	subs	r3, #8
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	210f      	movs	r1, #15
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	401a      	ands	r2, r3
 8001038:	6a39      	ldr	r1, [r7, #32]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80b1 	beq.w	80011b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001054:	4b4d      	ldr	r3, [pc, #308]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a4c      	ldr	r2, [pc, #304]	; (800118c <HAL_GPIO_Init+0x2b8>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b4a      	ldr	r3, [pc, #296]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800106c:	4a48      	ldr	r2, [pc, #288]	; (8001190 <HAL_GPIO_Init+0x2bc>)
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a40      	ldr	r2, [pc, #256]	; (8001194 <HAL_GPIO_Init+0x2c0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d013      	beq.n	80010c0 <HAL_GPIO_Init+0x1ec>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3f      	ldr	r2, [pc, #252]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d00d      	beq.n	80010bc <HAL_GPIO_Init+0x1e8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a3e      	ldr	r2, [pc, #248]	; (800119c <HAL_GPIO_Init+0x2c8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x1e4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3d      	ldr	r2, [pc, #244]	; (80011a0 <HAL_GPIO_Init+0x2cc>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d101      	bne.n	80010b4 <HAL_GPIO_Init+0x1e0>
 80010b0:	2303      	movs	r3, #3
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010b4:	2304      	movs	r3, #4
 80010b6:	e004      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010b8:	2302      	movs	r3, #2
 80010ba:	e002      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010bc:	2301      	movs	r3, #1
 80010be:	e000      	b.n	80010c2 <HAL_GPIO_Init+0x1ee>
 80010c0:	2300      	movs	r3, #0
 80010c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c4:	f002 0203 	and.w	r2, r2, #3
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	4093      	lsls	r3, r2
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d2:	492f      	ldr	r1, [pc, #188]	; (8001190 <HAL_GPIO_Init+0x2bc>)
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	492c      	ldr	r1, [pc, #176]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4928      	ldr	r1, [pc, #160]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001104:	4013      	ands	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	4922      	ldr	r1, [pc, #136]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	43db      	mvns	r3, r3
 800112a:	491e      	ldr	r1, [pc, #120]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 800112c:	4013      	ands	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	4918      	ldr	r1, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	608b      	str	r3, [r1, #8]
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	43db      	mvns	r3, r3
 8001152:	4914      	ldr	r1, [pc, #80]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001154:	4013      	ands	r3, r2
 8001156:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d021      	beq.n	80011a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	490e      	ldr	r1, [pc, #56]	; (80011a4 <HAL_GPIO_Init+0x2d0>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	60cb      	str	r3, [r1, #12]
 8001170:	e021      	b.n	80011b6 <HAL_GPIO_Init+0x2e2>
 8001172:	bf00      	nop
 8001174:	10320000 	.word	0x10320000
 8001178:	10310000 	.word	0x10310000
 800117c:	10220000 	.word	0x10220000
 8001180:	10210000 	.word	0x10210000
 8001184:	10120000 	.word	0x10120000
 8001188:	10110000 	.word	0x10110000
 800118c:	40021000 	.word	0x40021000
 8001190:	40010000 	.word	0x40010000
 8001194:	40010800 	.word	0x40010800
 8001198:	40010c00 	.word	0x40010c00
 800119c:	40011000 	.word	0x40011000
 80011a0:	40011400 	.word	0x40011400
 80011a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_GPIO_Init+0x304>)
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4909      	ldr	r1, [pc, #36]	; (80011d8 <HAL_GPIO_Init+0x304>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	3301      	adds	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	fa22 f303 	lsr.w	r3, r2, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f47f ae8e 	bne.w	8000ee8 <HAL_GPIO_Init+0x14>
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	372c      	adds	r7, #44	; 0x2c
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e12b      	b.n	8001446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f9a2 	bl	800054c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2224      	movs	r2, #36	; 0x24
 800120c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800122e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001240:	f002 f990 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8001244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a81      	ldr	r2, [pc, #516]	; (8001450 <HAL_I2C_Init+0x274>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d807      	bhi.n	8001260 <HAL_I2C_Init+0x84>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a80      	ldr	r2, [pc, #512]	; (8001454 <HAL_I2C_Init+0x278>)
 8001254:	4293      	cmp	r3, r2
 8001256:	bf94      	ite	ls
 8001258:	2301      	movls	r3, #1
 800125a:	2300      	movhi	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	e006      	b.n	800126e <HAL_I2C_Init+0x92>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4a7d      	ldr	r2, [pc, #500]	; (8001458 <HAL_I2C_Init+0x27c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	bf94      	ite	ls
 8001268:	2301      	movls	r3, #1
 800126a:	2300      	movhi	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e0e7      	b.n	8001446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4a78      	ldr	r2, [pc, #480]	; (800145c <HAL_I2C_Init+0x280>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0c9b      	lsrs	r3, r3, #18
 8001280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	430a      	orrs	r2, r1
 8001294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a6a      	ldr	r2, [pc, #424]	; (8001450 <HAL_I2C_Init+0x274>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d802      	bhi.n	80012b0 <HAL_I2C_Init+0xd4>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3301      	adds	r3, #1
 80012ae:	e009      	b.n	80012c4 <HAL_I2C_Init+0xe8>
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012b6:	fb02 f303 	mul.w	r3, r2, r3
 80012ba:	4a69      	ldr	r2, [pc, #420]	; (8001460 <HAL_I2C_Init+0x284>)
 80012bc:	fba2 2303 	umull	r2, r3, r2, r3
 80012c0:	099b      	lsrs	r3, r3, #6
 80012c2:	3301      	adds	r3, #1
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	430b      	orrs	r3, r1
 80012ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	495c      	ldr	r1, [pc, #368]	; (8001450 <HAL_I2C_Init+0x274>)
 80012e0:	428b      	cmp	r3, r1
 80012e2:	d819      	bhi.n	8001318 <HAL_I2C_Init+0x13c>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	1e59      	subs	r1, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f2:	1c59      	adds	r1, r3, #1
 80012f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012f8:	400b      	ands	r3, r1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00a      	beq.n	8001314 <HAL_I2C_Init+0x138>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1e59      	subs	r1, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fbb1 f3f3 	udiv	r3, r1, r3
 800130c:	3301      	adds	r3, #1
 800130e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001312:	e051      	b.n	80013b8 <HAL_I2C_Init+0x1dc>
 8001314:	2304      	movs	r3, #4
 8001316:	e04f      	b.n	80013b8 <HAL_I2C_Init+0x1dc>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d111      	bne.n	8001344 <HAL_I2C_Init+0x168>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e58      	subs	r0, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	440b      	add	r3, r1
 800132e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001332:	3301      	adds	r3, #1
 8001334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	e012      	b.n	800136a <HAL_I2C_Init+0x18e>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	1e58      	subs	r0, r3, #1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	0099      	lsls	r1, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	fbb0 f3f3 	udiv	r3, r0, r3
 800135a:	3301      	adds	r3, #1
 800135c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_I2C_Init+0x196>
 800136e:	2301      	movs	r3, #1
 8001370:	e022      	b.n	80013b8 <HAL_I2C_Init+0x1dc>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10e      	bne.n	8001398 <HAL_I2C_Init+0x1bc>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1e58      	subs	r0, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6859      	ldr	r1, [r3, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	440b      	add	r3, r1
 8001388:	fbb0 f3f3 	udiv	r3, r0, r3
 800138c:	3301      	adds	r3, #1
 800138e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001396:	e00f      	b.n	80013b8 <HAL_I2C_Init+0x1dc>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1e58      	subs	r0, r3, #1
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	440b      	add	r3, r1
 80013a6:	0099      	lsls	r1, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ae:	3301      	adds	r3, #1
 80013b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	6809      	ldr	r1, [r1, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69da      	ldr	r2, [r3, #28]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6911      	ldr	r1, [r2, #16]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68d2      	ldr	r2, [r2, #12]
 80013f2:	4311      	orrs	r1, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	430b      	orrs	r3, r1
 80013fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2220      	movs	r2, #32
 8001432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	000186a0 	.word	0x000186a0
 8001454:	001e847f 	.word	0x001e847f
 8001458:	003d08ff 	.word	0x003d08ff
 800145c:	431bde83 	.word	0x431bde83
 8001460:	10624dd3 	.word	0x10624dd3

08001464 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001466:	b08b      	sub	sp, #44	; 0x2c
 8001468:	af06      	add	r7, sp, #24
 800146a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0fd      	b.n	8001672 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f006 fc32 	bl	8007cf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2203      	movs	r2, #3
 8001494:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fb3b 	bl	8003b18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	687e      	ldr	r6, [r7, #4]
 80014aa:	466d      	mov	r5, sp
 80014ac:	f106 0410 	add.w	r4, r6, #16
 80014b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	602b      	str	r3, [r5, #0]
 80014b8:	1d33      	adds	r3, r6, #4
 80014ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f002 fb05 	bl	8003acc <USB_CoreInit>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0ce      	b.n	8001672 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fb36 	bl	8003b4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e04c      	b.n	8001580 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	4613      	mov	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	440b      	add	r3, r1
 80014f6:	3301      	adds	r3, #1
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014fc:	7bfb      	ldrb	r3, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001510:	7bfa      	ldrb	r2, [r7, #15]
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	b298      	uxth	r0, r3
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	3336      	adds	r3, #54	; 0x36
 8001524:	4602      	mov	r2, r0
 8001526:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3303      	adds	r3, #3
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800153e:	7bfa      	ldrb	r2, [r7, #15]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	440b      	add	r3, r1
 800154c:	3338      	adds	r3, #56	; 0x38
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	333c      	adds	r3, #60	; 0x3c
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	3340      	adds	r3, #64	; 0x40
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	3301      	adds	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d3ad      	bcc.n	80014e6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e044      	b.n	800161a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	440b      	add	r3, r1
 800159e:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	3301      	adds	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	d3b5      	bcc.n	8001590 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	687e      	ldr	r6, [r7, #4]
 800162c:	466d      	mov	r5, sp
 800162e:	f106 0410 	add.w	r4, r6, #16
 8001632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	602b      	str	r3, [r5, #0]
 800163a:	1d33      	adds	r3, r6, #4
 800163c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	f002 fa90 	bl	8003b64 <USB_DevInit>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00d      	b.n	8001672 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f004 ff42 	bl	80064f4 <USB_DevDisconnect>

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800167a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_PCD_Start+0x16>
 800168c:	2302      	movs	r3, #2
 800168e:	e016      	b.n	80016be <HAL_PCD_Start+0x44>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f002 fa25 	bl	8003aec <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016a2:	2101      	movs	r1, #1
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f006 fd74 	bl	8008192 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 ff16 	bl	80064e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 ff18 	bl	8006508 <USB_ReadInterrupts>
 80016d8:	4603      	mov	r3, r0
 80016da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e2:	d102      	bne.n	80016ea <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fb48 	bl	8001d7a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 ff0a 	bl	8006508 <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d112      	bne.n	8001726 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001708:	b29a      	uxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001712:	b292      	uxth	r2, r2
 8001714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f006 fb66 	bl	8007dea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800171e:	2100      	movs	r1, #0
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 f923 	bl	800196c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f004 feec 	bl	8006508 <USB_ReadInterrupts>
 8001730:	4603      	mov	r3, r0
 8001732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800173a:	d10b      	bne.n	8001754 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001744:	b29a      	uxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800174e:	b292      	uxth	r2, r2
 8001750:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fed5 	bl	8006508 <USB_ReadInterrupts>
 800175e:	4603      	mov	r3, r0
 8001760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001768:	d10b      	bne.n	8001782 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800177c:	b292      	uxth	r2, r2
 800177e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f004 febe 	bl	8006508 <USB_ReadInterrupts>
 800178c:	4603      	mov	r3, r0
 800178e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001796:	d126      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	b292      	uxth	r2, r2
 80017ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0208 	bic.w	r2, r2, #8
 80017c2:	b292      	uxth	r2, r2
 80017c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f006 fb47 	bl	8007e5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017e0:	b292      	uxth	r2, r2
 80017e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 fe8c 	bl	8006508 <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017fa:	f040 8082 	bne.w	8001902 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	77fb      	strb	r3, [r7, #31]
 8001802:	e010      	b.n	8001826 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	441a      	add	r2, r3
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	b292      	uxth	r2, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	3320      	adds	r3, #32
 800181a:	443b      	add	r3, r7
 800181c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	3301      	adds	r3, #1
 8001824:	77fb      	strb	r3, [r7, #31]
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b07      	cmp	r3, #7
 800182a:	d9eb      	bls.n	8001804 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001834:	b29a      	uxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800184c:	b29a      	uxth	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800185c:	bf00      	nop
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001866:	b29b      	uxth	r3, r3
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f6      	beq.n	800185e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001882:	b292      	uxth	r2, r2
 8001884:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	77fb      	strb	r3, [r7, #31]
 800188c:	e00f      	b.n	80018ae <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4611      	mov	r1, r2
 8001896:	7ffa      	ldrb	r2, [r7, #31]
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	440a      	add	r2, r1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	3320      	adds	r3, #32
 80018a0:	443b      	add	r3, r7
 80018a2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80018a6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018a8:	7ffb      	ldrb	r3, [r7, #31]
 80018aa:	3301      	adds	r3, #1
 80018ac:	77fb      	strb	r3, [r7, #31]
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	2b07      	cmp	r3, #7
 80018b2:	d9ec      	bls.n	800188e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018bc:	b29a      	uxth	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0208 	orr.w	r2, r2, #8
 80018c6:	b292      	uxth	r2, r2
 80018c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018de:	b292      	uxth	r2, r2
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0204 	orr.w	r2, r2, #4
 80018f6:	b292      	uxth	r2, r2
 80018f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f006 fa93 	bl	8007e28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f004 fdfe 	bl	8006508 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001916:	d10e      	bne.n	8001936 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800192a:	b292      	uxth	r2, r2
 800192c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f006 fa4c 	bl	8007dce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fde4 	bl	8006508 <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194a:	d10b      	bne.n	8001964 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <HAL_PCD_SetAddress+0x1a>
 8001982:	2302      	movs	r3, #2
 8001984:	e013      	b.n	80019ae <HAL_PCD_SetAddress+0x42>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	4611      	mov	r1, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fd8b 	bl	80064ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	4608      	mov	r0, r1
 80019c0:	4611      	mov	r1, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	70fb      	strb	r3, [r7, #3]
 80019c8:	460b      	mov	r3, r1
 80019ca:	803b      	strh	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	da0e      	bge.n	80019fa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2201      	movs	r2, #1
 80019f6:	705a      	strb	r2, [r3, #1]
 80019f8:	e00e      	b.n	8001a18 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	f003 0207 	and.w	r2, r3, #7
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a24:	883a      	ldrh	r2, [r7, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	78ba      	ldrb	r2, [r7, #2]
 8001a2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	785b      	ldrb	r3, [r3, #1]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a42:	78bb      	ldrb	r3, [r7, #2]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d102      	bne.n	8001a4e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_PCD_EP_Open+0xa6>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e00e      	b.n	8001a7a <HAL_PCD_EP_Open+0xc4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 f89a 	bl	8003ba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001a78:	7afb      	ldrb	r3, [r7, #11]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da0e      	bge.n	8001ab4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	705a      	strb	r2, [r3, #1]
 8001ab2:	e00e      	b.n	8001ad2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 0207 	and.w	r2, r3, #7
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_PCD_EP_Close+0x6a>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e00e      	b.n	8001b0a <HAL_PCD_EP_Close+0x88>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fbbc 	bl	8004278 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	7afb      	ldrb	r3, [r7, #11]
 8001b24:	f003 0207 	and.w	r2, r3, #7
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b52:	7afb      	ldrb	r3, [r7, #11]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d106      	bne.n	8001b76 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6979      	ldr	r1, [r7, #20]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 fd6e 	bl	8004650 <USB_EPStartXfer>
 8001b74:	e005      	b.n	8001b82 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6979      	ldr	r1, [r7, #20]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fd67 	bl	8004650 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	603b      	str	r3, [r7, #0]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6979      	ldr	r1, [r7, #20]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 fd2b 	bl	8004650 <USB_EPStartXfer>
 8001bfa:	e005      	b.n	8001c08 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fd24 	bl	8004650 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 0207 	and.w	r2, r3, #7
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d901      	bls.n	8001c30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e04c      	b.n	8001cca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0e      	bge.n	8001c56 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	705a      	strb	r2, [r3, #1]
 8001c54:	e00c      	b.n	8001c70 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_PCD_EP_SetStall+0x7e>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e01c      	b.n	8001cca <HAL_PCD_EP_SetStall+0xb8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 fb0e 	bl	80062c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d108      	bne.n	8001cc0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f004 fc33 	bl	8006526 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d901      	bls.n	8001cf0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e040      	b.n	8001d72 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	da0e      	bge.n	8001d16 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	705a      	strb	r2, [r3, #1]
 8001d14:	e00e      	b.n	8001d34 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 0207 	and.w	r2, r3, #7
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_PCD_EP_ClrStall+0x82>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e00e      	b.n	8001d72 <HAL_PCD_EP_ClrStall+0xa0>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 fafc 	bl	8006360 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b08e      	sub	sp, #56	; 0x38
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d82:	e2ec      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8161 	bne.w	8002066 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d152      	bne.n	8001e54 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	81fb      	strh	r3, [r7, #14]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	89fb      	ldrh	r3, [r7, #14]
 8001dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3328      	adds	r3, #40	; 0x28
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	3302      	adds	r3, #2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e12:	2100      	movs	r1, #0
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f005 ffc0 	bl	8007d9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 829b 	beq.w	800235e <PCD_EP_ISR_Handler+0x5e4>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 8296 	bne.w	800235e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	b292      	uxth	r2, r2
 8001e46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e52:	e284      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d034      	beq.n	8001ed8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	3306      	adds	r3, #6
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f004 fb8a 	bl	80065c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	823b      	strh	r3, [r7, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	8a3a      	ldrh	r2, [r7, #16]
 8001ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ecc:	b292      	uxth	r2, r2
 8001ece:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f005 ff35 	bl	8007d40 <HAL_PCD_SetupStageCallback>
 8001ed6:	e242      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ed8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f280 823e 	bge.w	800235e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eee:	4013      	ands	r3, r2
 8001ef0:	83bb      	strh	r3, [r7, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	8bba      	ldrh	r2, [r7, #28]
 8001ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001efc:	b292      	uxth	r2, r2
 8001efe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	3306      	adds	r3, #6
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d019      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x1ee>
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	6959      	ldr	r1, [r3, #20]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f004 fb3a 	bl	80065c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	441a      	add	r2, r3
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f60:	2100      	movs	r1, #0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f005 fefe 	bl	8007d64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 81f2 	bne.w	800235e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4413      	add	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d112      	bne.n	8001fc8 <PCD_EP_ISR_Handler+0x24e>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	e02f      	b.n	8002028 <PCD_EP_ISR_Handler+0x2ae>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8001fce:	d813      	bhi.n	8001ff8 <PCD_EP_ISR_Handler+0x27e>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <PCD_EP_ISR_Handler+0x270>
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	e017      	b.n	8002028 <PCD_EP_ISR_Handler+0x2ae>
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <PCD_EP_ISR_Handler+0x298>
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	3b01      	subs	r3, #1
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	b29b      	uxth	r3, r3
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	b29b      	uxth	r3, r3
 800201a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002022:	b29a      	uxth	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002038:	827b      	strh	r3, [r7, #18]
 800203a:	8a7b      	ldrh	r3, [r7, #18]
 800203c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002040:	827b      	strh	r3, [r7, #18]
 8002042:	8a7b      	ldrh	r3, [r7, #18]
 8002044:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002048:	827b      	strh	r3, [r7, #18]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	8a7b      	ldrh	r3, [r7, #18]
 8002050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002060:	b29b      	uxth	r3, r3
 8002062:	8013      	strh	r3, [r2, #0]
 8002064:	e17b      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002078:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800207c:	2b00      	cmp	r3, #0
 800207e:	f280 80ea 	bge.w	8002256 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29a      	uxth	r2, r3
 8002094:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002098:	4013      	ands	r3, r2
 800209a:	853b      	strh	r3, [r7, #40]	; 0x28
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80020ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b0:	b292      	uxth	r2, r2
 80020b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	7b1b      	ldrb	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d122      	bne.n	8002118 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	3306      	adds	r3, #6
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80020fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	6959      	ldr	r1, [r3, #20]
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	88da      	ldrh	r2, [r3, #6]
 8002110:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002112:	f004 fa58 	bl	80065c6 <USB_ReadPMA>
 8002116:	e07c      	b.n	8002212 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	78db      	ldrb	r3, [r3, #3]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d108      	bne.n	8002132 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002120:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002122:	461a      	mov	r2, r3
 8002124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f927 	bl	800237a <HAL_PCD_EP_DB_Receive>
 800212c:	4603      	mov	r3, r0
 800212e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002130:	e06f      	b.n	8002212 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214c:	847b      	strh	r3, [r7, #34]	; 0x22
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	441a      	add	r2, r3
 800215c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800215e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800216e:	b29b      	uxth	r3, r3
 8002170:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d021      	beq.n	80021d0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002194:	b29b      	uxth	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	3302      	adds	r3, #2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d02a      	beq.n	8002212 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	891a      	ldrh	r2, [r3, #8]
 80021c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021ca:	f004 f9fc 	bl	80065c6 <USB_ReadPMA>
 80021ce:	e020      	b.n	8002212 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d8:	b29b      	uxth	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	3306      	adds	r3, #6
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	895a      	ldrh	r2, [r3, #10]
 800220c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800220e:	f004 f9da 	bl	80065c6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	69da      	ldr	r2, [r3, #28]
 8002216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002218:	441a      	add	r2, r3
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002224:	441a      	add	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <PCD_EP_ISR_Handler+0x4c2>
 8002232:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d206      	bcs.n	800224a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f005 fd8e 	bl	8007d64 <HAL_PCD_DataOutStageCallback>
 8002248:	e005      	b.n	8002256 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f002 f9fd 	bl	8004650 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d07e      	beq.n	800235e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	843b      	strh	r3, [r7, #32]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	441a      	add	r2, r3
 800229e:	8c3b      	ldrh	r3, [r7, #32]
 80022a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	78db      	ldrb	r3, [r3, #3]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d00c      	beq.n	80022ce <PCD_EP_ISR_Handler+0x554>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	78db      	ldrb	r3, [r3, #3]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d146      	bne.n	8002352 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d141      	bne.n	8002352 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	3302      	adds	r3, #2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	8bfb      	ldrh	r3, [r7, #30]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d906      	bls.n	8002310 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	8bfb      	ldrh	r3, [r7, #30]
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	619a      	str	r2, [r3, #24]
 800230e:	e002      	b.n	8002316 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f005 fd38 	bl	8007d9a <HAL_PCD_DataInStageCallback>
 800232a:	e018      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	8bfb      	ldrh	r3, [r7, #30]
 8002332:	441a      	add	r2, r3
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	8bfb      	ldrh	r3, [r7, #30]
 800233e:	441a      	add	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234a:	4618      	mov	r0, r3
 800234c:	f002 f980 	bl	8004650 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002350:	e005      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002352:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002354:	461a      	mov	r2, r3
 8002356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f91b 	bl	8002594 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002366:	b29b      	uxth	r3, r3
 8002368:	b21b      	sxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f6ff ad0a 	blt.w	8001d84 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	4613      	mov	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d07e      	beq.n	8002490 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	3302      	adds	r3, #2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	8b7b      	ldrh	r3, [r7, #26]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d306      	bcc.n	80023d4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	8b7b      	ldrh	r3, [r7, #26]
 80023cc:	1ad2      	subs	r2, r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e002      	b.n	80023da <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d123      	bne.n	800242a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fc:	833b      	strh	r3, [r7, #24]
 80023fe:	8b3b      	ldrh	r3, [r7, #24]
 8002400:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002404:	833b      	strh	r3, [r7, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	441a      	add	r2, r3
 8002414:	8b3b      	ldrh	r3, [r7, #24]
 8002416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002426:	b29b      	uxth	r3, r3
 8002428:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01f      	beq.n	8002474 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	82fb      	strh	r3, [r7, #22]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	8afb      	ldrh	r3, [r7, #22]
 8002460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002470:	b29b      	uxth	r3, r3
 8002472:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002474:	8b7b      	ldrh	r3, [r7, #26]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8087 	beq.w	800258a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6959      	ldr	r1, [r3, #20]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	891a      	ldrh	r2, [r3, #8]
 8002488:	8b7b      	ldrh	r3, [r7, #26]
 800248a:	f004 f89c 	bl	80065c6 <USB_ReadPMA>
 800248e:	e07c      	b.n	800258a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	3306      	adds	r3, #6
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	8b7b      	ldrh	r3, [r7, #26]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d306      	bcc.n	80024d2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	8b7b      	ldrh	r3, [r7, #26]
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e002      	b.n	80024d8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d123      	bne.n	8002528 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	83fb      	strh	r3, [r7, #30]
 80024fc:	8bfb      	ldrh	r3, [r7, #30]
 80024fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002502:	83fb      	strh	r3, [r7, #30]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	8bfb      	ldrh	r3, [r7, #30]
 8002514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	b29b      	uxth	r3, r3
 8002526:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11f      	bne.n	8002572 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	83bb      	strh	r3, [r7, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8bbb      	ldrh	r3, [r7, #28]
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002572:	8b7b      	ldrh	r3, [r7, #26]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	895a      	ldrh	r2, [r3, #10]
 8002584:	8b7b      	ldrh	r3, [r7, #26]
 8002586:	f004 f81e 	bl	80065c6 <USB_ReadPMA>
    }
  }

  return count;
 800258a:	8b7b      	ldrh	r3, [r7, #26]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0a2      	sub	sp, #136	; 0x88
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 81c7 	beq.w	800293c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	3302      	adds	r3, #2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d907      	bls.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	e002      	b.n	80025fc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 80b9 	bne.w	8002778 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d126      	bne.n	800265c <HAL_PCD_EP_DB_Transmit+0xc8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	4413      	add	r3, r2
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	011a      	lsls	r2, r3, #4
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	4413      	add	r3, r2
 8002630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002640:	b29a      	uxth	r2, r3
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002654:	b29a      	uxth	r2, r3
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	801a      	strh	r2, [r3, #0]
 800265a:	e01a      	b.n	8002692 <HAL_PCD_EP_DB_Transmit+0xfe>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	785b      	ldrb	r3, [r3, #1]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d116      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002678:	4413      	add	r3, r2
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	011a      	lsls	r2, r3, #4
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	4413      	add	r3, r2
 8002686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	2200      	movs	r2, #0
 8002690:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d126      	bne.n	80026ee <HAL_PCD_EP_DB_Transmit+0x15a>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	4413      	add	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	011a      	lsls	r2, r3, #4
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4413      	add	r3, r2
 80026c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	e017      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x18a>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d113      	bne.n	800271e <HAL_PCD_EP_DB_Transmit+0x18a>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	4413      	add	r3, r2
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	011a      	lsls	r2, r3, #4
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	4413      	add	r3, r2
 8002712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2200      	movs	r2, #0
 800271c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f005 fb38 	bl	8007d9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 82d4 	beq.w	8002cde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002750:	827b      	strh	r3, [r7, #18]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	441a      	add	r2, r3
 8002760:	8a7b      	ldrh	r3, [r7, #18]
 8002762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800276a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800276e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002772:	b29b      	uxth	r3, r3
 8002774:	8013      	strh	r3, [r2, #0]
 8002776:	e2b2      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d021      	beq.n	80027c6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80027b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	f040 8286 	bne.w	8002cde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027da:	441a      	add	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	69da      	ldr	r2, [r3, #28]
 80027e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027e8:	441a      	add	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6a1a      	ldr	r2, [r3, #32]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d309      	bcc.n	800280e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	e015      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d107      	bne.n	8002826 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002824:	e009      	b.n	800283a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d155      	bne.n	80028ee <HAL_PCD_EP_DB_Transmit+0x35a>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	63bb      	str	r3, [r7, #56]	; 0x38
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002850:	b29b      	uxth	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002856:	4413      	add	r3, r2
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	011a      	lsls	r2, r3, #4
 8002860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002862:	4413      	add	r3, r2
 8002864:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002868:	637b      	str	r3, [r7, #52]	; 0x34
 800286a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286c:	2b00      	cmp	r3, #0
 800286e:	d112      	bne.n	8002896 <HAL_PCD_EP_DB_Transmit+0x302>
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800287a:	b29a      	uxth	r2, r3
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800288e:	b29a      	uxth	r2, r3
 8002890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002892:	801a      	strh	r2, [r3, #0]
 8002894:	e047      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x392>
 8002896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002898:	2b3e      	cmp	r3, #62	; 0x3e
 800289a:	d811      	bhi.n	80028c0 <HAL_PCD_EP_DB_Transmit+0x32c>
 800289c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x31e>
 80028ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ae:	3301      	adds	r3, #1
 80028b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80028b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	029b      	lsls	r3, r3, #10
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028bc:	801a      	strh	r2, [r3, #0]
 80028be:	e032      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x392>
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <HAL_PCD_EP_DB_Transmit+0x342>
 80028d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d2:	3b01      	subs	r3, #1
 80028d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80028d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d8:	b29b      	uxth	r3, r3
 80028da:	029b      	lsls	r3, r3, #10
 80028dc:	b29b      	uxth	r3, r3
 80028de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	e01b      	b.n	8002926 <HAL_PCD_EP_DB_Transmit+0x392>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d117      	bne.n	8002926 <HAL_PCD_EP_DB_Transmit+0x392>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	643b      	str	r3, [r7, #64]	; 0x40
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002904:	b29b      	uxth	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290a:	4413      	add	r3, r2
 800290c:	643b      	str	r3, [r7, #64]	; 0x40
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	011a      	lsls	r2, r3, #4
 8002914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002916:	4413      	add	r3, r2
 8002918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800291e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002920:	b29a      	uxth	r2, r3
 8002922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002924:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	6959      	ldr	r1, [r3, #20]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	891a      	ldrh	r2, [r3, #8]
 8002932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	f003 fe01 	bl	800653c <USB_WritePMA>
 800293a:	e1d0      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	3306      	adds	r3, #6
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002964:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002970:	429a      	cmp	r2, r3
 8002972:	d307      	bcc.n	8002984 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800297c:	1ad2      	subs	r2, r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	619a      	str	r2, [r3, #24]
 8002982:	e002      	b.n	800298a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 80c4 	bne.w	8002b1c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d126      	bne.n	80029ea <HAL_PCD_EP_DB_Transmit+0x456>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b0:	4413      	add	r3, r2
 80029b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	011a      	lsls	r2, r3, #4
 80029ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029bc:	4413      	add	r3, r2
 80029be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e01a      	b.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x48c>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	785b      	ldrb	r3, [r3, #1]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d116      	bne.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x48c>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	677b      	str	r3, [r7, #116]	; 0x74
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a06:	4413      	add	r3, r2
 8002a08:	677b      	str	r3, [r7, #116]	; 0x74
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	011a      	lsls	r2, r3, #4
 8002a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a12:	4413      	add	r3, r2
 8002a14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a18:	673b      	str	r3, [r7, #112]	; 0x70
 8002a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	785b      	ldrb	r3, [r3, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d12f      	bne.n	8002a8e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a46:	4413      	add	r3, r2
 8002a48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	011a      	lsls	r2, r3, #4
 8002a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a56:	4413      	add	r3, r2
 8002a58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a72:	801a      	strh	r2, [r3, #0]
 8002a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a8a:	801a      	strh	r2, [r3, #0]
 8002a8c:	e017      	b.n	8002abe <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	785b      	ldrb	r3, [r3, #1]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d113      	bne.n	8002abe <HAL_PCD_EP_DB_Transmit+0x52a>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aa4:	4413      	add	r3, r2
 8002aa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	011a      	lsls	r2, r3, #4
 8002aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002aba:	2200      	movs	r2, #0
 8002abc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f005 f968 	bl	8007d9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 8104 	bne.w	8002cde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	441a      	add	r2, r3
 8002b02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8013      	strh	r3, [r2, #0]
 8002b1a:	e0e0      	b.n	8002cde <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d121      	bne.n	8002b6a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	441a      	add	r2, r3
 8002b52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	f040 80b4 	bne.w	8002cde <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b7e:	441a      	add	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b8c:	441a      	add	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d309      	bcc.n	8002bb2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002baa:	1ad2      	subs	r2, r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	621a      	str	r2, [r3, #32]
 8002bb0:	e015      	b.n	8002bde <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002bba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bbe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bc8:	e009      	b.n	8002bde <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	667b      	str	r3, [r7, #100]	; 0x64
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	785b      	ldrb	r3, [r3, #1]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d155      	bne.n	8002c98 <HAL_PCD_EP_DB_Transmit+0x704>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	4413      	add	r3, r2
 8002c02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	011a      	lsls	r2, r3, #4
 8002c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d112      	bne.n	8002c40 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c28:	801a      	strh	r2, [r3, #0]
 8002c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	e044      	b.n	8002cca <HAL_PCD_EP_DB_Transmit+0x736>
 8002c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c42:	2b3e      	cmp	r3, #62	; 0x3e
 8002c44:	d811      	bhi.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	3301      	adds	r3, #1
 8002c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	029b      	lsls	r3, r3, #10
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c66:	801a      	strh	r2, [r3, #0]
 8002c68:	e02f      	b.n	8002cca <HAL_PCD_EP_DB_Transmit+0x736>
 8002c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	029b      	lsls	r3, r3, #10
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	e018      	b.n	8002cca <HAL_PCD_EP_DB_Transmit+0x736>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d114      	bne.n	8002cca <HAL_PCD_EP_DB_Transmit+0x736>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cae:	4413      	add	r3, r2
 8002cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	011a      	lsls	r2, r3, #4
 8002cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cba:	4413      	add	r3, r2
 8002cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6959      	ldr	r1, [r3, #20]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	895a      	ldrh	r2, [r3, #10]
 8002cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	f003 fc2f 	bl	800653c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf8:	823b      	strh	r3, [r7, #16]
 8002cfa:	8a3b      	ldrh	r3, [r7, #16]
 8002cfc:	f083 0310 	eor.w	r3, r3, #16
 8002d00:	823b      	strh	r3, [r7, #16]
 8002d02:	8a3b      	ldrh	r3, [r7, #16]
 8002d04:	f083 0320 	eor.w	r3, r3, #32
 8002d08:	823b      	strh	r3, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	8a3b      	ldrh	r3, [r7, #16]
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3788      	adds	r7, #136	; 0x88
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	4613      	mov	r3, r2
 8002d48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d4a:	897b      	ldrh	r3, [r7, #10]
 8002d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00b      	beq.n	8002d6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d56:	897b      	ldrh	r3, [r7, #10]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4413      	add	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e009      	b.n	8002d82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d6e:	897a      	ldrh	r2, [r7, #10]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d82:	893b      	ldrh	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d107      	bne.n	8002d98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	80da      	strh	r2, [r3, #6]
 8002d96:	e00b      	b.n	8002db0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e272      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8087 	beq.w	8002eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ddc:	4b92      	ldr	r3, [pc, #584]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d00c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002de8:	4b8f      	ldr	r3, [pc, #572]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d112      	bne.n	8002e1a <HAL_RCC_OscConfig+0x5e>
 8002df4:	4b8c      	ldr	r3, [pc, #560]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e00:	d10b      	bne.n	8002e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e02:	4b89      	ldr	r3, [pc, #548]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d06c      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x12c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d168      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e24c      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x76>
 8002e24:	4b80      	ldr	r3, [pc, #512]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a7f      	ldr	r2, [pc, #508]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	e02e      	b.n	8002e90 <HAL_RCC_OscConfig+0xd4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x98>
 8002e3a:	4b7b      	ldr	r3, [pc, #492]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7a      	ldr	r2, [pc, #488]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b78      	ldr	r3, [pc, #480]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a77      	ldr	r2, [pc, #476]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e01d      	b.n	8002e90 <HAL_RCC_OscConfig+0xd4>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0xbc>
 8002e5e:	4b72      	ldr	r3, [pc, #456]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a71      	ldr	r2, [pc, #452]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b6f      	ldr	r3, [pc, #444]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6e      	ldr	r2, [pc, #440]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0xd4>
 8002e78:	4b6b      	ldr	r3, [pc, #428]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b68      	ldr	r3, [pc, #416]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a67      	ldr	r2, [pc, #412]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fd fcce 	bl	8000838 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fd fcca 	bl	8000838 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e200      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xe4>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fd fcba 	bl	8000838 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fd fcb6 	bl	8000838 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e1ec      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x10c>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00b      	beq.n	8002f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f02:	4b49      	ldr	r3, [pc, #292]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d11c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x18c>
 8002f0e:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d116      	bne.n	8002f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1a:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_RCC_OscConfig+0x176>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e1c0      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4939      	ldr	r1, [pc, #228]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	e03a      	b.n	8002fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d020      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x270>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fd fc6f 	bl	8000838 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5e:	f7fd fc6b 	bl	8000838 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e1a1      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4927      	ldr	r1, [pc, #156]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	e015      	b.n	8002fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_RCC_OscConfig+0x270>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fd fc4e 	bl	8000838 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fd fc4a 	bl	8000838 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e180      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03a      	beq.n	8003040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d019      	beq.n	8003006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd2:	4b17      	ldr	r3, [pc, #92]	; (8003030 <HAL_RCC_OscConfig+0x274>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fd fc2e 	bl	8000838 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd fc2a 	bl	8000838 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e160      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ffe:	2001      	movs	r0, #1
 8003000:	f000 fad8 	bl	80035b4 <RCC_Delay>
 8003004:	e01c      	b.n	8003040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003006:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_RCC_OscConfig+0x274>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300c:	f7fd fc14 	bl	8000838 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003012:	e00f      	b.n	8003034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003014:	f7fd fc10 	bl	8000838 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d908      	bls.n	8003034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e146      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	42420000 	.word	0x42420000
 8003030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003034:	4b92      	ldr	r3, [pc, #584]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e9      	bne.n	8003014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80a6 	beq.w	800319a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003052:	4b8b      	ldr	r3, [pc, #556]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a87      	ldr	r2, [pc, #540]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003068:	61d3      	str	r3, [r2, #28]
 800306a:	4b85      	ldr	r3, [pc, #532]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	4b82      	ldr	r3, [pc, #520]	; (8003284 <HAL_RCC_OscConfig+0x4c8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d118      	bne.n	80030b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003086:	4b7f      	ldr	r3, [pc, #508]	; (8003284 <HAL_RCC_OscConfig+0x4c8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a7e      	ldr	r2, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x4c8>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003092:	f7fd fbd1 	bl	8000838 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309a:	f7fd fbcd 	bl	8000838 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b64      	cmp	r3, #100	; 0x64
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e103      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	4b75      	ldr	r3, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x4c8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x312>
 80030c0:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4a6e      	ldr	r2, [pc, #440]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6213      	str	r3, [r2, #32]
 80030cc:	e02d      	b.n	800312a <HAL_RCC_OscConfig+0x36e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x334>
 80030d6:	4b6a      	ldr	r3, [pc, #424]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4a69      	ldr	r2, [pc, #420]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030dc:	f023 0301 	bic.w	r3, r3, #1
 80030e0:	6213      	str	r3, [r2, #32]
 80030e2:	4b67      	ldr	r3, [pc, #412]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a66      	ldr	r2, [pc, #408]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f023 0304 	bic.w	r3, r3, #4
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	e01c      	b.n	800312a <HAL_RCC_OscConfig+0x36e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b05      	cmp	r3, #5
 80030f6:	d10c      	bne.n	8003112 <HAL_RCC_OscConfig+0x356>
 80030f8:	4b61      	ldr	r3, [pc, #388]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4a60      	ldr	r2, [pc, #384]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6213      	str	r3, [r2, #32]
 8003104:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a5d      	ldr	r2, [pc, #372]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	e00b      	b.n	800312a <HAL_RCC_OscConfig+0x36e>
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4a5a      	ldr	r2, [pc, #360]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	4a57      	ldr	r2, [pc, #348]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d015      	beq.n	800315e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003132:	f7fd fb81 	bl	8000838 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003138:	e00a      	b.n	8003150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313a:	f7fd fb7d 	bl	8000838 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f241 3288 	movw	r2, #5000	; 0x1388
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e0b1      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	4b4b      	ldr	r3, [pc, #300]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ee      	beq.n	800313a <HAL_RCC_OscConfig+0x37e>
 800315c:	e014      	b.n	8003188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315e:	f7fd fb6b 	bl	8000838 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003166:	f7fd fb67 	bl	8000838 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f241 3288 	movw	r2, #5000	; 0x1388
 8003174:	4293      	cmp	r3, r2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e09b      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317c:	4b40      	ldr	r3, [pc, #256]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ee      	bne.n	8003166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003188:	7dfb      	ldrb	r3, [r7, #23]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b3c      	ldr	r3, [pc, #240]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a3b      	ldr	r2, [pc, #236]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8087 	beq.w	80032b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d061      	beq.n	8003274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d146      	bne.n	8003246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b8:	4b33      	ldr	r3, [pc, #204]	; (8003288 <HAL_RCC_OscConfig+0x4cc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fd fb3b 	bl	8000838 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fd fb37 	bl	8000838 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e06d      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031d8:	4b29      	ldr	r3, [pc, #164]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d108      	bne.n	8003200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4921      	ldr	r1, [pc, #132]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003200:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a19      	ldr	r1, [r3, #32]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	430b      	orrs	r3, r1
 8003212:	491b      	ldr	r1, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <HAL_RCC_OscConfig+0x4cc>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321e:	f7fd fb0b 	bl	8000838 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003226:	f7fd fb07 	bl	8000838 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e03d      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x46a>
 8003244:	e035      	b.n	80032b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <HAL_RCC_OscConfig+0x4cc>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fd faf4 	bl	8000838 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fd faf0 	bl	8000838 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e026      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x498>
 8003272:	e01e      	b.n	80032b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d107      	bne.n	800328c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e019      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
 8003280:	40021000 	.word	0x40021000
 8003284:	40007000 	.word	0x40007000
 8003288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_OscConfig+0x500>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	429a      	cmp	r2, r3
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0d0      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d910      	bls.n	8003304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4965      	ldr	r1, [pc, #404]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b63      	ldr	r3, [pc, #396]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b8      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d020      	beq.n	8003352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800331c:	4b59      	ldr	r3, [pc, #356]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a58      	ldr	r2, [pc, #352]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a52      	ldr	r2, [pc, #328]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800333e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003340:	4b50      	ldr	r3, [pc, #320]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	494d      	ldr	r1, [pc, #308]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d040      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d115      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e07f      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e073      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e06b      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339e:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f023 0203 	bic.w	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4936      	ldr	r1, [pc, #216]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b0:	f7fd fa42 	bl	8000838 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b8:	f7fd fa3e 	bl	8000838 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e053      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 020c 	and.w	r2, r3, #12
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d1eb      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d210      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 0207 	bic.w	r2, r3, #7
 80033f6:	4922      	ldr	r1, [pc, #136]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e032      	b.n	8003476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4916      	ldr	r1, [pc, #88]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490e      	ldr	r1, [pc, #56]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800344e:	f000 f821 	bl	8003494 <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490a      	ldr	r1, [pc, #40]	; (8003488 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	fa22 f303 	lsr.w	r3, r2, r3
 8003466:	4a09      	ldr	r2, [pc, #36]	; (800348c <HAL_RCC_ClockConfig+0x1cc>)
 8003468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_RCC_ClockConfig+0x1d0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd f9a0 	bl	80007b4 <HAL_InitTick>

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40022000 	.word	0x40022000
 8003484:	40021000 	.word	0x40021000
 8003488:	08008bd8 	.word	0x08008bd8
 800348c:	20000000 	.word	0x20000000
 8003490:	20000004 	.word	0x20000004

08003494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003494:	b490      	push	{r4, r7}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800349a:	4b29      	ldr	r3, [pc, #164]	; (8003540 <HAL_RCC_GetSysClockFreq+0xac>)
 800349c:	1d3c      	adds	r4, r7, #4
 800349e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034a4:	f240 2301 	movw	r3, #513	; 0x201
 80034a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034be:	4b21      	ldr	r3, [pc, #132]	; (8003544 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d002      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x40>
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d003      	beq.n	80034da <HAL_RCC_GetSysClockFreq+0x46>
 80034d2:	e02b      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034d6:	623b      	str	r3, [r7, #32]
      break;
 80034d8:	e02b      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	0c9b      	lsrs	r3, r3, #18
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	3328      	adds	r3, #40	; 0x28
 80034e4:	443b      	add	r3, r7
 80034e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d012      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0c5b      	lsrs	r3, r3, #17
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	3328      	adds	r3, #40	; 0x28
 8003502:	443b      	add	r3, r7
 8003504:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003508:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <HAL_RCC_GetSysClockFreq+0xb4>)
 800350e:	fb03 f202 	mul.w	r2, r3, r2
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
 800351a:	e004      	b.n	8003526 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4a0b      	ldr	r2, [pc, #44]	; (800354c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003520:	fb02 f303 	mul.w	r3, r2, r3
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	623b      	str	r3, [r7, #32]
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_RCC_GetSysClockFreq+0xb4>)
 800352e:	623b      	str	r3, [r7, #32]
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	6a3b      	ldr	r3, [r7, #32]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3728      	adds	r7, #40	; 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bc90      	pop	{r4, r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	08008b80 	.word	0x08008b80
 8003544:	40021000 	.word	0x40021000
 8003548:	007a1200 	.word	0x007a1200
 800354c:	003d0900 	.word	0x003d0900

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <HAL_RCC_GetHCLKFreq+0x10>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	20000000 	.word	0x20000000

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003568:	f7ff fff2 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0a1b      	lsrs	r3, r3, #8
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	08008be8 	.word	0x08008be8

0800358c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003590:	f7ff ffde 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	0adb      	lsrs	r3, r3, #11
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08008be8 	.word	0x08008be8

080035b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <RCC_Delay+0x34>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <RCC_Delay+0x38>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0a5b      	lsrs	r3, r3, #9
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035d0:	bf00      	nop
  }
  while (Delay --);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	60fa      	str	r2, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <RCC_Delay+0x1c>
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000000 	.word	0x20000000
 80035ec:	10624dd3 	.word	0x10624dd3

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d07d      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800360c:	2300      	movs	r3, #0
 800360e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003610:	4b4f      	ldr	r3, [pc, #316]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10d      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	4a4b      	ldr	r2, [pc, #300]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d118      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003644:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a42      	ldr	r2, [pc, #264]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003650:	f7fd f8f2 	bl	8000838 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fd f8ee 	bl	8000838 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e06d      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d02e      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	d027      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003694:	4b2e      	ldr	r3, [pc, #184]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369e:	4b2e      	ldr	r3, [pc, #184]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a4:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036aa:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d014      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fd f8bd 	bl	8000838 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd f8b9 	bl	8000838 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e036      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4917      	ldr	r1, [pc, #92]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b14      	ldr	r3, [pc, #80]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	42420440 	.word	0x42420440

0800375c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e03f      	b.n	80037ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fc ff20 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800379e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f905 	bl	80039b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b08a      	sub	sp, #40	; 0x28
 80037fa:	af02      	add	r7, sp, #8
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	d17c      	bne.n	8003910 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <HAL_UART_Transmit+0x2c>
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e075      	b.n	8003912 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_UART_Transmit+0x3e>
 8003830:	2302      	movs	r3, #2
 8003832:	e06e      	b.n	8003912 <HAL_UART_Transmit+0x11c>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2221      	movs	r2, #33	; 0x21
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384a:	f7fc fff5 	bl	8000838 <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	88fa      	ldrh	r2, [r7, #6]
 8003854:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	88fa      	ldrh	r2, [r7, #6]
 800385a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003864:	d108      	bne.n	8003878 <HAL_UART_Transmit+0x82>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e003      	b.n	8003880 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003888:	e02a      	b.n	80038e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f840 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e036      	b.n	8003912 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	3302      	adds	r3, #2
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	e007      	b.n	80038d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1cf      	bne.n	800388a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2140      	movs	r1, #64	; 0x40
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f810 	bl	800391a <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e006      	b.n	8003912 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3720      	adds	r7, #32
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392a:	e02c      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003932:	d028      	beq.n	8003986 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d007      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x30>
 800393a:	f7fc ff7d 	bl	8000838 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	429a      	cmp	r2, r3
 8003948:	d21d      	bcs.n	8003986 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003958:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e00f      	b.n	80039a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d0c3      	beq.n	800392c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039ea:	f023 030c 	bic.w	r3, r3, #12
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	68b9      	ldr	r1, [r7, #8]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <UART_SetConfig+0x114>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d103      	bne.n	8003a20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a18:	f7ff fdb8 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	e002      	b.n	8003a26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a20:	f7ff fda0 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8003a24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <UART_SetConfig+0x118>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	0119      	lsls	r1, r3, #4
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <UART_SetConfig+0x118>)
 8003a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2064      	movs	r0, #100	; 0x64
 8003a66:	fb00 f303 	mul.w	r3, r0, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <UART_SetConfig+0x118>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7c:	4419      	add	r1, r3
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009a      	lsls	r2, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <UART_SetConfig+0x118>)
 8003a96:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2064      	movs	r0, #100	; 0x64
 8003a9e:	fb00 f303 	mul.w	r3, r0, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	3332      	adds	r3, #50	; 0x32
 8003aa8:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <UART_SetConfig+0x118>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	440a      	add	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40013800 	.word	0x40013800
 8003ac8:	51eb851f 	.word	0x51eb851f

08003acc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003acc:	b084      	sub	sp, #16
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	f107 0014 	add.w	r0, r7, #20
 8003ada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	b004      	add	sp, #16
 8003aea:	4770      	bx	lr

08003aec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003afc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4013      	ands	r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b64:	b084      	sub	sp, #16
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	f107 0014 	add.w	r0, r7, #20
 8003b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	b004      	add	sp, #16
 8003ba2:	4770      	bx	lr

08003ba4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b09b      	sub	sp, #108	; 0x6c
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	78db      	ldrb	r3, [r3, #3]
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d81f      	bhi.n	8003c16 <USB_ActivateEndpoint+0x72>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <USB_ActivateEndpoint+0x38>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c1f 	.word	0x08003c1f
 8003be8:	08003bfb 	.word	0x08003bfb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bf4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003bf8:	e012      	b.n	8003c20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003bfa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003bfe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c06:	e00b      	b.n	8003c20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c10:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c14:	e004      	b.n	8003c20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003c1c:	e000      	b.n	8003c20 <USB_ActivateEndpoint+0x7c>
      break;
 8003c1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	441a      	add	r2, r3
 8003c2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	441a      	add	r2, r3
 8003c70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	7b1b      	ldrb	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f040 8149 	bne.w	8003f24 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 8084 	beq.w	8003da4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	011a      	lsls	r2, r3, #4
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cbe:	613b      	str	r3, [r7, #16]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	88db      	ldrh	r3, [r3, #6]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	81fb      	strh	r3, [r7, #14]
 8003cde:	89fb      	ldrh	r3, [r7, #14]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <USB_ActivateEndpoint+0x17c>
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	81bb      	strh	r3, [r7, #12]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	441a      	add	r2, r3
 8003d0a:	89bb      	ldrh	r3, [r7, #12]
 8003d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	78db      	ldrb	r3, [r3, #3]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d020      	beq.n	8003d6a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3e:	813b      	strh	r3, [r7, #8]
 8003d40:	893b      	ldrh	r3, [r7, #8]
 8003d42:	f083 0320 	eor.w	r3, r3, #32
 8003d46:	813b      	strh	r3, [r7, #8]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	893b      	ldrh	r3, [r7, #8]
 8003d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8013      	strh	r3, [r2, #0]
 8003d68:	e27f      	b.n	800426a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d80:	817b      	strh	r3, [r7, #10]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	441a      	add	r2, r3
 8003d8c:	897b      	ldrh	r3, [r7, #10]
 8003d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	8013      	strh	r3, [r2, #0]
 8003da2:	e262      	b.n	800426a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	4413      	add	r3, r2
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	011a      	lsls	r2, r3, #4
 8003dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	88db      	ldrh	r3, [r3, #6]
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	4413      	add	r3, r2
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011a      	lsls	r2, r3, #4
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	4413      	add	r3, r2
 8003df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dfa:	623b      	str	r3, [r7, #32]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d112      	bne.n	8003e2a <USB_ActivateEndpoint+0x286>
 8003e04:	6a3b      	ldr	r3, [r7, #32]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	801a      	strh	r2, [r3, #0]
 8003e28:	e02f      	b.n	8003e8a <USB_ActivateEndpoint+0x2e6>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e30:	d813      	bhi.n	8003e5a <USB_ActivateEndpoint+0x2b6>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	085b      	lsrs	r3, r3, #1
 8003e38:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <USB_ActivateEndpoint+0x2a8>
 8003e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e48:	3301      	adds	r3, #1
 8003e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	029b      	lsls	r3, r3, #10
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	e017      	b.n	8003e8a <USB_ActivateEndpoint+0x2e6>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	663b      	str	r3, [r7, #96]	; 0x60
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d102      	bne.n	8003e74 <USB_ActivateEndpoint+0x2d0>
 8003e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e70:	3b01      	subs	r3, #1
 8003e72:	663b      	str	r3, [r7, #96]	; 0x60
 8003e74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	029b      	lsls	r3, r3, #10
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	83fb      	strh	r3, [r7, #30]
 8003e98:	8bfb      	ldrh	r3, [r7, #30]
 8003e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01b      	beq.n	8003eda <USB_ActivateEndpoint+0x336>
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb8:	83bb      	strh	r3, [r7, #28]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	441a      	add	r2, r3
 8003ec4:	8bbb      	ldrh	r3, [r7, #28]
 8003ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef0:	837b      	strh	r3, [r7, #26]
 8003ef2:	8b7b      	ldrh	r3, [r7, #26]
 8003ef4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003ef8:	837b      	strh	r3, [r7, #26]
 8003efa:	8b7b      	ldrh	r3, [r7, #26]
 8003efc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f00:	837b      	strh	r3, [r7, #26]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	8b7b      	ldrh	r3, [r7, #26]
 8003f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	8013      	strh	r3, [r2, #0]
 8003f22:	e1a2      	b.n	800426a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	441a      	add	r2, r3
 8003f48:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f54:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f70:	4413      	add	r3, r2
 8003f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	011a      	lsls	r2, r3, #4
 8003f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f82:	657b      	str	r3, [r7, #84]	; 0x54
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	891b      	ldrh	r3, [r3, #8]
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f92:	801a      	strh	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	653b      	str	r3, [r7, #80]	; 0x50
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa4:	4413      	add	r3, r2
 8003fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	011a      	lsls	r2, r3, #4
 8003fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	895b      	ldrh	r3, [r3, #10]
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 8091 	bne.w	80040f4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fe0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01b      	beq.n	8004022 <USB_ActivateEndpoint+0x47e>
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004000:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	441a      	add	r2, r3
 800400c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800400e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800401a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401e:	b29b      	uxth	r3, r3
 8004020:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004030:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01b      	beq.n	8004072 <USB_ActivateEndpoint+0x4ce>
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	441a      	add	r2, r3
 800405c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800405e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800406e:	b29b      	uxth	r3, r3
 8004070:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	86bb      	strh	r3, [r7, #52]	; 0x34
 800408a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800408c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004090:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004092:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004094:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004098:	86bb      	strh	r3, [r7, #52]	; 0x34
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	441a      	add	r2, r3
 80040a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	441a      	add	r2, r3
 80040dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80040de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8013      	strh	r3, [r2, #0]
 80040f2:	e0ba      	b.n	800426a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004104:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01d      	beq.n	800414c <USB_ActivateEndpoint+0x5a8>
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004126:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	441a      	add	r2, r3
 8004134:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004148:	b29b      	uxth	r3, r3
 800414a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800415c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01d      	beq.n	80041a4 <USB_ActivateEndpoint+0x600>
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	78db      	ldrb	r3, [r3, #3]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d024      	beq.n	80041f6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041ca:	f083 0320 	eor.w	r3, r3, #32
 80041ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	441a      	add	r2, r3
 80041dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8013      	strh	r3, [r2, #0]
 80041f4:	e01d      	b.n	8004232 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800421e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422e:	b29b      	uxth	r3, r3
 8004230:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004248:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800426a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800426e:	4618      	mov	r0, r3
 8004270:	376c      	adds	r7, #108	; 0x6c
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004278:	b480      	push	{r7}
 800427a:	b08d      	sub	sp, #52	; 0x34
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	7b1b      	ldrb	r3, [r3, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 808e 	bne.w	80043a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d044      	beq.n	800431e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	81bb      	strh	r3, [r7, #12]
 80042a2:	89bb      	ldrh	r3, [r7, #12]
 80042a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01b      	beq.n	80042e4 <USB_DeactivateEndpoint+0x6c>
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c2:	817b      	strh	r3, [r7, #10]
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	441a      	add	r2, r3
 80042ce:	897b      	ldrh	r3, [r7, #10]
 80042d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fa:	813b      	strh	r3, [r7, #8]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	441a      	add	r2, r3
 8004306:	893b      	ldrh	r3, [r7, #8]
 8004308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800430c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004318:	b29b      	uxth	r3, r3
 800431a:	8013      	strh	r3, [r2, #0]
 800431c:	e192      	b.n	8004644 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	827b      	strh	r3, [r7, #18]
 800432c:	8a7b      	ldrh	r3, [r7, #18]
 800432e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01b      	beq.n	800436e <USB_DeactivateEndpoint+0xf6>
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434c:	823b      	strh	r3, [r7, #16]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	8a3b      	ldrh	r3, [r7, #16]
 800435a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800435e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436a:	b29b      	uxth	r3, r3
 800436c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	81fb      	strh	r3, [r7, #14]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	89fb      	ldrh	r3, [r7, #14]
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]
 80043a6:	e14d      	b.n	8004644 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 80a5 	bne.w	80044fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	843b      	strh	r3, [r7, #32]
 80043c0:	8c3b      	ldrh	r3, [r7, #32]
 80043c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01b      	beq.n	8004402 <USB_DeactivateEndpoint+0x18a>
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e0:	83fb      	strh	r3, [r7, #30]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	8bfb      	ldrh	r3, [r7, #30]
 80043ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	83bb      	strh	r3, [r7, #28]
 8004410:	8bbb      	ldrh	r3, [r7, #28]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01b      	beq.n	8004452 <USB_DeactivateEndpoint+0x1da>
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004430:	837b      	strh	r3, [r7, #26]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	441a      	add	r2, r3
 800443c:	8b7b      	ldrh	r3, [r7, #26]
 800443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800444e:	b29b      	uxth	r3, r3
 8004450:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	881b      	ldrh	r3, [r3, #0]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	833b      	strh	r3, [r7, #24]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	441a      	add	r2, r3
 8004474:	8b3b      	ldrh	r3, [r7, #24]
 8004476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004486:	b29b      	uxth	r3, r3
 8004488:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800449c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a0:	82fb      	strh	r3, [r7, #22]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	441a      	add	r2, r3
 80044ac:	8afb      	ldrh	r3, [r7, #22]
 80044ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d8:	82bb      	strh	r3, [r7, #20]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	8abb      	ldrh	r3, [r7, #20]
 80044e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	8013      	strh	r3, [r2, #0]
 80044fa:	e0a3      	b.n	8004644 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800450a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800450c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01b      	beq.n	800454c <USB_DeactivateEndpoint+0x2d4>
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800452a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	441a      	add	r2, r3
 8004536:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004548:	b29b      	uxth	r3, r3
 800454a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	857b      	strh	r3, [r7, #42]	; 0x2a
 800455a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800455c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <USB_DeactivateEndpoint+0x324>
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	853b      	strh	r3, [r7, #40]	; 0x28
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	441a      	add	r2, r3
 8004586:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004594:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	441a      	add	r2, r3
 80045be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004608:	b29b      	uxth	r3, r3
 800460a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800461e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004622:	847b      	strh	r3, [r7, #34]	; 0x22
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	b29b      	uxth	r3, r3
 8004642:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3734      	adds	r7, #52	; 0x34
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0cc      	sub	sp, #304	; 0x130
 8004654:	af00      	add	r7, sp, #0
 8004656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800465a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800465e:	6018      	str	r0, [r3, #0]
 8004660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004668:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800466a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	2b01      	cmp	r3, #1
 8004678:	f041 817d 	bne.w	8005976 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800467c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800468c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d908      	bls.n	80046aa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800469c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80046a8:	e007      	b.n	80046ba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80046aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	7b1b      	ldrb	r3, [r3, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d152      	bne.n	8004770 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6959      	ldr	r1, [r3, #20]
 80046d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	88da      	ldrh	r2, [r3, #6]
 80046e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80046ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80046f0:	6800      	ldr	r0, [r0, #0]
 80046f2:	f001 ff23 	bl	800653c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80046f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004702:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004718:	b29b      	uxth	r3, r3
 800471a:	4619      	mov	r1, r3
 800471c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004720:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004724:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004728:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	440a      	add	r2, r1
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	011a      	lsls	r2, r3, #4
 8004740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004744:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4413      	add	r3, r2
 800474c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004754:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475e:	b29a      	uxth	r2, r3
 8004760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004764:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	f001 b8b5 	b.w	80058da <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	78db      	ldrb	r3, [r3, #3]
 800477c:	2b02      	cmp	r3, #2
 800477e:	f040 84c6 	bne.w	800510e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a1a      	ldr	r2, [r3, #32]
 800478e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	429a      	cmp	r2, r3
 800479c:	f240 8443 	bls.w	8005026 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80047a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80047ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800480c:	1ad2      	subs	r2, r2, r3
 800480e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800481a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 823e 	beq.w	8004cbe <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004846:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800484a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800484e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 809a 	bne.w	800499c <USB_EPStartXfer+0x34c>
 8004868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004870:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004874:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488a:	b29b      	uxth	r3, r3
 800488c:	4619      	mov	r1, r3
 800488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004896:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800489a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	440a      	add	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	011a      	lsls	r2, r3, #4
 80048b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4413      	add	r3, r2
 80048be:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80048c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d122      	bne.n	800491a <USB_EPStartXfer+0x2ca>
 80048d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29b      	uxth	r3, r3
 8004902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800490a:	b29a      	uxth	r2, r3
 800490c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004910:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	e079      	b.n	8004a0e <USB_EPStartXfer+0x3be>
 800491a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491e:	2b3e      	cmp	r3, #62	; 0x3e
 8004920:	d81b      	bhi.n	800495a <USB_EPStartXfer+0x30a>
 8004922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800492c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <USB_EPStartXfer+0x2f2>
 8004938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800493c:	3301      	adds	r3, #1
 800493e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004946:	b29b      	uxth	r3, r3
 8004948:	029b      	lsls	r3, r3, #10
 800494a:	b29a      	uxth	r2, r3
 800494c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004950:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	801a      	strh	r2, [r3, #0]
 8004958:	e059      	b.n	8004a0e <USB_EPStartXfer+0x3be>
 800495a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <USB_EPStartXfer+0x32a>
 8004970:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004974:	3b01      	subs	r3, #1
 8004976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800497a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800497e:	b29b      	uxth	r3, r3
 8004980:	029b      	lsls	r3, r3, #10
 8004982:	b29b      	uxth	r3, r3
 8004984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498c:	b29a      	uxth	r2, r3
 800498e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004992:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	e038      	b.n	8004a0e <USB_EPStartXfer+0x3be>
 800499c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d130      	bne.n	8004a0e <USB_EPStartXfer+0x3be>
 80049ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049ca:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	440a      	add	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	011a      	lsls	r2, r3, #4
 80049e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80049f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	895b      	ldrh	r3, [r3, #10]
 8004a1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6959      	ldr	r1, [r3, #20]
 8004a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a34:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a38:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a3c:	6800      	ldr	r0, [r0, #0]
 8004a3e:	f001 fd7d 	bl	800653c <USB_WritePMA>
            ep->xfer_buff += len;
 8004a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695a      	ldr	r2, [r3, #20]
 8004a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a52:	441a      	add	r2, r3
 8004a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d90f      	bls.n	8004a9c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6a1a      	ldr	r2, [r3, #32]
 8004a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8c:	1ad2      	subs	r2, r2, r3
 8004a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	621a      	str	r2, [r3, #32]
 8004a9a:	e00e      	b.n	8004aba <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 809a 	bne.w	8004c00 <USB_EPStartXfer+0x5b0>
 8004acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ad4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ad8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004adc:	6812      	ldr	r2, [r2, #0]
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4619      	mov	r1, r3
 8004af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004afa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004afe:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	440a      	add	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	011a      	lsls	r2, r3, #4
 8004b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4413      	add	r3, r2
 8004b22:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d122      	bne.n	8004b7e <USB_EPStartXfer+0x52e>
 8004b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	801a      	strh	r2, [r3, #0]
 8004b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	801a      	strh	r2, [r3, #0]
 8004b7c:	e083      	b.n	8004c86 <USB_EPStartXfer+0x636>
 8004b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b82:	2b3e      	cmp	r3, #62	; 0x3e
 8004b84:	d81b      	bhi.n	8004bbe <USB_EPStartXfer+0x56e>
 8004b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <USB_EPStartXfer+0x556>
 8004b9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ba6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	029b      	lsls	r3, r3, #10
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e063      	b.n	8004c86 <USB_EPStartXfer+0x636>
 8004bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d104      	bne.n	8004bde <USB_EPStartXfer+0x58e>
 8004bd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004bde:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	801a      	strh	r2, [r3, #0]
 8004bfe:	e042      	b.n	8004c86 <USB_EPStartXfer+0x636>
 8004c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d13a      	bne.n	8004c86 <USB_EPStartXfer+0x636>
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c1c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	4619      	mov	r1, r3
 8004c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c42:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	440a      	add	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	011a      	lsls	r2, r3, #4
 8004c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	891b      	ldrh	r3, [r3, #8]
 8004c92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6959      	ldr	r1, [r3, #20]
 8004ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004cb0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004cb4:	6800      	ldr	r0, [r0, #0]
 8004cb6:	f001 fc41 	bl	800653c <USB_WritePMA>
 8004cba:	f000 be0e 	b.w	80058da <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d16d      	bne.n	8004daa <USB_EPStartXfer+0x75a>
 8004cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	461a      	mov	r2, r3
 8004cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cee:	4413      	add	r3, r2
 8004cf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	011a      	lsls	r2, r3, #4
 8004d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d02:	4413      	add	r3, r2
 8004d04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d08:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d112      	bne.n	8004d38 <USB_EPStartXfer+0x6e8>
 8004d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d24:	881b      	ldrh	r3, [r3, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d34:	801a      	strh	r2, [r3, #0]
 8004d36:	e063      	b.n	8004e00 <USB_EPStartXfer+0x7b0>
 8004d38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3e:	d817      	bhi.n	8004d70 <USB_EPStartXfer+0x720>
 8004d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <USB_EPStartXfer+0x710>
 8004d56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d60:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	029b      	lsls	r3, r3, #10
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e047      	b.n	8004e00 <USB_EPStartXfer+0x7b0>
 8004d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <USB_EPStartXfer+0x740>
 8004d86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	029b      	lsls	r3, r3, #10
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e02a      	b.n	8004e00 <USB_EPStartXfer+0x7b0>
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d122      	bne.n	8004e00 <USB_EPStartXfer+0x7b0>
 8004dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	653b      	str	r3, [r7, #80]	; 0x50
 8004dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dda:	4413      	add	r3, r2
 8004ddc:	653b      	str	r3, [r7, #80]	; 0x50
 8004dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	011a      	lsls	r2, r3, #4
 8004dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dee:	4413      	add	r3, r2
 8004df0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004df4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	891b      	ldrh	r3, [r3, #8]
 8004e0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6959      	ldr	r1, [r3, #20]
 8004e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e26:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e2a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e2e:	6800      	ldr	r0, [r0, #0]
 8004e30:	f001 fb84 	bl	800653c <USB_WritePMA>
            ep->xfer_buff += len;
 8004e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e44:	441a      	add	r2, r3
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d90f      	bls.n	8004e8e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6a1a      	ldr	r2, [r3, #32]
 8004e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e7e:	1ad2      	subs	r2, r2, r3
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	621a      	str	r2, [r3, #32]
 8004e8c:	e00e      	b.n	8004eac <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d16d      	bne.n	8004fa4 <USB_EPStartXfer+0x954>
 8004ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ecc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	4413      	add	r3, r2
 8004eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8004eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	011a      	lsls	r2, r3, #4
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	4413      	add	r3, r2
 8004efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d112      	bne.n	8004f32 <USB_EPStartXfer+0x8e2>
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	e05d      	b.n	8004fee <USB_EPStartXfer+0x99e>
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	2b3e      	cmp	r3, #62	; 0x3e
 8004f38:	d817      	bhi.n	8004f6a <USB_EPStartXfer+0x91a>
 8004f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3e:	085b      	lsrs	r3, r3, #1
 8004f40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <USB_EPStartXfer+0x90a>
 8004f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f54:	3301      	adds	r3, #1
 8004f56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	029b      	lsls	r3, r3, #10
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e041      	b.n	8004fee <USB_EPStartXfer+0x99e>
 8004f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f78:	f003 031f 	and.w	r3, r3, #31
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <USB_EPStartXfer+0x93a>
 8004f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f84:	3b01      	subs	r3, #1
 8004f86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	e024      	b.n	8004fee <USB_EPStartXfer+0x99e>
 8004fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11c      	bne.n	8004fee <USB_EPStartXfer+0x99e>
 8004fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fc8:	4413      	add	r3, r2
 8004fca:	643b      	str	r3, [r7, #64]	; 0x40
 8004fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	011a      	lsls	r2, r3, #4
 8004fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fdc:	4413      	add	r3, r2
 8004fde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	895b      	ldrh	r3, [r3, #10]
 8004ffa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6959      	ldr	r1, [r3, #20]
 800500a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500e:	b29b      	uxth	r3, r3
 8005010:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005014:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005018:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800501c:	6800      	ldr	r0, [r0, #0]
 800501e:	f001 fa8d 	bl	800653c <USB_WritePMA>
 8005022:	f000 bc5a 	b.w	80058da <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	441a      	add	r2, r3
 800507a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800507e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508e:	b29b      	uxth	r3, r3
 8005090:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800509e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b2:	4413      	add	r3, r2
 80050b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	011a      	lsls	r2, r3, #4
 80050c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	891b      	ldrh	r3, [r3, #8]
 80050e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6959      	ldr	r1, [r3, #20]
 80050f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80050fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005102:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005106:	6800      	ldr	r0, [r0, #0]
 8005108:	f001 fa18 	bl	800653c <USB_WritePMA>
 800510c:	e3e5      	b.n	80058da <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800510e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	441a      	add	r2, r3
 8005152:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800515a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800515e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800516a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 81bc 	beq.w	8005528 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d16d      	bne.n	80052aa <USB_EPStartXfer+0xc5a>
 80051ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ee:	4413      	add	r3, r2
 80051f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	011a      	lsls	r2, r3, #4
 8005200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005202:	4413      	add	r3, r2
 8005204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005208:	677b      	str	r3, [r7, #116]	; 0x74
 800520a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d112      	bne.n	8005238 <USB_EPStartXfer+0xbe8>
 8005212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800521c:	b29a      	uxth	r2, r3
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005230:	b29a      	uxth	r2, r3
 8005232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e060      	b.n	80052fa <USB_EPStartXfer+0xcaa>
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	2b3e      	cmp	r3, #62	; 0x3e
 800523e:	d817      	bhi.n	8005270 <USB_EPStartXfer+0xc20>
 8005240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800524a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <USB_EPStartXfer+0xc10>
 8005256:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800525a:	3301      	adds	r3, #1
 800525c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005260:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005264:	b29b      	uxth	r3, r3
 8005266:	029b      	lsls	r3, r3, #10
 8005268:	b29a      	uxth	r2, r3
 800526a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e044      	b.n	80052fa <USB_EPStartXfer+0xcaa>
 8005270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800527a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <USB_EPStartXfer+0xc40>
 8005286:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800528a:	3b01      	subs	r3, #1
 800528c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005290:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005294:	b29b      	uxth	r3, r3
 8005296:	029b      	lsls	r3, r3, #10
 8005298:	b29b      	uxth	r3, r3
 800529a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	e027      	b.n	80052fa <USB_EPStartXfer+0xcaa>
 80052aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d11f      	bne.n	80052fa <USB_EPStartXfer+0xcaa>
 80052ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052d0:	4413      	add	r3, r2
 80052d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	011a      	lsls	r2, r3, #4
 80052e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	895b      	ldrh	r3, [r3, #10]
 8005306:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800530a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6959      	ldr	r1, [r3, #20]
 8005316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531a:	b29b      	uxth	r3, r3
 800531c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005320:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005324:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005328:	6800      	ldr	r0, [r0, #0]
 800532a:	f001 f907 	bl	800653c <USB_WritePMA>
          ep->xfer_buff += len;
 800532e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800533e:	441a      	add	r2, r3
 8005340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800534c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	429a      	cmp	r2, r3
 8005366:	d90f      	bls.n	8005388 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005378:	1ad2      	subs	r2, r2, r3
 800537a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	621a      	str	r2, [r3, #32]
 8005386:	e00e      	b.n	80053a6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80053a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8295 	beq.w	80058da <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d16d      	bne.n	800549c <USB_EPStartXfer+0xe4c>
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80053cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053da:	b29b      	uxth	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053e0:	4413      	add	r3, r2
 80053e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	011a      	lsls	r2, r3, #4
 80053f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053f4:	4413      	add	r3, r2
 80053f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053fa:	667b      	str	r3, [r7, #100]	; 0x64
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d112      	bne.n	800542a <USB_EPStartXfer+0xdda>
 8005404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800540e:	b29a      	uxth	r2, r3
 8005410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005422:	b29a      	uxth	r2, r3
 8005424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e063      	b.n	80054f2 <USB_EPStartXfer+0xea2>
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	2b3e      	cmp	r3, #62	; 0x3e
 8005430:	d817      	bhi.n	8005462 <USB_EPStartXfer+0xe12>
 8005432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800543c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <USB_EPStartXfer+0xe02>
 8005448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544c:	3301      	adds	r3, #1
 800544e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005456:	b29b      	uxth	r3, r3
 8005458:	029b      	lsls	r3, r3, #10
 800545a:	b29a      	uxth	r2, r3
 800545c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e047      	b.n	80054f2 <USB_EPStartXfer+0xea2>
 8005462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800546c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <USB_EPStartXfer+0xe32>
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547c:	3b01      	subs	r3, #1
 800547e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005486:	b29b      	uxth	r3, r3
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	b29b      	uxth	r3, r3
 800548c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005494:	b29a      	uxth	r2, r3
 8005496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	e02a      	b.n	80054f2 <USB_EPStartXfer+0xea2>
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d122      	bne.n	80054f2 <USB_EPStartXfer+0xea2>
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	673b      	str	r3, [r7, #112]	; 0x70
 80054b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054cc:	4413      	add	r3, r2
 80054ce:	673b      	str	r3, [r7, #112]	; 0x70
 80054d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	011a      	lsls	r2, r3, #4
 80054de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e0:	4413      	add	r3, r2
 80054e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	891b      	ldrh	r3, [r3, #8]
 80054fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6959      	ldr	r1, [r3, #20]
 800550e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005512:	b29b      	uxth	r3, r3
 8005514:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005518:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800551c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005520:	6800      	ldr	r0, [r0, #0]
 8005522:	f001 f80b 	bl	800653c <USB_WritePMA>
 8005526:	e1d8      	b.n	80058da <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	785b      	ldrb	r3, [r3, #1]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d178      	bne.n	800562a <USB_EPStartXfer+0xfda>
 8005538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800555c:	4413      	add	r3, r2
 800555e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	011a      	lsls	r2, r3, #4
 8005570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005574:	4413      	add	r3, r2
 8005576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800557a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800557e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <USB_EPStartXfer+0xf64>
 8005586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29b      	uxth	r3, r3
 800558e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005592:	b29a      	uxth	r2, r3
 8005594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	e06b      	b.n	800568c <USB_EPStartXfer+0x103c>
 80055b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b8:	2b3e      	cmp	r3, #62	; 0x3e
 80055ba:	d818      	bhi.n	80055ee <USB_EPStartXfer+0xf9e>
 80055bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <USB_EPStartXfer+0xf8c>
 80055d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055d6:	3301      	adds	r3, #1
 80055d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	e04e      	b.n	800568c <USB_EPStartXfer+0x103c>
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80055f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <USB_EPStartXfer+0xfbe>
 8005604:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005608:	3b01      	subs	r3, #1
 800560a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800560e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005612:	b29b      	uxth	r3, r3
 8005614:	029b      	lsls	r3, r3, #10
 8005616:	b29b      	uxth	r3, r3
 8005618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005620:	b29a      	uxth	r2, r3
 8005622:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005626:	801a      	strh	r2, [r3, #0]
 8005628:	e030      	b.n	800568c <USB_EPStartXfer+0x103c>
 800562a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d128      	bne.n	800568c <USB_EPStartXfer+0x103c>
 800563a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800565e:	4413      	add	r3, r2
 8005660:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	011a      	lsls	r2, r3, #4
 8005672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005676:	4413      	add	r3, r2
 8005678:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800567c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800568a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	891b      	ldrh	r3, [r3, #8]
 8005698:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6959      	ldr	r1, [r3, #20]
 80056a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056b2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056b6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	f000 ff3e 	bl	800653c <USB_WritePMA>
          ep->xfer_buff += len;
 80056c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d0:	441a      	add	r2, r3
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d90f      	bls.n	800571a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80056fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	621a      	str	r2, [r3, #32]
 8005718:	e00e      	b.n	8005738 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2200      	movs	r2, #0
 8005736:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80cc 	beq.w	80058da <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005746:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d178      	bne.n	8005852 <USB_EPStartXfer+0x1202>
 8005760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800576e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005772:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577c:	b29b      	uxth	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005784:	4413      	add	r3, r2
 8005786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	011a      	lsls	r2, r3, #4
 8005798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800579c:	4413      	add	r3, r2
 800579e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d116      	bne.n	80057dc <USB_EPStartXfer+0x118c>
 80057ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d8:	801a      	strh	r2, [r3, #0]
 80057da:	e064      	b.n	80058a6 <USB_EPStartXfer+0x1256>
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	2b3e      	cmp	r3, #62	; 0x3e
 80057e2:	d818      	bhi.n	8005816 <USB_EPStartXfer+0x11c6>
 80057e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e8:	085b      	lsrs	r3, r3, #1
 80057ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d004      	beq.n	8005804 <USB_EPStartXfer+0x11b4>
 80057fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fe:	3301      	adds	r3, #1
 8005800:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005808:	b29b      	uxth	r3, r3
 800580a:	029b      	lsls	r3, r3, #10
 800580c:	b29a      	uxth	r2, r3
 800580e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e047      	b.n	80058a6 <USB_EPStartXfer+0x1256>
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <USB_EPStartXfer+0x11e6>
 800582c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005830:	3b01      	subs	r3, #1
 8005832:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800583a:	b29b      	uxth	r3, r3
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005848:	b29a      	uxth	r2, r3
 800584a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	e029      	b.n	80058a6 <USB_EPStartXfer+0x1256>
 8005852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d121      	bne.n	80058a6 <USB_EPStartXfer+0x1256>
 8005862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005870:	b29b      	uxth	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005878:	4413      	add	r3, r2
 800587a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800587e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	011a      	lsls	r2, r3, #4
 800588c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005890:	4413      	add	r3, r2
 8005892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800589a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589e:	b29a      	uxth	r2, r3
 80058a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	895b      	ldrh	r3, [r3, #10]
 80058b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6959      	ldr	r1, [r3, #20]
 80058c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058d4:	6800      	ldr	r0, [r0, #0]
 80058d6:	f000 fe31 	bl	800653c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058fc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	8013      	strh	r3, [r2, #0]
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005912:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005916:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800591a:	8812      	ldrh	r2, [r2, #0]
 800591c:	f082 0210 	eor.w	r2, r2, #16
 8005920:	801a      	strh	r2, [r3, #0]
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800592a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800592e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005932:	8812      	ldrh	r2, [r2, #0]
 8005934:	f082 0220 	eor.w	r2, r2, #32
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	441a      	add	r2, r3
 8005954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005958:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800596a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800596e:	b29b      	uxth	r3, r3
 8005970:	8013      	strh	r3, [r2, #0]
 8005972:	f000 bc9f 	b.w	80062b4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	7b1b      	ldrb	r3, [r3, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 80ae 	bne.w	8005ae4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d917      	bls.n	80059d4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c4:	1ad2      	subs	r2, r2, r3
 80059c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	619a      	str	r2, [r3, #24]
 80059d2:	e00e      	b.n	80059f2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a16:	4413      	add	r3, r2
 8005a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a2e:	4413      	add	r3, r2
 8005a30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <USB_EPStartXfer+0x141e>
 8005a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e3e8      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
 8005a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a72:	2b3e      	cmp	r3, #62	; 0x3e
 8005a74:	d818      	bhi.n	8005aa8 <USB_EPStartXfer+0x1458>
 8005a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <USB_EPStartXfer+0x1446>
 8005a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a90:	3301      	adds	r3, #1
 8005a92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e3cb      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
 8005aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <USB_EPStartXfer+0x1478>
 8005abe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005ac8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	e3ad      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f040 8200 	bne.w	8005ef6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 8091 	bne.w	8005c2a <USB_EPStartXfer+0x15da>
 8005b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	011a      	lsls	r2, r3, #4
 8005b40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b44:	4413      	add	r3, r2
 8005b46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d116      	bne.n	8005b8c <USB_EPStartXfer+0x153c>
 8005b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e083      	b.n	8005c94 <USB_EPStartXfer+0x1644>
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9a:	d820      	bhi.n	8005bde <USB_EPStartXfer+0x158e>
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <USB_EPStartXfer+0x157c>
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bda:	801a      	strh	r2, [r3, #0]
 8005bdc:	e05a      	b.n	8005c94 <USB_EPStartXfer+0x1644>
 8005bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	095b      	lsrs	r3, r3, #5
 8005bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <USB_EPStartXfer+0x15be>
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	029b      	lsls	r3, r3, #10
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e034      	b.n	8005c94 <USB_EPStartXfer+0x1644>
 8005c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	785b      	ldrb	r3, [r3, #1]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d12c      	bne.n	8005c94 <USB_EPStartXfer+0x1644>
 8005c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c5e:	4413      	add	r3, r2
 8005c60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f040 8091 	bne.w	8005dd6 <USB_EPStartXfer+0x1786>
 8005cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cd8:	4413      	add	r3, r2
 8005cda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	011a      	lsls	r2, r3, #4
 8005cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d116      	bne.n	8005d38 <USB_EPStartXfer+0x16e8>
 8005d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d34:	801a      	strh	r2, [r3, #0]
 8005d36:	e07c      	b.n	8005e32 <USB_EPStartXfer+0x17e2>
 8005d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b3e      	cmp	r3, #62	; 0x3e
 8005d46:	d820      	bhi.n	8005d8a <USB_EPStartXfer+0x173a>
 8005d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d004      	beq.n	8005d78 <USB_EPStartXfer+0x1728>
 8005d6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d72:	3301      	adds	r3, #1
 8005d74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	029b      	lsls	r3, r3, #10
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	e053      	b.n	8005e32 <USB_EPStartXfer+0x17e2>
 8005d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <USB_EPStartXfer+0x176a>
 8005db0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005db4:	3b01      	subs	r3, #1
 8005db6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dd2:	801a      	strh	r2, [r3, #0]
 8005dd4:	e02d      	b.n	8005e32 <USB_EPStartXfer+0x17e2>
 8005dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d125      	bne.n	8005e32 <USB_EPStartXfer+0x17e2>
 8005de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	011a      	lsls	r2, r3, #4
 8005e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e14:	4413      	add	r3, r2
 8005e16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e30:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 81fe 	beq.w	8006240 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e64:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <USB_EPStartXfer+0x182c>
 8005e70:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10d      	bne.n	8005e98 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e7c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 81db 	bne.w	8006240 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e8a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 81d4 	bne.w	8006240 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	441a      	add	r2, r3
 8005edc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	8013      	strh	r3, [r2, #0]
 8005ef4:	e1a4      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	78db      	ldrb	r3, [r3, #3]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 819a 	bne.w	800623c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699a      	ldr	r2, [r3, #24]
 8005f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d917      	bls.n	8005f54 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699a      	ldr	r2, [r3, #24]
 8005f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f44:	1ad2      	subs	r2, r2, r3
 8005f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	619a      	str	r2, [r3, #24]
 8005f52:	e00e      	b.n	8005f72 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d178      	bne.n	8006074 <USB_EPStartXfer+0x1a24>
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d116      	bne.n	8005ffe <USB_EPStartXfer+0x19ae>
 8005fd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e06b      	b.n	80060d6 <USB_EPStartXfer+0x1a86>
 8005ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006002:	2b3e      	cmp	r3, #62	; 0x3e
 8006004:	d818      	bhi.n	8006038 <USB_EPStartXfer+0x19e8>
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <USB_EPStartXfer+0x19d6>
 800601c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006020:	3301      	adds	r3, #1
 8006022:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	e04e      	b.n	80060d6 <USB_EPStartXfer+0x1a86>
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <USB_EPStartXfer+0x1a08>
 800604e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006052:	3b01      	subs	r3, #1
 8006054:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800605c:	b29b      	uxth	r3, r3
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e030      	b.n	80060d6 <USB_EPStartXfer+0x1a86>
 8006074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	785b      	ldrb	r3, [r3, #1]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d128      	bne.n	80060d6 <USB_EPStartXfer+0x1a86>
 8006084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	4413      	add	r3, r2
 80060aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80060ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	011a      	lsls	r2, r3, #4
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80060ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d178      	bne.n	80061e6 <USB_EPStartXfer+0x1b96>
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006110:	b29b      	uxth	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006118:	4413      	add	r3, r2
 800611a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	011a      	lsls	r2, r3, #4
 800612c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006130:	4413      	add	r3, r2
 8006132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800613a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d116      	bne.n	8006170 <USB_EPStartXfer+0x1b20>
 8006142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800614e:	b29a      	uxth	r2, r3
 8006150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006154:	801a      	strh	r2, [r3, #0]
 8006156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006166:	b29a      	uxth	r2, r3
 8006168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800616c:	801a      	strh	r2, [r3, #0]
 800616e:	e067      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
 8006170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006174:	2b3e      	cmp	r3, #62	; 0x3e
 8006176:	d818      	bhi.n	80061aa <USB_EPStartXfer+0x1b5a>
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d004      	beq.n	8006198 <USB_EPStartXfer+0x1b48>
 800618e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006192:	3301      	adds	r3, #1
 8006194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006198:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800619c:	b29b      	uxth	r3, r3
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e04a      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
 80061aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ae:	095b      	lsrs	r3, r3, #5
 80061b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <USB_EPStartXfer+0x1b7a>
 80061c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061c4:	3b01      	subs	r3, #1
 80061c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	e02c      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d124      	bne.n	8006240 <USB_EPStartXfer+0x1bf0>
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006204:	b29b      	uxth	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	4413      	add	r3, r2
 800620e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	011a      	lsls	r2, r3, #4
 8006220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006224:	4413      	add	r3, r2
 8006226:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800622a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800622e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e001      	b.n	8006240 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e03a      	b.n	80062b6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006266:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800626a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800626e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006272:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006276:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800627a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800627e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80062a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e8:	81bb      	strh	r3, [r7, #12]
 80062ea:	89bb      	ldrh	r3, [r7, #12]
 80062ec:	f083 0310 	eor.w	r3, r3, #16
 80062f0:	81bb      	strh	r3, [r7, #12]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	441a      	add	r2, r3
 80062fc:	89bb      	ldrh	r3, [r7, #12]
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]
 8006312:	e01f      	b.n	8006354 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	b29b      	uxth	r3, r3
 8006322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	81fb      	strh	r3, [r7, #14]
 800632c:	89fb      	ldrh	r3, [r7, #14]
 800632e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006332:	81fb      	strh	r3, [r7, #14]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	441a      	add	r2, r3
 800633e:	89fb      	ldrh	r3, [r7, #14]
 8006340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800634c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006350:	b29b      	uxth	r3, r3
 8006352:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	7b1b      	ldrb	r3, [r3, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 809d 	bne.w	80064ae <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d04c      	beq.n	8006416 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	823b      	strh	r3, [r7, #16]
 800638a:	8a3b      	ldrh	r3, [r7, #16]
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01b      	beq.n	80063cc <USB_EPClearStall+0x6c>
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	81fb      	strh	r3, [r7, #14]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	441a      	add	r2, r3
 80063b6:	89fb      	ldrh	r3, [r7, #14]
 80063b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	78db      	ldrb	r3, [r3, #3]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d06c      	beq.n	80064ae <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ea:	81bb      	strh	r3, [r7, #12]
 80063ec:	89bb      	ldrh	r3, [r7, #12]
 80063ee:	f083 0320 	eor.w	r3, r3, #32
 80063f2:	81bb      	strh	r3, [r7, #12]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	441a      	add	r2, r3
 80063fe:	89bb      	ldrh	r3, [r7, #12]
 8006400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006410:	b29b      	uxth	r3, r3
 8006412:	8013      	strh	r3, [r2, #0]
 8006414:	e04b      	b.n	80064ae <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	82fb      	strh	r3, [r7, #22]
 8006424:	8afb      	ldrh	r3, [r7, #22]
 8006426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d01b      	beq.n	8006466 <USB_EPClearStall+0x106>
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006444:	82bb      	strh	r3, [r7, #20]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	441a      	add	r2, r3
 8006450:	8abb      	ldrh	r3, [r7, #20]
 8006452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800645e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006462:	b29b      	uxth	r3, r3
 8006464:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	827b      	strh	r3, [r7, #18]
 800647e:	8a7b      	ldrh	r3, [r7, #18]
 8006480:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006484:	827b      	strh	r3, [r7, #18]
 8006486:	8a7b      	ldrh	r3, [r7, #18]
 8006488:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800648c:	827b      	strh	r3, [r7, #18]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	441a      	add	r2, r3
 8006498:	8a7b      	ldrh	r3, [r7, #18]
 800649a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr

080064e0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr

080064f4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006516:	b29b      	uxth	r3, r3
 8006518:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800651a:	68fb      	ldr	r3, [r7, #12]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr

08006526 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	bc80      	pop	{r7}
 800653a:	4770      	bx	lr

0800653c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800653c:	b480      	push	{r7}
 800653e:	b08d      	sub	sp, #52	; 0x34
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4611      	mov	r1, r2
 8006548:	461a      	mov	r2, r3
 800654a:	460b      	mov	r3, r1
 800654c:	80fb      	strh	r3, [r7, #6]
 800654e:	4613      	mov	r3, r2
 8006550:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006552:	88bb      	ldrh	r3, [r7, #4]
 8006554:	3301      	adds	r3, #1
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	005a      	lsls	r2, r3, #1
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006574:	e01e      	b.n	80065b4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	3301      	adds	r3, #1
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	b29b      	uxth	r3, r3
 800658c:	461a      	mov	r2, r3
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	b29a      	uxth	r2, r3
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	3302      	adds	r3, #2
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	3302      	adds	r3, #2
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	3301      	adds	r3, #1
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	3b01      	subs	r3, #1
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1dd      	bne.n	8006576 <USB_WritePMA+0x3a>
  }
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	3734      	adds	r7, #52	; 0x34
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr

080065c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b08b      	sub	sp, #44	; 0x2c
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	4611      	mov	r1, r2
 80065d2:	461a      	mov	r2, r3
 80065d4:	460b      	mov	r3, r1
 80065d6:	80fb      	strh	r3, [r7, #6]
 80065d8:	4613      	mov	r3, r2
 80065da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80065dc:	88bb      	ldrh	r3, [r7, #4]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80065ec:	88fb      	ldrh	r3, [r7, #6]
 80065ee:	005a      	lsls	r2, r3, #1
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
 80065fe:	e01b      	b.n	8006638 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	881b      	ldrh	r3, [r3, #0]
 8006604:	b29b      	uxth	r3, r3
 8006606:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	3302      	adds	r3, #2
 800660c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	b2da      	uxtb	r2, r3
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	3301      	adds	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	b2da      	uxtb	r2, r3
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3301      	adds	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	3302      	adds	r3, #2
 8006630:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	3b01      	subs	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e0      	bne.n	8006600 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800663e:	88bb      	ldrh	r3, [r7, #4]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	b2da      	uxtb	r2, r3
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	701a      	strb	r2, [r3, #0]
  }
}
 800665a:	bf00      	nop
 800665c:	372c      	adds	r7, #44	; 0x2c
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr

08006664 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006670:	2304      	movs	r3, #4
 8006672:	2203      	movs	r2, #3
 8006674:	2181      	movs	r1, #129	; 0x81
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fc61 	bl	8007f3e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006682:	2010      	movs	r0, #16
 8006684:	f001 fd70 	bl	8008168 <USBD_static_malloc>
 8006688:	4602      	mov	r2, r0
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800669a:	2302      	movs	r3, #2
 800669c:	e005      	b.n	80066aa <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a4:	2200      	movs	r2, #0
 80066a6:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80066be:	2181      	movs	r1, #129	; 0x81
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f001 fc62 	bl	8007f8a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 fd4f 	bl	8008180 <USBD_static_free>
    pdev->pClassData = NULL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006704:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800671e:	2b00      	cmp	r3, #0
 8006720:	d045      	beq.n	80067ae <USBD_HID_Setup+0xba>
 8006722:	2b20      	cmp	r3, #32
 8006724:	f040 80d3 	bne.w	80068ce <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	3b02      	subs	r3, #2
 800672e:	2b09      	cmp	r3, #9
 8006730:	d835      	bhi.n	800679e <USBD_HID_Setup+0xaa>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <USBD_HID_Setup+0x44>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	0800678f 	.word	0x0800678f
 800673c:	0800676f 	.word	0x0800676f
 8006740:	0800679f 	.word	0x0800679f
 8006744:	0800679f 	.word	0x0800679f
 8006748:	0800679f 	.word	0x0800679f
 800674c:	0800679f 	.word	0x0800679f
 8006750:	0800679f 	.word	0x0800679f
 8006754:	0800679f 	.word	0x0800679f
 8006758:	0800677d 	.word	0x0800677d
 800675c:	08006761 	.word	0x08006761
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	885b      	ldrh	r3, [r3, #2]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	601a      	str	r2, [r3, #0]
          break;
 800676c:	e01e      	b.n	80067ac <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2201      	movs	r2, #1
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 f922 	bl	80079be <USBD_CtlSendData>
          break;
 800677a:	e017      	b.n	80067ac <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	885b      	ldrh	r3, [r3, #2]
 8006780:	0a1b      	lsrs	r3, r3, #8
 8006782:	b29b      	uxth	r3, r3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	461a      	mov	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	605a      	str	r2, [r3, #4]
          break;
 800678c:	e00e      	b.n	80067ac <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	3304      	adds	r3, #4
 8006792:	2201      	movs	r2, #1
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 f911 	bl	80079be <USBD_CtlSendData>
          break;
 800679c:	e006      	b.n	80067ac <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f8a2 	bl	80078ea <USBD_CtlError>
          ret = USBD_FAIL;
 80067a6:	2302      	movs	r3, #2
 80067a8:	75fb      	strb	r3, [r7, #23]
          break;
 80067aa:	bf00      	nop
      }
      break;
 80067ac:	e096      	b.n	80068dc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b0b      	cmp	r3, #11
 80067b4:	f200 8083 	bhi.w	80068be <USBD_HID_Setup+0x1ca>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <USBD_HID_Setup+0xcc>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067f1 	.word	0x080067f1
 80067c4:	080068bf 	.word	0x080068bf
 80067c8:	080068bf 	.word	0x080068bf
 80067cc:	080068bf 	.word	0x080068bf
 80067d0:	080068bf 	.word	0x080068bf
 80067d4:	080068bf 	.word	0x080068bf
 80067d8:	08006819 	.word	0x08006819
 80067dc:	080068bf 	.word	0x080068bf
 80067e0:	080068bf 	.word	0x080068bf
 80067e4:	080068bf 	.word	0x080068bf
 80067e8:	08006871 	.word	0x08006871
 80067ec:	08006899 	.word	0x08006899
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d107      	bne.n	800680a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80067fa:	f107 030e 	add.w	r3, r7, #14
 80067fe:	2202      	movs	r2, #2
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 f8db 	bl	80079be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006808:	e060      	b.n	80068cc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 f86c 	bl	80078ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006812:	2302      	movs	r3, #2
 8006814:	75fb      	strb	r3, [r7, #23]
          break;
 8006816:	e059      	b.n	80068cc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	885b      	ldrh	r3, [r3, #2]
 800681c:	0a1b      	lsrs	r3, r3, #8
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b22      	cmp	r3, #34	; 0x22
 8006822:	d108      	bne.n	8006836 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	88db      	ldrh	r3, [r3, #6]
 8006828:	2b4a      	cmp	r3, #74	; 0x4a
 800682a:	bf28      	it	cs
 800682c:	234a      	movcs	r3, #74	; 0x4a
 800682e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006830:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <USBD_HID_Setup+0x1f4>)
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	e015      	b.n	8006862 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	0a1b      	lsrs	r3, r3, #8
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b21      	cmp	r3, #33	; 0x21
 8006840:	d108      	bne.n	8006854 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006842:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <USBD_HID_Setup+0x1f8>)
 8006844:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	88db      	ldrh	r3, [r3, #6]
 800684a:	2b09      	cmp	r3, #9
 800684c:	bf28      	it	cs
 800684e:	2309      	movcs	r3, #9
 8006850:	83fb      	strh	r3, [r7, #30]
 8006852:	e006      	b.n	8006862 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 f847 	bl	80078ea <USBD_CtlError>
            ret = USBD_FAIL;
 800685c:	2302      	movs	r3, #2
 800685e:	75fb      	strb	r3, [r7, #23]
            break;
 8006860:	e034      	b.n	80068cc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006862:	8bfb      	ldrh	r3, [r7, #30]
 8006864:	461a      	mov	r2, r3
 8006866:	69b9      	ldr	r1, [r7, #24]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 f8a8 	bl	80079be <USBD_CtlSendData>
          break;
 800686e:	e02d      	b.n	80068cc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006876:	2b03      	cmp	r3, #3
 8006878:	d107      	bne.n	800688a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	3308      	adds	r3, #8
 800687e:	2201      	movs	r2, #1
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f001 f89b 	bl	80079be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006888:	e020      	b.n	80068cc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800688a:	6839      	ldr	r1, [r7, #0]
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f82c 	bl	80078ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006892:	2302      	movs	r3, #2
 8006894:	75fb      	strb	r3, [r7, #23]
          break;
 8006896:	e019      	b.n	80068cc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d106      	bne.n	80068b0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	885b      	ldrh	r3, [r3, #2]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ae:	e00d      	b.n	80068cc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 f819 	bl	80078ea <USBD_CtlError>
            ret = USBD_FAIL;
 80068b8:	2302      	movs	r3, #2
 80068ba:	75fb      	strb	r3, [r7, #23]
          break;
 80068bc:	e006      	b.n	80068cc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 f812 	bl	80078ea <USBD_CtlError>
          ret = USBD_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	75fb      	strb	r3, [r7, #23]
          break;
 80068ca:	bf00      	nop
      }
      break;
 80068cc:	e006      	b.n	80068dc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 f80a 	bl	80078ea <USBD_CtlError>
      ret = USBD_FAIL;
 80068d6:	2302      	movs	r3, #2
 80068d8:	75fb      	strb	r3, [r7, #23]
      break;
 80068da:	bf00      	nop
  }

  return ret;
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200000c8 	.word	0x200000c8
 80068ec:	200000b0 	.word	0x200000b0

080068f0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2222      	movs	r2, #34	; 0x22
 80068fc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80068fe:	4b03      	ldr	r3, [pc, #12]	; (800690c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000044 	.word	0x20000044

08006910 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2222      	movs	r2, #34	; 0x22
 800691c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800691e:	4b03      	ldr	r3, [pc, #12]	; (800692c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000068 	.word	0x20000068

08006930 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2222      	movs	r2, #34	; 0x22
 800693c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800693e:	4b03      	ldr	r3, [pc, #12]	; (800694c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	2000008c 	.word	0x2000008c

08006950 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006962:	2200      	movs	r2, #0
 8006964:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr
	...

08006974 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	220a      	movs	r2, #10
 8006980:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006982:	4b03      	ldr	r3, [pc, #12]	; (8006990 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	200000bc 	.word	0x200000bc

08006994 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e01a      	b.n	80069e2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	79fa      	ldrb	r2, [r7, #7]
 80069d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f001 fa4c 	bl	8007e78 <USBD_LL_Init>

  return USBD_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]
 8006a0a:	e001      	b.n	8006a10 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fa6f 	bl	8007f08 <USBD_LL_Start>

  return USBD_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a54:	2302      	movs	r3, #2
 8006a56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00c      	beq.n	8006a7c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	4798      	blx	r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b082      	sub	sp, #8
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3

  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fed7 	bl	8007872 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d016      	beq.n	8006b16 <USBD_LL_SetupStage+0x6a>
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d81c      	bhi.n	8006b26 <USBD_LL_SetupStage+0x7a>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <USBD_LL_SetupStage+0x4a>
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d008      	beq.n	8006b06 <USBD_LL_SetupStage+0x5a>
 8006af4:	e017      	b.n	8006b26 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9ca 	bl	8006e98 <USBD_StdDevReq>
      break;
 8006b04:	e01a      	b.n	8006b3c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa2c 	bl	8006f6c <USBD_StdItfReq>
      break;
 8006b14:	e012      	b.n	8006b3c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa6c 	bl	8006ffc <USBD_StdEPReq>
      break;
 8006b24:	e00a      	b.n	8006b3c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fa47 	bl	8007fc8 <USBD_LL_StallEP>
      break;
 8006b3a:	bf00      	nop
  }

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d14b      	bne.n	8006bf2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d134      	bne.n	8006bd6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d919      	bls.n	8006bac <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	68da      	ldr	r2, [r3, #12]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d203      	bcs.n	8006b9a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	e002      	b.n	8006ba0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 ff38 	bl	8007a1a <USBD_CtlContinueRx>
 8006baa:	e038      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d105      	bne.n	8006bce <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 ff35 	bl	8007a3e <USBD_CtlSendStatus>
 8006bd4:	e023      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d11e      	bne.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f001 f9ec 	bl	8007fc8 <USBD_LL_StallEP>
 8006bf0:	e015      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d108      	bne.n	8006c1a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	7afa      	ldrb	r2, [r7, #11]
 8006c12:	4611      	mov	r1, r2
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	4798      	blx	r3
 8006c18:	e001      	b.n	8006c1e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e000      	b.n	8006c20 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	460b      	mov	r3, r1
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c36:	7afb      	ldrb	r3, [r7, #11]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d17f      	bne.n	8006d3c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d15c      	bne.n	8006d06 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d915      	bls.n	8006c84 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fec0 	bl	80079f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c76:	2300      	movs	r3, #0
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f001 fa4f 	bl	8008120 <USBD_LL_PrepareReceive>
 8006c82:	e04e      	b.n	8006d22 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	6912      	ldr	r2, [r2, #16]
 8006c8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c90:	fb01 f202 	mul.w	r2, r1, r2
 8006c94:	1a9b      	subs	r3, r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11c      	bne.n	8006cd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d316      	bcc.n	8006cd4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d20f      	bcs.n	8006cd4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 fe9c 	bl	80079f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f001 fa27 	bl	8008120 <USBD_LL_PrepareReceive>
 8006cd2:	e026      	b.n	8006d22 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00a      	beq.n	8006cf6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d105      	bne.n	8006cf6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006cf6:	2180      	movs	r1, #128	; 0x80
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f001 f965 	bl	8007fc8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 feb0 	bl	8007a64 <USBD_CtlReceiveStatus>
 8006d04:	e00d      	b.n	8006d22 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d004      	beq.n	8006d1a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d1a:	2180      	movs	r1, #128	; 0x80
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f001 f953 	bl	8007fc8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d11d      	bne.n	8006d68 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7ff fe81 	bl	8006a34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d3a:	e015      	b.n	8006d68 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d108      	bne.n	8006d64 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	7afa      	ldrb	r2, [r7, #11]
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	4798      	blx	r3
 8006d62:	e001      	b.n	8006d68 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d64:	2302      	movs	r3, #2
 8006d66:	e000      	b.n	8006d6a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d7a:	2340      	movs	r3, #64	; 0x40
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2100      	movs	r1, #0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 f8dc 	bl	8007f3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2240      	movs	r2, #64	; 0x40
 8006d92:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d96:	2340      	movs	r3, #64	; 0x40
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2180      	movs	r1, #128	; 0x80
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 f8ce 	bl	8007f3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2240      	movs	r2, #64	; 0x40
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d009      	beq.n	8006dea <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6852      	ldr	r2, [r2, #4]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	4611      	mov	r1, r2
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
  }

  return USBD_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr

08006e12 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2204      	movs	r2, #4
 8006e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bc80      	pop	{r7}
 8006e38:	4770      	bx	lr

08006e3a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d105      	bne.n	8006e58 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr

08006e64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d10b      	bne.n	8006e8e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	d005      	beq.n	8006ebe <USBD_StdDevReq+0x26>
 8006eb2:	2b40      	cmp	r3, #64	; 0x40
 8006eb4:	d84f      	bhi.n	8006f56 <USBD_StdDevReq+0xbe>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <USBD_StdDevReq+0x36>
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	d14b      	bne.n	8006f56 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
      break;
 8006ecc:	e048      	b.n	8006f60 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b09      	cmp	r3, #9
 8006ed4:	d839      	bhi.n	8006f4a <USBD_StdDevReq+0xb2>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <USBD_StdDevReq+0x44>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006f2d 	.word	0x08006f2d
 8006ee0:	08006f41 	.word	0x08006f41
 8006ee4:	08006f4b 	.word	0x08006f4b
 8006ee8:	08006f37 	.word	0x08006f37
 8006eec:	08006f4b 	.word	0x08006f4b
 8006ef0:	08006f0f 	.word	0x08006f0f
 8006ef4:	08006f05 	.word	0x08006f05
 8006ef8:	08006f4b 	.word	0x08006f4b
 8006efc:	08006f23 	.word	0x08006f23
 8006f00:	08006f19 	.word	0x08006f19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f9dc 	bl	80072c4 <USBD_GetDescriptor>
          break;
 8006f0c:	e022      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fb3f 	bl	8007594 <USBD_SetAddress>
          break;
 8006f16:	e01d      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fb7e 	bl	800761c <USBD_SetConfig>
          break;
 8006f20:	e018      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fc07 	bl	8007738 <USBD_GetConfig>
          break;
 8006f2a:	e013      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fc37 	bl	80077a2 <USBD_GetStatus>
          break;
 8006f34:	e00e      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fc65 	bl	8007808 <USBD_SetFeature>
          break;
 8006f3e:	e009      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc74 	bl	8007830 <USBD_ClrFeature>
          break;
 8006f48:	e004      	b.n	8006f54 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fccc 	bl	80078ea <USBD_CtlError>
          break;
 8006f52:	bf00      	nop
      }
      break;
 8006f54:	e004      	b.n	8006f60 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fcc6 	bl	80078ea <USBD_CtlError>
      break;
 8006f5e:	bf00      	nop
  }

  return ret;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f82:	2b40      	cmp	r3, #64	; 0x40
 8006f84:	d005      	beq.n	8006f92 <USBD_StdItfReq+0x26>
 8006f86:	2b40      	cmp	r3, #64	; 0x40
 8006f88:	d82e      	bhi.n	8006fe8 <USBD_StdItfReq+0x7c>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <USBD_StdItfReq+0x26>
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d12a      	bne.n	8006fe8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d81d      	bhi.n	8006fda <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	889b      	ldrh	r3, [r3, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d813      	bhi.n	8006fd0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	88db      	ldrh	r3, [r3, #6]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d110      	bne.n	8006fe4 <USBD_StdItfReq+0x78>
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10d      	bne.n	8006fe4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fd38 	bl	8007a3e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fce:	e009      	b.n	8006fe4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc89 	bl	80078ea <USBD_CtlError>
          break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc84 	bl	80078ea <USBD_CtlError>
          break;
 8006fe2:	e000      	b.n	8006fe6 <USBD_StdItfReq+0x7a>
          break;
 8006fe4:	bf00      	nop
      }
      break;
 8006fe6:	e004      	b.n	8006ff2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc7d 	bl	80078ea <USBD_CtlError>
      break;
 8006ff0:	bf00      	nop
  }

  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007018:	2b40      	cmp	r3, #64	; 0x40
 800701a:	d007      	beq.n	800702c <USBD_StdEPReq+0x30>
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	f200 8146 	bhi.w	80072ae <USBD_StdEPReq+0x2b2>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <USBD_StdEPReq+0x40>
 8007026:	2b20      	cmp	r3, #32
 8007028:	f040 8141 	bne.w	80072ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
      break;
 800703a:	e13d      	b.n	80072b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007044:	2b20      	cmp	r3, #32
 8007046:	d10a      	bne.n	800705e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
 8007056:	4603      	mov	r3, r0
 8007058:	73fb      	strb	r3, [r7, #15]

        return ret;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	e12d      	b.n	80072ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	2b03      	cmp	r3, #3
 8007064:	d007      	beq.n	8007076 <USBD_StdEPReq+0x7a>
 8007066:	2b03      	cmp	r3, #3
 8007068:	f300 811b 	bgt.w	80072a2 <USBD_StdEPReq+0x2a6>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d072      	beq.n	8007156 <USBD_StdEPReq+0x15a>
 8007070:	2b01      	cmp	r3, #1
 8007072:	d03a      	beq.n	80070ea <USBD_StdEPReq+0xee>
 8007074:	e115      	b.n	80072a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707c:	2b02      	cmp	r3, #2
 800707e:	d002      	beq.n	8007086 <USBD_StdEPReq+0x8a>
 8007080:	2b03      	cmp	r3, #3
 8007082:	d015      	beq.n	80070b0 <USBD_StdEPReq+0xb4>
 8007084:	e02b      	b.n	80070de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00c      	beq.n	80070a6 <USBD_StdEPReq+0xaa>
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	d009      	beq.n	80070a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 ff96 	bl	8007fc8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 ff92 	bl	8007fc8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070a4:	e020      	b.n	80070e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fc1e 	bl	80078ea <USBD_CtlError>
              break;
 80070ae:	e01b      	b.n	80070e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	885b      	ldrh	r3, [r3, #2]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10e      	bne.n	80070d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <USBD_StdEPReq+0xda>
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	2b80      	cmp	r3, #128	; 0x80
 80070c2:	d008      	beq.n	80070d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	88db      	ldrh	r3, [r3, #6]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 ff79 	bl	8007fc8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fcb1 	bl	8007a3e <USBD_CtlSendStatus>

              break;
 80070dc:	e004      	b.n	80070e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fc02 	bl	80078ea <USBD_CtlError>
              break;
 80070e6:	bf00      	nop
          }
          break;
 80070e8:	e0e0      	b.n	80072ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d002      	beq.n	80070fa <USBD_StdEPReq+0xfe>
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d015      	beq.n	8007124 <USBD_StdEPReq+0x128>
 80070f8:	e026      	b.n	8007148 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <USBD_StdEPReq+0x11e>
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d009      	beq.n	800711a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 ff5c 	bl	8007fc8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007110:	2180      	movs	r1, #128	; 0x80
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 ff58 	bl	8007fc8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007118:	e01c      	b.n	8007154 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fbe4 	bl	80078ea <USBD_CtlError>
              break;
 8007122:	e017      	b.n	8007154 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	885b      	ldrh	r3, [r3, #2]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d112      	bne.n	8007152 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007136:	7bbb      	ldrb	r3, [r7, #14]
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 ff63 	bl	8008006 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fc7c 	bl	8007a3e <USBD_CtlSendStatus>
              }
              break;
 8007146:	e004      	b.n	8007152 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fbcd 	bl	80078ea <USBD_CtlError>
              break;
 8007150:	e000      	b.n	8007154 <USBD_StdEPReq+0x158>
              break;
 8007152:	bf00      	nop
          }
          break;
 8007154:	e0aa      	b.n	80072ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800715c:	2b02      	cmp	r3, #2
 800715e:	d002      	beq.n	8007166 <USBD_StdEPReq+0x16a>
 8007160:	2b03      	cmp	r3, #3
 8007162:	d032      	beq.n	80071ca <USBD_StdEPReq+0x1ce>
 8007164:	e097      	b.n	8007296 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <USBD_StdEPReq+0x180>
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	2b80      	cmp	r3, #128	; 0x80
 8007170:	d004      	beq.n	800717c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fbb8 	bl	80078ea <USBD_CtlError>
                break;
 800717a:	e091      	b.n	80072a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007180:	2b00      	cmp	r3, #0
 8007182:	da0b      	bge.n	800719c <USBD_StdEPReq+0x1a0>
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	3310      	adds	r3, #16
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	4413      	add	r3, r2
 8007198:	3304      	adds	r3, #4
 800719a:	e00b      	b.n	80071b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	3304      	adds	r3, #4
 80071b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2202      	movs	r2, #2
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fbfb 	bl	80079be <USBD_CtlSendData>
              break;
 80071c8:	e06a      	b.n	80072a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da11      	bge.n	80071f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	f003 020f 	and.w	r2, r3, #15
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	440b      	add	r3, r1
 80071e4:	3318      	adds	r3, #24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d117      	bne.n	800721c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fb7b 	bl	80078ea <USBD_CtlError>
                  break;
 80071f4:	e054      	b.n	80072a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	f003 020f 	and.w	r2, r3, #15
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4413      	add	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	440b      	add	r3, r1
 8007208:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb68 	bl	80078ea <USBD_CtlError>
                  break;
 800721a:	e041      	b.n	80072a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	da0b      	bge.n	800723c <USBD_StdEPReq+0x240>
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	3310      	adds	r3, #16
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	4413      	add	r3, r2
 8007238:	3304      	adds	r3, #4
 800723a:	e00b      	b.n	8007254 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	3304      	adds	r3, #4
 8007254:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <USBD_StdEPReq+0x266>
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b80      	cmp	r3, #128	; 0x80
 8007260:	d103      	bne.n	800726a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e00e      	b.n	8007288 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fee8 	bl	8008044 <USBD_LL_IsStallEP>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2201      	movs	r2, #1
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	e002      	b.n	8007288 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2202      	movs	r2, #2
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fb95 	bl	80079be <USBD_CtlSendData>
              break;
 8007294:	e004      	b.n	80072a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb26 	bl	80078ea <USBD_CtlError>
              break;
 800729e:	bf00      	nop
          }
          break;
 80072a0:	e004      	b.n	80072ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb20 	bl	80078ea <USBD_CtlError>
          break;
 80072aa:	bf00      	nop
      }
      break;
 80072ac:	e004      	b.n	80072b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb1a 	bl	80078ea <USBD_CtlError>
      break;
 80072b6:	bf00      	nop
  }

  return ret;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	f200 8128 	bhi.w	800753a <USBD_GetDescriptor+0x276>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <USBD_GetDescriptor+0x2c>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007365 	.word	0x08007365
 80072fc:	0800753b 	.word	0x0800753b
 8007300:	0800753b 	.word	0x0800753b
 8007304:	080074db 	.word	0x080074db
 8007308:	08007507 	.word	0x08007507
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
      break;
 8007322:	e112      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	7c1b      	ldrb	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f107 0208 	add.w	r2, r7, #8
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007346:	e100      	b.n	800754a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	f107 0208 	add.w	r2, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
      break;
 8007362:	e0f2      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	885b      	ldrh	r3, [r3, #2]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b05      	cmp	r3, #5
 800736c:	f200 80ac 	bhi.w	80074c8 <USBD_GetDescriptor+0x204>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <USBD_GetDescriptor+0xb4>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	08007391 	.word	0x08007391
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073f9 	.word	0x080073f9
 8007384:	0800742d 	.word	0x0800742d
 8007388:	08007461 	.word	0x08007461
 800738c:	08007495 	.word	0x08007495
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e091      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa97 	bl	80078ea <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e089      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e077      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fa7d 	bl	80078ea <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e06f      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e05d      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa63 	bl	80078ea <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e055      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e043      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa49 	bl	80078ea <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e03b      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e029      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa2f 	bl	80078ea <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e021      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e00f      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa15 	bl	80078ea <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e007      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa0d 	bl	80078ea <USBD_CtlError>
          err++;
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	3301      	adds	r3, #1
 80074d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80074d6:	e038      	b.n	800754a <USBD_GetDescriptor+0x286>
 80074d8:	e037      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7c1b      	ldrb	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	f107 0208 	add.w	r2, r7, #8
 80074ee:	4610      	mov	r0, r2
 80074f0:	4798      	blx	r3
 80074f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f4:	e029      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f9f6 	bl	80078ea <USBD_CtlError>
        err++;
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	3301      	adds	r3, #1
 8007502:	72fb      	strb	r3, [r7, #11]
      break;
 8007504:	e021      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7c1b      	ldrb	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10d      	bne.n	800752a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f107 0208 	add.w	r2, r7, #8
 800751a:	4610      	mov	r0, r2
 800751c:	4798      	blx	r3
 800751e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	2207      	movs	r2, #7
 8007526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007528:	e00f      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f9dc 	bl	80078ea <USBD_CtlError>
        err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	e007      	b.n	800754a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f9d4 	bl	80078ea <USBD_CtlError>
      err++;
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	3301      	adds	r3, #1
 8007546:	72fb      	strb	r3, [r7, #11]
      break;
 8007548:	bf00      	nop
  }

  if (err != 0U)
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11c      	bne.n	800758a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007550:	893b      	ldrh	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d011      	beq.n	800757a <USBD_GetDescriptor+0x2b6>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	88db      	ldrh	r3, [r3, #6]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00d      	beq.n	800757a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	88da      	ldrh	r2, [r3, #6]
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	4293      	cmp	r3, r2
 8007566:	bf28      	it	cs
 8007568:	4613      	movcs	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800756e:	893b      	ldrh	r3, [r7, #8]
 8007570:	461a      	mov	r2, r3
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa22 	bl	80079be <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fa5b 	bl	8007a3e <USBD_CtlSendStatus>
 8007588:	e000      	b.n	800758c <USBD_GetDescriptor+0x2c8>
    return;
 800758a:	bf00      	nop
    }
  }
}
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	889b      	ldrh	r3, [r3, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d130      	bne.n	8007608 <USBD_SetAddress+0x74>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	88db      	ldrh	r3, [r3, #6]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d12c      	bne.n	8007608 <USBD_SetAddress+0x74>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	885b      	ldrh	r3, [r3, #2]
 80075b2:	2b7f      	cmp	r3, #127	; 0x7f
 80075b4:	d828      	bhi.n	8007608 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d104      	bne.n	80075d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80075cc:	6839      	ldr	r1, [r7, #0]
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f98b 	bl	80078ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d4:	e01d      	b.n	8007612 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	7bfa      	ldrb	r2, [r7, #15]
 80075da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fd5a 	bl	800809c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fa28 	bl	8007a3e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fc:	e009      	b.n	8007612 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007606:	e004      	b.n	8007612 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f96d 	bl	80078ea <USBD_CtlError>
  }
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	885b      	ldrh	r3, [r3, #2]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	4b41      	ldr	r3, [pc, #260]	; (8007734 <USBD_SetConfig+0x118>)
 800762e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007630:	4b40      	ldr	r3, [pc, #256]	; (8007734 <USBD_SetConfig+0x118>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d904      	bls.n	8007642 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f955 	bl	80078ea <USBD_CtlError>
 8007640:	e075      	b.n	800772e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007648:	2b02      	cmp	r3, #2
 800764a:	d002      	beq.n	8007652 <USBD_SetConfig+0x36>
 800764c:	2b03      	cmp	r3, #3
 800764e:	d023      	beq.n	8007698 <USBD_SetConfig+0x7c>
 8007650:	e062      	b.n	8007718 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007652:	4b38      	ldr	r3, [pc, #224]	; (8007734 <USBD_SetConfig+0x118>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d01a      	beq.n	8007690 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800765a:	4b36      	ldr	r3, [pc, #216]	; (8007734 <USBD_SetConfig+0x118>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2203      	movs	r2, #3
 8007668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800766c:	4b31      	ldr	r3, [pc, #196]	; (8007734 <USBD_SetConfig+0x118>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff f9e8 	bl	8006a48 <USBD_SetClassConfig>
 8007678:	4603      	mov	r3, r0
 800767a:	2b02      	cmp	r3, #2
 800767c:	d104      	bne.n	8007688 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f932 	bl	80078ea <USBD_CtlError>
            return;
 8007686:	e052      	b.n	800772e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9d8 	bl	8007a3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800768e:	e04e      	b.n	800772e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f9d4 	bl	8007a3e <USBD_CtlSendStatus>
        break;
 8007696:	e04a      	b.n	800772e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007698:	4b26      	ldr	r3, [pc, #152]	; (8007734 <USBD_SetConfig+0x118>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d112      	bne.n	80076c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80076a8:	4b22      	ldr	r3, [pc, #136]	; (8007734 <USBD_SetConfig+0x118>)
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80076b2:	4b20      	ldr	r3, [pc, #128]	; (8007734 <USBD_SetConfig+0x118>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7ff f9e4 	bl	8006a86 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f9bd 	bl	8007a3e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80076c4:	e033      	b.n	800772e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80076c6:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <USBD_SetConfig+0x118>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d01d      	beq.n	8007710 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff f9d2 	bl	8006a86 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80076e2:	4b14      	ldr	r3, [pc, #80]	; (8007734 <USBD_SetConfig+0x118>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80076ec:	4b11      	ldr	r3, [pc, #68]	; (8007734 <USBD_SetConfig+0x118>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff f9a8 	bl	8006a48 <USBD_SetClassConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d104      	bne.n	8007708 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8f2 	bl	80078ea <USBD_CtlError>
            return;
 8007706:	e012      	b.n	800772e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f998 	bl	8007a3e <USBD_CtlSendStatus>
        break;
 800770e:	e00e      	b.n	800772e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f994 	bl	8007a3e <USBD_CtlSendStatus>
        break;
 8007716:	e00a      	b.n	800772e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8e5 	bl	80078ea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007720:	4b04      	ldr	r3, [pc, #16]	; (8007734 <USBD_SetConfig+0x118>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff f9ad 	bl	8006a86 <USBD_ClrClassConfig>
        break;
 800772c:	bf00      	nop
    }
  }
}
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200002b4 	.word	0x200002b4

08007738 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	88db      	ldrh	r3, [r3, #6]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d004      	beq.n	8007754 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8cc 	bl	80078ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007752:	e022      	b.n	800779a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800775a:	2b02      	cmp	r3, #2
 800775c:	dc02      	bgt.n	8007764 <USBD_GetConfig+0x2c>
 800775e:	2b00      	cmp	r3, #0
 8007760:	dc03      	bgt.n	800776a <USBD_GetConfig+0x32>
 8007762:	e015      	b.n	8007790 <USBD_GetConfig+0x58>
 8007764:	2b03      	cmp	r3, #3
 8007766:	d00b      	beq.n	8007780 <USBD_GetConfig+0x48>
 8007768:	e012      	b.n	8007790 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3308      	adds	r3, #8
 8007774:	2201      	movs	r2, #1
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f920 	bl	80079be <USBD_CtlSendData>
        break;
 800777e:	e00c      	b.n	800779a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	2201      	movs	r2, #1
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f918 	bl	80079be <USBD_CtlSendData>
        break;
 800778e:	e004      	b.n	800779a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8a9 	bl	80078ea <USBD_CtlError>
        break;
 8007798:	bf00      	nop
}
 800779a:	bf00      	nop
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b2:	3b01      	subs	r3, #1
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d81e      	bhi.n	80077f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	88db      	ldrh	r3, [r3, #6]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d004      	beq.n	80077ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f891 	bl	80078ea <USBD_CtlError>
        break;
 80077c8:	e01a      	b.n	8007800 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f043 0202 	orr.w	r2, r3, #2
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	330c      	adds	r3, #12
 80077ea:	2202      	movs	r2, #2
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8e5 	bl	80079be <USBD_CtlSendData>
      break;
 80077f4:	e004      	b.n	8007800 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f876 	bl	80078ea <USBD_CtlError>
      break;
 80077fe:	bf00      	nop
  }
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	885b      	ldrh	r3, [r3, #2]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d106      	bne.n	8007828 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f90b 	bl	8007a3e <USBD_CtlSendStatus>
  }
}
 8007828:	bf00      	nop
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007840:	3b01      	subs	r3, #1
 8007842:	2b02      	cmp	r3, #2
 8007844:	d80b      	bhi.n	800785e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	885b      	ldrh	r3, [r3, #2]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d10c      	bne.n	8007868 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f8f1 	bl	8007a3e <USBD_CtlSendStatus>
      }
      break;
 800785c:	e004      	b.n	8007868 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f842 	bl	80078ea <USBD_CtlError>
      break;
 8007866:	e000      	b.n	800786a <USBD_ClrFeature+0x3a>
      break;
 8007868:	bf00      	nop
  }
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781a      	ldrb	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785a      	ldrb	r2, [r3, #1]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	3302      	adds	r3, #2
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	b29a      	uxth	r2, r3
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3303      	adds	r3, #3
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3304      	adds	r3, #4
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	3305      	adds	r3, #5
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	4413      	add	r3, r2
 80078be:	b29a      	uxth	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	3306      	adds	r3, #6
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	3307      	adds	r3, #7
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	4413      	add	r3, r2
 80078da:	b29a      	uxth	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	80da      	strh	r2, [r3, #6]

}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bc80      	pop	{r7}
 80078e8:	4770      	bx	lr

080078ea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b082      	sub	sp, #8
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80078f4:	2180      	movs	r1, #128	; 0x80
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb66 	bl	8007fc8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80078fc:	2100      	movs	r1, #0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fb62 	bl	8007fc8 <USBD_LL_StallEP>
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d032      	beq.n	8007988 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f834 	bl	8007990 <USBD_GetLen>
 8007928:	4603      	mov	r3, r0
 800792a:	3301      	adds	r3, #1
 800792c:	b29b      	uxth	r3, r3
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	b29a      	uxth	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	75fa      	strb	r2, [r7, #23]
 800793c:	461a      	mov	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	4413      	add	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	7812      	ldrb	r2, [r2, #0]
 8007946:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	75fa      	strb	r2, [r7, #23]
 800794e:	461a      	mov	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	4413      	add	r3, r2
 8007954:	2203      	movs	r2, #3
 8007956:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007958:	e012      	b.n	8007980 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	60fa      	str	r2, [r7, #12]
 8007960:	7dfa      	ldrb	r2, [r7, #23]
 8007962:	1c51      	adds	r1, r2, #1
 8007964:	75f9      	strb	r1, [r7, #23]
 8007966:	4611      	mov	r1, r2
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	440a      	add	r2, r1
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	75fa      	strb	r2, [r7, #23]
 8007976:	461a      	mov	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4413      	add	r3, r2
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e8      	bne.n	800795a <USBD_GetString+0x4e>
    }
  }
}
 8007988:	bf00      	nop
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800799c:	e005      	b.n	80079aa <USBD_GetLen+0x1a>
  {
    len++;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	3301      	adds	r3, #1
 80079a2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3301      	adds	r3, #1
 80079a8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f5      	bne.n	800799e <USBD_GetLen+0xe>
  }

  return len;
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	2100      	movs	r1, #0
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fb77 	bl	80080da <USBD_LL_Transmit>

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	4613      	mov	r3, r2
 8007a02:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a04:	88fb      	ldrh	r3, [r7, #6]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 fb65 	bl	80080da <USBD_LL_Transmit>

  return USBD_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b084      	sub	sp, #16
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	60f8      	str	r0, [r7, #12]
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	4613      	mov	r3, r2
 8007a26:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 fb76 	bl	8008120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2204      	movs	r2, #4
 8007a4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2200      	movs	r2, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb40 	bl	80080da <USBD_LL_Transmit>

  return USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2205      	movs	r2, #5
 8007a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a74:	2300      	movs	r3, #0
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fb50 	bl	8008120 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a90:	2200      	movs	r2, #0
 8007a92:	490e      	ldr	r1, [pc, #56]	; (8007acc <MX_USB_DEVICE_Init+0x40>)
 8007a94:	480e      	ldr	r0, [pc, #56]	; (8007ad0 <MX_USB_DEVICE_Init+0x44>)
 8007a96:	f7fe ff7d 	bl	8006994 <USBD_Init>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007aa0:	f7f8 fce0 	bl	8000464 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007aa4:	490b      	ldr	r1, [pc, #44]	; (8007ad4 <MX_USB_DEVICE_Init+0x48>)
 8007aa6:	480a      	ldr	r0, [pc, #40]	; (8007ad0 <MX_USB_DEVICE_Init+0x44>)
 8007aa8:	f7fe ff9f 	bl	80069ea <USBD_RegisterClass>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007ab2:	f7f8 fcd7 	bl	8000464 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ab6:	4806      	ldr	r0, [pc, #24]	; (8007ad0 <MX_USB_DEVICE_Init+0x44>)
 8007ab8:	f7fe ffb0 	bl	8006a1c <USBD_Start>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007ac2:	f7f8 fccf 	bl	8000464 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ac6:	bf00      	nop
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000114 	.word	0x20000114
 8007ad0:	200002b8 	.word	0x200002b8
 8007ad4:	2000000c 	.word	0x2000000c

08007ad8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2212      	movs	r2, #18
 8007ae8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007aea:	4b03      	ldr	r3, [pc, #12]	; (8007af8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bc80      	pop	{r7}
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	20000130 	.word	0x20000130

08007afc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	6039      	str	r1, [r7, #0]
 8007b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b0e:	4b03      	ldr	r3, [pc, #12]	; (8007b1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	20000144 	.word	0x20000144

08007b20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	6039      	str	r1, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d105      	bne.n	8007b3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	4907      	ldr	r1, [pc, #28]	; (8007b54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b36:	4808      	ldr	r0, [pc, #32]	; (8007b58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b38:	f7ff fee8 	bl	800790c <USBD_GetString>
 8007b3c:	e004      	b.n	8007b48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	4904      	ldr	r1, [pc, #16]	; (8007b54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007b42:	4805      	ldr	r0, [pc, #20]	; (8007b58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b44:	f7ff fee2 	bl	800790c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b48:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	2000057c 	.word	0x2000057c
 8007b58:	08008b90 	.word	0x08008b90

08007b5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	6039      	str	r1, [r7, #0]
 8007b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	4904      	ldr	r1, [pc, #16]	; (8007b7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b6c:	4804      	ldr	r0, [pc, #16]	; (8007b80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b6e:	f7ff fecd 	bl	800790c <USBD_GetString>
  return USBD_StrDesc;
 8007b72:	4b02      	ldr	r3, [pc, #8]	; (8007b7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	2000057c 	.word	0x2000057c
 8007b80:	08008ba8 	.word	0x08008ba8

08007b84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	221a      	movs	r2, #26
 8007b94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b96:	f000 f843 	bl	8007c20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b9a:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20000148 	.word	0x20000148

08007ba8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	6039      	str	r1, [r7, #0]
 8007bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d105      	bne.n	8007bc6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	4907      	ldr	r1, [pc, #28]	; (8007bdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bbe:	4808      	ldr	r0, [pc, #32]	; (8007be0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bc0:	f7ff fea4 	bl	800790c <USBD_GetString>
 8007bc4:	e004      	b.n	8007bd0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	4904      	ldr	r1, [pc, #16]	; (8007bdc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007bca:	4805      	ldr	r0, [pc, #20]	; (8007be0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007bcc:	f7ff fe9e 	bl	800790c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd0:	4b02      	ldr	r3, [pc, #8]	; (8007bdc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	2000057c 	.word	0x2000057c
 8007be0:	08008bbc 	.word	0x08008bbc

08007be4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	6039      	str	r1, [r7, #0]
 8007bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d105      	bne.n	8007c02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	4907      	ldr	r1, [pc, #28]	; (8007c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bfa:	4808      	ldr	r0, [pc, #32]	; (8007c1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bfc:	f7ff fe86 	bl	800790c <USBD_GetString>
 8007c00:	e004      	b.n	8007c0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	4904      	ldr	r1, [pc, #16]	; (8007c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c06:	4805      	ldr	r0, [pc, #20]	; (8007c1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c08:	f7ff fe80 	bl	800790c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c0c:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	2000057c 	.word	0x2000057c
 8007c1c:	08008bc8 	.word	0x08008bc8

08007c20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c26:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <Get_SerialNum+0x44>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	; (8007c68 <Get_SerialNum+0x48>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007c32:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <Get_SerialNum+0x4c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c46:	2208      	movs	r2, #8
 8007c48:	4909      	ldr	r1, [pc, #36]	; (8007c70 <Get_SerialNum+0x50>)
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f814 	bl	8007c78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c50:	2204      	movs	r2, #4
 8007c52:	4908      	ldr	r1, [pc, #32]	; (8007c74 <Get_SerialNum+0x54>)
 8007c54:	68b8      	ldr	r0, [r7, #8]
 8007c56:	f000 f80f 	bl	8007c78 <IntToUnicode>
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	1ffff7e8 	.word	0x1ffff7e8
 8007c68:	1ffff7ec 	.word	0x1ffff7ec
 8007c6c:	1ffff7f0 	.word	0x1ffff7f0
 8007c70:	2000014a 	.word	0x2000014a
 8007c74:	2000015a 	.word	0x2000015a

08007c78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	75fb      	strb	r3, [r7, #23]
 8007c8e:	e027      	b.n	8007ce0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	0f1b      	lsrs	r3, r3, #28
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	d80b      	bhi.n	8007cb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	0f1b      	lsrs	r3, r3, #28
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	440b      	add	r3, r1
 8007ca8:	3230      	adds	r2, #48	; 0x30
 8007caa:	b2d2      	uxtb	r2, r2
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	e00a      	b.n	8007cc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	0f1b      	lsrs	r3, r3, #28
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	4619      	mov	r1, r3
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	440b      	add	r3, r1
 8007cc0:	3237      	adds	r2, #55	; 0x37
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
 8007ce0:	7dfa      	ldrb	r2, [r7, #23]
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d3d3      	bcc.n	8007c90 <IntToUnicode+0x18>
  }
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a0d      	ldr	r2, [pc, #52]	; (8007d38 <HAL_PCD_MspInit+0x44>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d113      	bne.n	8007d2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d06:	4b0d      	ldr	r3, [pc, #52]	; (8007d3c <HAL_PCD_MspInit+0x48>)
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <HAL_PCD_MspInit+0x48>)
 8007d0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d10:	61d3      	str	r3, [r2, #28]
 8007d12:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <HAL_PCD_MspInit+0x48>)
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2100      	movs	r1, #0
 8007d22:	2014      	movs	r0, #20
 8007d24:	f7f9 f89f 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d28:	2014      	movs	r0, #20
 8007d2a:	f7f9 f8b8 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40005c00 	.word	0x40005c00
 8007d3c:	40021000 	.word	0x40021000

08007d40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe fea8 	bl	8006aac <USBD_LL_SetupStage>
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007d76:	78fa      	ldrb	r2, [r7, #3]
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	440b      	add	r3, r1
 8007d84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f7fe feda 	bl	8006b46 <USBD_LL_DataOutStage>
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	440b      	add	r3, r1
 8007dba:	333c      	adds	r3, #60	; 0x3c
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	78fb      	ldrb	r3, [r7, #3]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	f7fe ff31 	bl	8006c28 <USBD_LL_DataInStage>
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff f841 	bl	8006e64 <USBD_LL_SOF>
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007df2:	2301      	movs	r3, #1
 8007df4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d001      	beq.n	8007e02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dfe:	f7f8 fb31 	bl	8000464 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e08:	7bfa      	ldrb	r2, [r7, #15]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fe fff1 	bl	8006df4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fe ffaa 	bl	8006d72 <USBD_LL_Reset>
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fe ffeb 	bl	8006e12 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <HAL_PCD_SuspendCallback+0x30>)
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	4a03      	ldr	r2, [pc, #12]	; (8007e58 <HAL_PCD_SuspendCallback+0x30>)
 8007e4a:	f043 0306 	orr.w	r3, r3, #6
 8007e4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed00 	.word	0xe000ed00

08007e5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe ffe5 	bl	8006e3a <USBD_LL_Resume>
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e80:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <USBD_LL_Init+0x88>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <USBD_LL_Init+0x88>)
 8007e8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e90:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <USBD_LL_Init+0x88>)
 8007e92:	4a1c      	ldr	r2, [pc, #112]	; (8007f04 <USBD_LL_Init+0x8c>)
 8007e94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e96:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <USBD_LL_Init+0x88>)
 8007e98:	2208      	movs	r2, #8
 8007e9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e9c:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <USBD_LL_Init+0x88>)
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ea2:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <USBD_LL_Init+0x88>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ea8:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <USBD_LL_Init+0x88>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007eae:	4b14      	ldr	r3, [pc, #80]	; (8007f00 <USBD_LL_Init+0x88>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007eb4:	4812      	ldr	r0, [pc, #72]	; (8007f00 <USBD_LL_Init+0x88>)
 8007eb6:	f7f9 fad5 	bl	8001464 <HAL_PCD_Init>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007ec0:	f7f8 fad0 	bl	8000464 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eca:	2318      	movs	r3, #24
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	f7fa ff32 	bl	8002d38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eda:	2358      	movs	r3, #88	; 0x58
 8007edc:	2200      	movs	r2, #0
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	f7fa ff2a 	bl	8002d38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2181      	movs	r1, #129	; 0x81
 8007ef2:	f7fa ff21 	bl	8002d38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	2000077c 	.word	0x2000077c
 8007f04:	40005c00 	.word	0x40005c00

08007f08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f9 fbab 	bl	800167a <HAL_PCD_Start>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f93c 	bl	80081a8 <USBD_Get_USB_Status>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	4608      	mov	r0, r1
 8007f48:	4611      	mov	r1, r2
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	70fb      	strb	r3, [r7, #3]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70bb      	strb	r3, [r7, #2]
 8007f54:	4613      	mov	r3, r2
 8007f56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f66:	78bb      	ldrb	r3, [r7, #2]
 8007f68:	883a      	ldrh	r2, [r7, #0]
 8007f6a:	78f9      	ldrb	r1, [r7, #3]
 8007f6c:	f7f9 fd23 	bl	80019b6 <HAL_PCD_EP_Open>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f916 	bl	80081a8 <USBD_Get_USB_Status>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa4:	78fa      	ldrb	r2, [r7, #3]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7f9 fd6a 	bl	8001a82 <HAL_PCD_EP_Close>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f8f7 	bl	80081a8 <USBD_Get_USB_Status>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7f9 fe13 	bl	8001c12 <HAL_PCD_EP_SetStall>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f8d8 	bl	80081a8 <USBD_Get_USB_Status>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f7f9 fe54 	bl	8001cd2 <HAL_PCD_EP_ClrStall>
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f8b9 	bl	80081a8 <USBD_Get_USB_Status>
 8008036:	4603      	mov	r3, r0
 8008038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803a:	7bbb      	ldrb	r3, [r7, #14]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008056:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	da0c      	bge.n	800807a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	440b      	add	r3, r1
 8008074:	3302      	adds	r3, #2
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	e00b      	b.n	8008092 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008080:	68f9      	ldr	r1, [r7, #12]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	440b      	add	r3, r1
 800808c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008090:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008092:	4618      	mov	r0, r3
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7f9 fc56 	bl	800196c <HAL_PCD_SetAddress>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f86e 	bl	80081a8 <USBD_Get_USB_Status>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	461a      	mov	r2, r3
 80080e6:	460b      	mov	r3, r1
 80080e8:	72fb      	strb	r3, [r7, #11]
 80080ea:	4613      	mov	r3, r2
 80080ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80080fc:	893b      	ldrh	r3, [r7, #8]
 80080fe:	7af9      	ldrb	r1, [r7, #11]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	f7f9 fd43 	bl	8001b8c <HAL_PCD_EP_Transmit>
 8008106:	4603      	mov	r3, r0
 8008108:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f84b 	bl	80081a8 <USBD_Get_USB_Status>
 8008112:	4603      	mov	r3, r0
 8008114:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008116:	7dbb      	ldrb	r3, [r7, #22]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	607a      	str	r2, [r7, #4]
 800812a:	461a      	mov	r2, r3
 800812c:	460b      	mov	r3, r1
 800812e:	72fb      	strb	r3, [r7, #11]
 8008130:	4613      	mov	r3, r2
 8008132:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008142:	893b      	ldrh	r3, [r7, #8]
 8008144:	7af9      	ldrb	r1, [r7, #11]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	f7f9 fce3 	bl	8001b12 <HAL_PCD_EP_Receive>
 800814c:	4603      	mov	r3, r0
 800814e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f828 	bl	80081a8 <USBD_Get_USB_Status>
 8008158:	4603      	mov	r3, r0
 800815a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800815c:	7dbb      	ldrb	r3, [r7, #22]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008170:	4b02      	ldr	r3, [pc, #8]	; (800817c <USBD_static_malloc+0x14>)
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	bc80      	pop	{r7}
 800817a:	4770      	bx	lr
 800817c:	20000a68 	.word	0x20000a68

08008180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]

}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr

08008192 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr

080081a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d817      	bhi.n	80081ec <USBD_Get_USB_Status+0x44>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <USBD_Get_USB_Status+0x1c>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081db 	.word	0x080081db
 80081cc:	080081e1 	.word	0x080081e1
 80081d0:	080081e7 	.word	0x080081e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
    break;
 80081d8:	e00b      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081da:	2302      	movs	r3, #2
 80081dc:	73fb      	strb	r3, [r7, #15]
    break;
 80081de:	e008      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	e005      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ea:	e002      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081ec:	2302      	movs	r3, #2
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	bf00      	nop
  }
  return usb_status;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop

08008200 <__errno>:
 8008200:	4b01      	ldr	r3, [pc, #4]	; (8008208 <__errno+0x8>)
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000164 	.word	0x20000164

0800820c <__libc_init_array>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	2600      	movs	r6, #0
 8008210:	4d0c      	ldr	r5, [pc, #48]	; (8008244 <__libc_init_array+0x38>)
 8008212:	4c0d      	ldr	r4, [pc, #52]	; (8008248 <__libc_init_array+0x3c>)
 8008214:	1b64      	subs	r4, r4, r5
 8008216:	10a4      	asrs	r4, r4, #2
 8008218:	42a6      	cmp	r6, r4
 800821a:	d109      	bne.n	8008230 <__libc_init_array+0x24>
 800821c:	f000 fc9c 	bl	8008b58 <_init>
 8008220:	2600      	movs	r6, #0
 8008222:	4d0a      	ldr	r5, [pc, #40]	; (800824c <__libc_init_array+0x40>)
 8008224:	4c0a      	ldr	r4, [pc, #40]	; (8008250 <__libc_init_array+0x44>)
 8008226:	1b64      	subs	r4, r4, r5
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	42a6      	cmp	r6, r4
 800822c:	d105      	bne.n	800823a <__libc_init_array+0x2e>
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	f855 3b04 	ldr.w	r3, [r5], #4
 8008234:	4798      	blx	r3
 8008236:	3601      	adds	r6, #1
 8008238:	e7ee      	b.n	8008218 <__libc_init_array+0xc>
 800823a:	f855 3b04 	ldr.w	r3, [r5], #4
 800823e:	4798      	blx	r3
 8008240:	3601      	adds	r6, #1
 8008242:	e7f2      	b.n	800822a <__libc_init_array+0x1e>
 8008244:	08008c24 	.word	0x08008c24
 8008248:	08008c24 	.word	0x08008c24
 800824c:	08008c24 	.word	0x08008c24
 8008250:	08008c28 	.word	0x08008c28

08008254 <memset>:
 8008254:	4603      	mov	r3, r0
 8008256:	4402      	add	r2, r0
 8008258:	4293      	cmp	r3, r2
 800825a:	d100      	bne.n	800825e <memset+0xa>
 800825c:	4770      	bx	lr
 800825e:	f803 1b01 	strb.w	r1, [r3], #1
 8008262:	e7f9      	b.n	8008258 <memset+0x4>

08008264 <siprintf>:
 8008264:	b40e      	push	{r1, r2, r3}
 8008266:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800826a:	b500      	push	{lr}
 800826c:	b09c      	sub	sp, #112	; 0x70
 800826e:	ab1d      	add	r3, sp, #116	; 0x74
 8008270:	9002      	str	r0, [sp, #8]
 8008272:	9006      	str	r0, [sp, #24]
 8008274:	9107      	str	r1, [sp, #28]
 8008276:	9104      	str	r1, [sp, #16]
 8008278:	4808      	ldr	r0, [pc, #32]	; (800829c <siprintf+0x38>)
 800827a:	4909      	ldr	r1, [pc, #36]	; (80082a0 <siprintf+0x3c>)
 800827c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008280:	9105      	str	r1, [sp, #20]
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	a902      	add	r1, sp, #8
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	f000 f868 	bl	800835c <_svfiprintf_r>
 800828c:	2200      	movs	r2, #0
 800828e:	9b02      	ldr	r3, [sp, #8]
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	b01c      	add	sp, #112	; 0x70
 8008294:	f85d eb04 	ldr.w	lr, [sp], #4
 8008298:	b003      	add	sp, #12
 800829a:	4770      	bx	lr
 800829c:	20000164 	.word	0x20000164
 80082a0:	ffff0208 	.word	0xffff0208

080082a4 <__ssputs_r>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	688e      	ldr	r6, [r1, #8]
 80082aa:	4682      	mov	sl, r0
 80082ac:	429e      	cmp	r6, r3
 80082ae:	460c      	mov	r4, r1
 80082b0:	4690      	mov	r8, r2
 80082b2:	461f      	mov	r7, r3
 80082b4:	d838      	bhi.n	8008328 <__ssputs_r+0x84>
 80082b6:	898a      	ldrh	r2, [r1, #12]
 80082b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082bc:	d032      	beq.n	8008324 <__ssputs_r+0x80>
 80082be:	6825      	ldr	r5, [r4, #0]
 80082c0:	6909      	ldr	r1, [r1, #16]
 80082c2:	3301      	adds	r3, #1
 80082c4:	eba5 0901 	sub.w	r9, r5, r1
 80082c8:	6965      	ldr	r5, [r4, #20]
 80082ca:	444b      	add	r3, r9
 80082cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082d4:	106d      	asrs	r5, r5, #1
 80082d6:	429d      	cmp	r5, r3
 80082d8:	bf38      	it	cc
 80082da:	461d      	movcc	r5, r3
 80082dc:	0553      	lsls	r3, r2, #21
 80082de:	d531      	bpl.n	8008344 <__ssputs_r+0xa0>
 80082e0:	4629      	mov	r1, r5
 80082e2:	f000 fb6f 	bl	80089c4 <_malloc_r>
 80082e6:	4606      	mov	r6, r0
 80082e8:	b950      	cbnz	r0, 8008300 <__ssputs_r+0x5c>
 80082ea:	230c      	movs	r3, #12
 80082ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f0:	f8ca 3000 	str.w	r3, [sl]
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008300:	464a      	mov	r2, r9
 8008302:	6921      	ldr	r1, [r4, #16]
 8008304:	f000 face 	bl	80088a4 <memcpy>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800830e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	6126      	str	r6, [r4, #16]
 8008316:	444e      	add	r6, r9
 8008318:	6026      	str	r6, [r4, #0]
 800831a:	463e      	mov	r6, r7
 800831c:	6165      	str	r5, [r4, #20]
 800831e:	eba5 0509 	sub.w	r5, r5, r9
 8008322:	60a5      	str	r5, [r4, #8]
 8008324:	42be      	cmp	r6, r7
 8008326:	d900      	bls.n	800832a <__ssputs_r+0x86>
 8008328:	463e      	mov	r6, r7
 800832a:	4632      	mov	r2, r6
 800832c:	4641      	mov	r1, r8
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	f000 fac6 	bl	80088c0 <memmove>
 8008334:	68a3      	ldr	r3, [r4, #8]
 8008336:	2000      	movs	r0, #0
 8008338:	1b9b      	subs	r3, r3, r6
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	4433      	add	r3, r6
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	e7db      	b.n	80082fc <__ssputs_r+0x58>
 8008344:	462a      	mov	r2, r5
 8008346:	f000 fbb1 	bl	8008aac <_realloc_r>
 800834a:	4606      	mov	r6, r0
 800834c:	2800      	cmp	r0, #0
 800834e:	d1e1      	bne.n	8008314 <__ssputs_r+0x70>
 8008350:	4650      	mov	r0, sl
 8008352:	6921      	ldr	r1, [r4, #16]
 8008354:	f000 face 	bl	80088f4 <_free_r>
 8008358:	e7c7      	b.n	80082ea <__ssputs_r+0x46>
	...

0800835c <_svfiprintf_r>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	4698      	mov	r8, r3
 8008362:	898b      	ldrh	r3, [r1, #12]
 8008364:	4607      	mov	r7, r0
 8008366:	061b      	lsls	r3, r3, #24
 8008368:	460d      	mov	r5, r1
 800836a:	4614      	mov	r4, r2
 800836c:	b09d      	sub	sp, #116	; 0x74
 800836e:	d50e      	bpl.n	800838e <_svfiprintf_r+0x32>
 8008370:	690b      	ldr	r3, [r1, #16]
 8008372:	b963      	cbnz	r3, 800838e <_svfiprintf_r+0x32>
 8008374:	2140      	movs	r1, #64	; 0x40
 8008376:	f000 fb25 	bl	80089c4 <_malloc_r>
 800837a:	6028      	str	r0, [r5, #0]
 800837c:	6128      	str	r0, [r5, #16]
 800837e:	b920      	cbnz	r0, 800838a <_svfiprintf_r+0x2e>
 8008380:	230c      	movs	r3, #12
 8008382:	603b      	str	r3, [r7, #0]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008388:	e0d1      	b.n	800852e <_svfiprintf_r+0x1d2>
 800838a:	2340      	movs	r3, #64	; 0x40
 800838c:	616b      	str	r3, [r5, #20]
 800838e:	2300      	movs	r3, #0
 8008390:	9309      	str	r3, [sp, #36]	; 0x24
 8008392:	2320      	movs	r3, #32
 8008394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008398:	2330      	movs	r3, #48	; 0x30
 800839a:	f04f 0901 	mov.w	r9, #1
 800839e:	f8cd 800c 	str.w	r8, [sp, #12]
 80083a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008548 <_svfiprintf_r+0x1ec>
 80083a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083aa:	4623      	mov	r3, r4
 80083ac:	469a      	mov	sl, r3
 80083ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b2:	b10a      	cbz	r2, 80083b8 <_svfiprintf_r+0x5c>
 80083b4:	2a25      	cmp	r2, #37	; 0x25
 80083b6:	d1f9      	bne.n	80083ac <_svfiprintf_r+0x50>
 80083b8:	ebba 0b04 	subs.w	fp, sl, r4
 80083bc:	d00b      	beq.n	80083d6 <_svfiprintf_r+0x7a>
 80083be:	465b      	mov	r3, fp
 80083c0:	4622      	mov	r2, r4
 80083c2:	4629      	mov	r1, r5
 80083c4:	4638      	mov	r0, r7
 80083c6:	f7ff ff6d 	bl	80082a4 <__ssputs_r>
 80083ca:	3001      	adds	r0, #1
 80083cc:	f000 80aa 	beq.w	8008524 <_svfiprintf_r+0x1c8>
 80083d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083d2:	445a      	add	r2, fp
 80083d4:	9209      	str	r2, [sp, #36]	; 0x24
 80083d6:	f89a 3000 	ldrb.w	r3, [sl]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 80a2 	beq.w	8008524 <_svfiprintf_r+0x1c8>
 80083e0:	2300      	movs	r3, #0
 80083e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ea:	f10a 0a01 	add.w	sl, sl, #1
 80083ee:	9304      	str	r3, [sp, #16]
 80083f0:	9307      	str	r3, [sp, #28]
 80083f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083f6:	931a      	str	r3, [sp, #104]	; 0x68
 80083f8:	4654      	mov	r4, sl
 80083fa:	2205      	movs	r2, #5
 80083fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008400:	4851      	ldr	r0, [pc, #324]	; (8008548 <_svfiprintf_r+0x1ec>)
 8008402:	f000 fa41 	bl	8008888 <memchr>
 8008406:	9a04      	ldr	r2, [sp, #16]
 8008408:	b9d8      	cbnz	r0, 8008442 <_svfiprintf_r+0xe6>
 800840a:	06d0      	lsls	r0, r2, #27
 800840c:	bf44      	itt	mi
 800840e:	2320      	movmi	r3, #32
 8008410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008414:	0711      	lsls	r1, r2, #28
 8008416:	bf44      	itt	mi
 8008418:	232b      	movmi	r3, #43	; 0x2b
 800841a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800841e:	f89a 3000 	ldrb.w	r3, [sl]
 8008422:	2b2a      	cmp	r3, #42	; 0x2a
 8008424:	d015      	beq.n	8008452 <_svfiprintf_r+0xf6>
 8008426:	4654      	mov	r4, sl
 8008428:	2000      	movs	r0, #0
 800842a:	f04f 0c0a 	mov.w	ip, #10
 800842e:	9a07      	ldr	r2, [sp, #28]
 8008430:	4621      	mov	r1, r4
 8008432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008436:	3b30      	subs	r3, #48	; 0x30
 8008438:	2b09      	cmp	r3, #9
 800843a:	d94e      	bls.n	80084da <_svfiprintf_r+0x17e>
 800843c:	b1b0      	cbz	r0, 800846c <_svfiprintf_r+0x110>
 800843e:	9207      	str	r2, [sp, #28]
 8008440:	e014      	b.n	800846c <_svfiprintf_r+0x110>
 8008442:	eba0 0308 	sub.w	r3, r0, r8
 8008446:	fa09 f303 	lsl.w	r3, r9, r3
 800844a:	4313      	orrs	r3, r2
 800844c:	46a2      	mov	sl, r4
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	e7d2      	b.n	80083f8 <_svfiprintf_r+0x9c>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	1d19      	adds	r1, r3, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	9103      	str	r1, [sp, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	bfbb      	ittet	lt
 800845e:	425b      	neglt	r3, r3
 8008460:	f042 0202 	orrlt.w	r2, r2, #2
 8008464:	9307      	strge	r3, [sp, #28]
 8008466:	9307      	strlt	r3, [sp, #28]
 8008468:	bfb8      	it	lt
 800846a:	9204      	strlt	r2, [sp, #16]
 800846c:	7823      	ldrb	r3, [r4, #0]
 800846e:	2b2e      	cmp	r3, #46	; 0x2e
 8008470:	d10c      	bne.n	800848c <_svfiprintf_r+0x130>
 8008472:	7863      	ldrb	r3, [r4, #1]
 8008474:	2b2a      	cmp	r3, #42	; 0x2a
 8008476:	d135      	bne.n	80084e4 <_svfiprintf_r+0x188>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	3402      	adds	r4, #2
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	9203      	str	r2, [sp, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	bfb8      	it	lt
 8008486:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800854c <_svfiprintf_r+0x1f0>
 8008490:	2203      	movs	r2, #3
 8008492:	4650      	mov	r0, sl
 8008494:	7821      	ldrb	r1, [r4, #0]
 8008496:	f000 f9f7 	bl	8008888 <memchr>
 800849a:	b140      	cbz	r0, 80084ae <_svfiprintf_r+0x152>
 800849c:	2340      	movs	r3, #64	; 0x40
 800849e:	eba0 000a 	sub.w	r0, r0, sl
 80084a2:	fa03 f000 	lsl.w	r0, r3, r0
 80084a6:	9b04      	ldr	r3, [sp, #16]
 80084a8:	3401      	adds	r4, #1
 80084aa:	4303      	orrs	r3, r0
 80084ac:	9304      	str	r3, [sp, #16]
 80084ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b2:	2206      	movs	r2, #6
 80084b4:	4826      	ldr	r0, [pc, #152]	; (8008550 <_svfiprintf_r+0x1f4>)
 80084b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ba:	f000 f9e5 	bl	8008888 <memchr>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d038      	beq.n	8008534 <_svfiprintf_r+0x1d8>
 80084c2:	4b24      	ldr	r3, [pc, #144]	; (8008554 <_svfiprintf_r+0x1f8>)
 80084c4:	bb1b      	cbnz	r3, 800850e <_svfiprintf_r+0x1b2>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	3307      	adds	r3, #7
 80084ca:	f023 0307 	bic.w	r3, r3, #7
 80084ce:	3308      	adds	r3, #8
 80084d0:	9303      	str	r3, [sp, #12]
 80084d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d4:	4433      	add	r3, r6
 80084d6:	9309      	str	r3, [sp, #36]	; 0x24
 80084d8:	e767      	b.n	80083aa <_svfiprintf_r+0x4e>
 80084da:	460c      	mov	r4, r1
 80084dc:	2001      	movs	r0, #1
 80084de:	fb0c 3202 	mla	r2, ip, r2, r3
 80084e2:	e7a5      	b.n	8008430 <_svfiprintf_r+0xd4>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f04f 0c0a 	mov.w	ip, #10
 80084ea:	4619      	mov	r1, r3
 80084ec:	3401      	adds	r4, #1
 80084ee:	9305      	str	r3, [sp, #20]
 80084f0:	4620      	mov	r0, r4
 80084f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084f6:	3a30      	subs	r2, #48	; 0x30
 80084f8:	2a09      	cmp	r2, #9
 80084fa:	d903      	bls.n	8008504 <_svfiprintf_r+0x1a8>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d0c5      	beq.n	800848c <_svfiprintf_r+0x130>
 8008500:	9105      	str	r1, [sp, #20]
 8008502:	e7c3      	b.n	800848c <_svfiprintf_r+0x130>
 8008504:	4604      	mov	r4, r0
 8008506:	2301      	movs	r3, #1
 8008508:	fb0c 2101 	mla	r1, ip, r1, r2
 800850c:	e7f0      	b.n	80084f0 <_svfiprintf_r+0x194>
 800850e:	ab03      	add	r3, sp, #12
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	462a      	mov	r2, r5
 8008514:	4638      	mov	r0, r7
 8008516:	4b10      	ldr	r3, [pc, #64]	; (8008558 <_svfiprintf_r+0x1fc>)
 8008518:	a904      	add	r1, sp, #16
 800851a:	f3af 8000 	nop.w
 800851e:	1c42      	adds	r2, r0, #1
 8008520:	4606      	mov	r6, r0
 8008522:	d1d6      	bne.n	80084d2 <_svfiprintf_r+0x176>
 8008524:	89ab      	ldrh	r3, [r5, #12]
 8008526:	065b      	lsls	r3, r3, #25
 8008528:	f53f af2c 	bmi.w	8008384 <_svfiprintf_r+0x28>
 800852c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800852e:	b01d      	add	sp, #116	; 0x74
 8008530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008534:	ab03      	add	r3, sp, #12
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	462a      	mov	r2, r5
 800853a:	4638      	mov	r0, r7
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <_svfiprintf_r+0x1fc>)
 800853e:	a904      	add	r1, sp, #16
 8008540:	f000 f87c 	bl	800863c <_printf_i>
 8008544:	e7eb      	b.n	800851e <_svfiprintf_r+0x1c2>
 8008546:	bf00      	nop
 8008548:	08008bf0 	.word	0x08008bf0
 800854c:	08008bf6 	.word	0x08008bf6
 8008550:	08008bfa 	.word	0x08008bfa
 8008554:	00000000 	.word	0x00000000
 8008558:	080082a5 	.word	0x080082a5

0800855c <_printf_common>:
 800855c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008560:	4616      	mov	r6, r2
 8008562:	4699      	mov	r9, r3
 8008564:	688a      	ldr	r2, [r1, #8]
 8008566:	690b      	ldr	r3, [r1, #16]
 8008568:	4607      	mov	r7, r0
 800856a:	4293      	cmp	r3, r2
 800856c:	bfb8      	it	lt
 800856e:	4613      	movlt	r3, r2
 8008570:	6033      	str	r3, [r6, #0]
 8008572:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008576:	460c      	mov	r4, r1
 8008578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800857c:	b10a      	cbz	r2, 8008582 <_printf_common+0x26>
 800857e:	3301      	adds	r3, #1
 8008580:	6033      	str	r3, [r6, #0]
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	0699      	lsls	r1, r3, #26
 8008586:	bf42      	ittt	mi
 8008588:	6833      	ldrmi	r3, [r6, #0]
 800858a:	3302      	addmi	r3, #2
 800858c:	6033      	strmi	r3, [r6, #0]
 800858e:	6825      	ldr	r5, [r4, #0]
 8008590:	f015 0506 	ands.w	r5, r5, #6
 8008594:	d106      	bne.n	80085a4 <_printf_common+0x48>
 8008596:	f104 0a19 	add.w	sl, r4, #25
 800859a:	68e3      	ldr	r3, [r4, #12]
 800859c:	6832      	ldr	r2, [r6, #0]
 800859e:	1a9b      	subs	r3, r3, r2
 80085a0:	42ab      	cmp	r3, r5
 80085a2:	dc28      	bgt.n	80085f6 <_printf_common+0x9a>
 80085a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085a8:	1e13      	subs	r3, r2, #0
 80085aa:	6822      	ldr	r2, [r4, #0]
 80085ac:	bf18      	it	ne
 80085ae:	2301      	movne	r3, #1
 80085b0:	0692      	lsls	r2, r2, #26
 80085b2:	d42d      	bmi.n	8008610 <_printf_common+0xb4>
 80085b4:	4649      	mov	r1, r9
 80085b6:	4638      	mov	r0, r7
 80085b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085bc:	47c0      	blx	r8
 80085be:	3001      	adds	r0, #1
 80085c0:	d020      	beq.n	8008604 <_printf_common+0xa8>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	68e5      	ldr	r5, [r4, #12]
 80085c6:	f003 0306 	and.w	r3, r3, #6
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	bf18      	it	ne
 80085ce:	2500      	movne	r5, #0
 80085d0:	6832      	ldr	r2, [r6, #0]
 80085d2:	f04f 0600 	mov.w	r6, #0
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	bf08      	it	eq
 80085da:	1aad      	subeq	r5, r5, r2
 80085dc:	6922      	ldr	r2, [r4, #16]
 80085de:	bf08      	it	eq
 80085e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e4:	4293      	cmp	r3, r2
 80085e6:	bfc4      	itt	gt
 80085e8:	1a9b      	subgt	r3, r3, r2
 80085ea:	18ed      	addgt	r5, r5, r3
 80085ec:	341a      	adds	r4, #26
 80085ee:	42b5      	cmp	r5, r6
 80085f0:	d11a      	bne.n	8008628 <_printf_common+0xcc>
 80085f2:	2000      	movs	r0, #0
 80085f4:	e008      	b.n	8008608 <_printf_common+0xac>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4652      	mov	r2, sl
 80085fa:	4649      	mov	r1, r9
 80085fc:	4638      	mov	r0, r7
 80085fe:	47c0      	blx	r8
 8008600:	3001      	adds	r0, #1
 8008602:	d103      	bne.n	800860c <_printf_common+0xb0>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	3501      	adds	r5, #1
 800860e:	e7c4      	b.n	800859a <_printf_common+0x3e>
 8008610:	2030      	movs	r0, #48	; 0x30
 8008612:	18e1      	adds	r1, r4, r3
 8008614:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800861e:	4422      	add	r2, r4
 8008620:	3302      	adds	r3, #2
 8008622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008626:	e7c5      	b.n	80085b4 <_printf_common+0x58>
 8008628:	2301      	movs	r3, #1
 800862a:	4622      	mov	r2, r4
 800862c:	4649      	mov	r1, r9
 800862e:	4638      	mov	r0, r7
 8008630:	47c0      	blx	r8
 8008632:	3001      	adds	r0, #1
 8008634:	d0e6      	beq.n	8008604 <_printf_common+0xa8>
 8008636:	3601      	adds	r6, #1
 8008638:	e7d9      	b.n	80085ee <_printf_common+0x92>
	...

0800863c <_printf_i>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	7e0f      	ldrb	r7, [r1, #24]
 8008642:	4691      	mov	r9, r2
 8008644:	2f78      	cmp	r7, #120	; 0x78
 8008646:	4680      	mov	r8, r0
 8008648:	460c      	mov	r4, r1
 800864a:	469a      	mov	sl, r3
 800864c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800864e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008652:	d807      	bhi.n	8008664 <_printf_i+0x28>
 8008654:	2f62      	cmp	r7, #98	; 0x62
 8008656:	d80a      	bhi.n	800866e <_printf_i+0x32>
 8008658:	2f00      	cmp	r7, #0
 800865a:	f000 80d9 	beq.w	8008810 <_printf_i+0x1d4>
 800865e:	2f58      	cmp	r7, #88	; 0x58
 8008660:	f000 80a4 	beq.w	80087ac <_printf_i+0x170>
 8008664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800866c:	e03a      	b.n	80086e4 <_printf_i+0xa8>
 800866e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008672:	2b15      	cmp	r3, #21
 8008674:	d8f6      	bhi.n	8008664 <_printf_i+0x28>
 8008676:	a101      	add	r1, pc, #4	; (adr r1, 800867c <_printf_i+0x40>)
 8008678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800867c:	080086d5 	.word	0x080086d5
 8008680:	080086e9 	.word	0x080086e9
 8008684:	08008665 	.word	0x08008665
 8008688:	08008665 	.word	0x08008665
 800868c:	08008665 	.word	0x08008665
 8008690:	08008665 	.word	0x08008665
 8008694:	080086e9 	.word	0x080086e9
 8008698:	08008665 	.word	0x08008665
 800869c:	08008665 	.word	0x08008665
 80086a0:	08008665 	.word	0x08008665
 80086a4:	08008665 	.word	0x08008665
 80086a8:	080087f7 	.word	0x080087f7
 80086ac:	08008719 	.word	0x08008719
 80086b0:	080087d9 	.word	0x080087d9
 80086b4:	08008665 	.word	0x08008665
 80086b8:	08008665 	.word	0x08008665
 80086bc:	08008819 	.word	0x08008819
 80086c0:	08008665 	.word	0x08008665
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008665 	.word	0x08008665
 80086cc:	08008665 	.word	0x08008665
 80086d0:	080087e1 	.word	0x080087e1
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	602a      	str	r2, [r5, #0]
 80086dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0a4      	b.n	8008832 <_printf_i+0x1f6>
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	6829      	ldr	r1, [r5, #0]
 80086ec:	0606      	lsls	r6, r0, #24
 80086ee:	f101 0304 	add.w	r3, r1, #4
 80086f2:	d50a      	bpl.n	800870a <_printf_i+0xce>
 80086f4:	680e      	ldr	r6, [r1, #0]
 80086f6:	602b      	str	r3, [r5, #0]
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	da03      	bge.n	8008704 <_printf_i+0xc8>
 80086fc:	232d      	movs	r3, #45	; 0x2d
 80086fe:	4276      	negs	r6, r6
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008704:	230a      	movs	r3, #10
 8008706:	485e      	ldr	r0, [pc, #376]	; (8008880 <_printf_i+0x244>)
 8008708:	e019      	b.n	800873e <_printf_i+0x102>
 800870a:	680e      	ldr	r6, [r1, #0]
 800870c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008710:	602b      	str	r3, [r5, #0]
 8008712:	bf18      	it	ne
 8008714:	b236      	sxthne	r6, r6
 8008716:	e7ef      	b.n	80086f8 <_printf_i+0xbc>
 8008718:	682b      	ldr	r3, [r5, #0]
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	1d19      	adds	r1, r3, #4
 800871e:	6029      	str	r1, [r5, #0]
 8008720:	0601      	lsls	r1, r0, #24
 8008722:	d501      	bpl.n	8008728 <_printf_i+0xec>
 8008724:	681e      	ldr	r6, [r3, #0]
 8008726:	e002      	b.n	800872e <_printf_i+0xf2>
 8008728:	0646      	lsls	r6, r0, #25
 800872a:	d5fb      	bpl.n	8008724 <_printf_i+0xe8>
 800872c:	881e      	ldrh	r6, [r3, #0]
 800872e:	2f6f      	cmp	r7, #111	; 0x6f
 8008730:	bf0c      	ite	eq
 8008732:	2308      	moveq	r3, #8
 8008734:	230a      	movne	r3, #10
 8008736:	4852      	ldr	r0, [pc, #328]	; (8008880 <_printf_i+0x244>)
 8008738:	2100      	movs	r1, #0
 800873a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800873e:	6865      	ldr	r5, [r4, #4]
 8008740:	2d00      	cmp	r5, #0
 8008742:	bfa8      	it	ge
 8008744:	6821      	ldrge	r1, [r4, #0]
 8008746:	60a5      	str	r5, [r4, #8]
 8008748:	bfa4      	itt	ge
 800874a:	f021 0104 	bicge.w	r1, r1, #4
 800874e:	6021      	strge	r1, [r4, #0]
 8008750:	b90e      	cbnz	r6, 8008756 <_printf_i+0x11a>
 8008752:	2d00      	cmp	r5, #0
 8008754:	d04d      	beq.n	80087f2 <_printf_i+0x1b6>
 8008756:	4615      	mov	r5, r2
 8008758:	fbb6 f1f3 	udiv	r1, r6, r3
 800875c:	fb03 6711 	mls	r7, r3, r1, r6
 8008760:	5dc7      	ldrb	r7, [r0, r7]
 8008762:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008766:	4637      	mov	r7, r6
 8008768:	42bb      	cmp	r3, r7
 800876a:	460e      	mov	r6, r1
 800876c:	d9f4      	bls.n	8008758 <_printf_i+0x11c>
 800876e:	2b08      	cmp	r3, #8
 8008770:	d10b      	bne.n	800878a <_printf_i+0x14e>
 8008772:	6823      	ldr	r3, [r4, #0]
 8008774:	07de      	lsls	r6, r3, #31
 8008776:	d508      	bpl.n	800878a <_printf_i+0x14e>
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	6861      	ldr	r1, [r4, #4]
 800877c:	4299      	cmp	r1, r3
 800877e:	bfde      	ittt	le
 8008780:	2330      	movle	r3, #48	; 0x30
 8008782:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008786:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800878a:	1b52      	subs	r2, r2, r5
 800878c:	6122      	str	r2, [r4, #16]
 800878e:	464b      	mov	r3, r9
 8008790:	4621      	mov	r1, r4
 8008792:	4640      	mov	r0, r8
 8008794:	f8cd a000 	str.w	sl, [sp]
 8008798:	aa03      	add	r2, sp, #12
 800879a:	f7ff fedf 	bl	800855c <_printf_common>
 800879e:	3001      	adds	r0, #1
 80087a0:	d14c      	bne.n	800883c <_printf_i+0x200>
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a6:	b004      	add	sp, #16
 80087a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ac:	4834      	ldr	r0, [pc, #208]	; (8008880 <_printf_i+0x244>)
 80087ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087b2:	6829      	ldr	r1, [r5, #0]
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80087ba:	6029      	str	r1, [r5, #0]
 80087bc:	061d      	lsls	r5, r3, #24
 80087be:	d514      	bpl.n	80087ea <_printf_i+0x1ae>
 80087c0:	07df      	lsls	r7, r3, #31
 80087c2:	bf44      	itt	mi
 80087c4:	f043 0320 	orrmi.w	r3, r3, #32
 80087c8:	6023      	strmi	r3, [r4, #0]
 80087ca:	b91e      	cbnz	r6, 80087d4 <_printf_i+0x198>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	f023 0320 	bic.w	r3, r3, #32
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	2310      	movs	r3, #16
 80087d6:	e7af      	b.n	8008738 <_printf_i+0xfc>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	f043 0320 	orr.w	r3, r3, #32
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	2378      	movs	r3, #120	; 0x78
 80087e2:	4828      	ldr	r0, [pc, #160]	; (8008884 <_printf_i+0x248>)
 80087e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087e8:	e7e3      	b.n	80087b2 <_printf_i+0x176>
 80087ea:	0659      	lsls	r1, r3, #25
 80087ec:	bf48      	it	mi
 80087ee:	b2b6      	uxthmi	r6, r6
 80087f0:	e7e6      	b.n	80087c0 <_printf_i+0x184>
 80087f2:	4615      	mov	r5, r2
 80087f4:	e7bb      	b.n	800876e <_printf_i+0x132>
 80087f6:	682b      	ldr	r3, [r5, #0]
 80087f8:	6826      	ldr	r6, [r4, #0]
 80087fa:	1d18      	adds	r0, r3, #4
 80087fc:	6961      	ldr	r1, [r4, #20]
 80087fe:	6028      	str	r0, [r5, #0]
 8008800:	0635      	lsls	r5, r6, #24
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	d501      	bpl.n	800880a <_printf_i+0x1ce>
 8008806:	6019      	str	r1, [r3, #0]
 8008808:	e002      	b.n	8008810 <_printf_i+0x1d4>
 800880a:	0670      	lsls	r0, r6, #25
 800880c:	d5fb      	bpl.n	8008806 <_printf_i+0x1ca>
 800880e:	8019      	strh	r1, [r3, #0]
 8008810:	2300      	movs	r3, #0
 8008812:	4615      	mov	r5, r2
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	e7ba      	b.n	800878e <_printf_i+0x152>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	2100      	movs	r1, #0
 800881c:	1d1a      	adds	r2, r3, #4
 800881e:	602a      	str	r2, [r5, #0]
 8008820:	681d      	ldr	r5, [r3, #0]
 8008822:	6862      	ldr	r2, [r4, #4]
 8008824:	4628      	mov	r0, r5
 8008826:	f000 f82f 	bl	8008888 <memchr>
 800882a:	b108      	cbz	r0, 8008830 <_printf_i+0x1f4>
 800882c:	1b40      	subs	r0, r0, r5
 800882e:	6060      	str	r0, [r4, #4]
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	6123      	str	r3, [r4, #16]
 8008834:	2300      	movs	r3, #0
 8008836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883a:	e7a8      	b.n	800878e <_printf_i+0x152>
 800883c:	462a      	mov	r2, r5
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	47d0      	blx	sl
 8008846:	3001      	adds	r0, #1
 8008848:	d0ab      	beq.n	80087a2 <_printf_i+0x166>
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	079b      	lsls	r3, r3, #30
 800884e:	d413      	bmi.n	8008878 <_printf_i+0x23c>
 8008850:	68e0      	ldr	r0, [r4, #12]
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	4298      	cmp	r0, r3
 8008856:	bfb8      	it	lt
 8008858:	4618      	movlt	r0, r3
 800885a:	e7a4      	b.n	80087a6 <_printf_i+0x16a>
 800885c:	2301      	movs	r3, #1
 800885e:	4632      	mov	r2, r6
 8008860:	4649      	mov	r1, r9
 8008862:	4640      	mov	r0, r8
 8008864:	47d0      	blx	sl
 8008866:	3001      	adds	r0, #1
 8008868:	d09b      	beq.n	80087a2 <_printf_i+0x166>
 800886a:	3501      	adds	r5, #1
 800886c:	68e3      	ldr	r3, [r4, #12]
 800886e:	9903      	ldr	r1, [sp, #12]
 8008870:	1a5b      	subs	r3, r3, r1
 8008872:	42ab      	cmp	r3, r5
 8008874:	dcf2      	bgt.n	800885c <_printf_i+0x220>
 8008876:	e7eb      	b.n	8008850 <_printf_i+0x214>
 8008878:	2500      	movs	r5, #0
 800887a:	f104 0619 	add.w	r6, r4, #25
 800887e:	e7f5      	b.n	800886c <_printf_i+0x230>
 8008880:	08008c01 	.word	0x08008c01
 8008884:	08008c12 	.word	0x08008c12

08008888 <memchr>:
 8008888:	4603      	mov	r3, r0
 800888a:	b510      	push	{r4, lr}
 800888c:	b2c9      	uxtb	r1, r1
 800888e:	4402      	add	r2, r0
 8008890:	4293      	cmp	r3, r2
 8008892:	4618      	mov	r0, r3
 8008894:	d101      	bne.n	800889a <memchr+0x12>
 8008896:	2000      	movs	r0, #0
 8008898:	e003      	b.n	80088a2 <memchr+0x1a>
 800889a:	7804      	ldrb	r4, [r0, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	428c      	cmp	r4, r1
 80088a0:	d1f6      	bne.n	8008890 <memchr+0x8>
 80088a2:	bd10      	pop	{r4, pc}

080088a4 <memcpy>:
 80088a4:	440a      	add	r2, r1
 80088a6:	4291      	cmp	r1, r2
 80088a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80088ac:	d100      	bne.n	80088b0 <memcpy+0xc>
 80088ae:	4770      	bx	lr
 80088b0:	b510      	push	{r4, lr}
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	4291      	cmp	r1, r2
 80088b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088bc:	d1f9      	bne.n	80088b2 <memcpy+0xe>
 80088be:	bd10      	pop	{r4, pc}

080088c0 <memmove>:
 80088c0:	4288      	cmp	r0, r1
 80088c2:	b510      	push	{r4, lr}
 80088c4:	eb01 0402 	add.w	r4, r1, r2
 80088c8:	d902      	bls.n	80088d0 <memmove+0x10>
 80088ca:	4284      	cmp	r4, r0
 80088cc:	4623      	mov	r3, r4
 80088ce:	d807      	bhi.n	80088e0 <memmove+0x20>
 80088d0:	1e43      	subs	r3, r0, #1
 80088d2:	42a1      	cmp	r1, r4
 80088d4:	d008      	beq.n	80088e8 <memmove+0x28>
 80088d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088de:	e7f8      	b.n	80088d2 <memmove+0x12>
 80088e0:	4601      	mov	r1, r0
 80088e2:	4402      	add	r2, r0
 80088e4:	428a      	cmp	r2, r1
 80088e6:	d100      	bne.n	80088ea <memmove+0x2a>
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088f2:	e7f7      	b.n	80088e4 <memmove+0x24>

080088f4 <_free_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4605      	mov	r5, r0
 80088f8:	2900      	cmp	r1, #0
 80088fa:	d040      	beq.n	800897e <_free_r+0x8a>
 80088fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008900:	1f0c      	subs	r4, r1, #4
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfb8      	it	lt
 8008906:	18e4      	addlt	r4, r4, r3
 8008908:	f000 f910 	bl	8008b2c <__malloc_lock>
 800890c:	4a1c      	ldr	r2, [pc, #112]	; (8008980 <_free_r+0x8c>)
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	b933      	cbnz	r3, 8008920 <_free_r+0x2c>
 8008912:	6063      	str	r3, [r4, #4]
 8008914:	6014      	str	r4, [r2, #0]
 8008916:	4628      	mov	r0, r5
 8008918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800891c:	f000 b90c 	b.w	8008b38 <__malloc_unlock>
 8008920:	42a3      	cmp	r3, r4
 8008922:	d908      	bls.n	8008936 <_free_r+0x42>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	1821      	adds	r1, r4, r0
 8008928:	428b      	cmp	r3, r1
 800892a:	bf01      	itttt	eq
 800892c:	6819      	ldreq	r1, [r3, #0]
 800892e:	685b      	ldreq	r3, [r3, #4]
 8008930:	1809      	addeq	r1, r1, r0
 8008932:	6021      	streq	r1, [r4, #0]
 8008934:	e7ed      	b.n	8008912 <_free_r+0x1e>
 8008936:	461a      	mov	r2, r3
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	b10b      	cbz	r3, 8008940 <_free_r+0x4c>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d9fa      	bls.n	8008936 <_free_r+0x42>
 8008940:	6811      	ldr	r1, [r2, #0]
 8008942:	1850      	adds	r0, r2, r1
 8008944:	42a0      	cmp	r0, r4
 8008946:	d10b      	bne.n	8008960 <_free_r+0x6c>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	4401      	add	r1, r0
 800894c:	1850      	adds	r0, r2, r1
 800894e:	4283      	cmp	r3, r0
 8008950:	6011      	str	r1, [r2, #0]
 8008952:	d1e0      	bne.n	8008916 <_free_r+0x22>
 8008954:	6818      	ldr	r0, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4401      	add	r1, r0
 800895a:	6011      	str	r1, [r2, #0]
 800895c:	6053      	str	r3, [r2, #4]
 800895e:	e7da      	b.n	8008916 <_free_r+0x22>
 8008960:	d902      	bls.n	8008968 <_free_r+0x74>
 8008962:	230c      	movs	r3, #12
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	e7d6      	b.n	8008916 <_free_r+0x22>
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	1821      	adds	r1, r4, r0
 800896c:	428b      	cmp	r3, r1
 800896e:	bf01      	itttt	eq
 8008970:	6819      	ldreq	r1, [r3, #0]
 8008972:	685b      	ldreq	r3, [r3, #4]
 8008974:	1809      	addeq	r1, r1, r0
 8008976:	6021      	streq	r1, [r4, #0]
 8008978:	6063      	str	r3, [r4, #4]
 800897a:	6054      	str	r4, [r2, #4]
 800897c:	e7cb      	b.n	8008916 <_free_r+0x22>
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	20000a7c 	.word	0x20000a7c

08008984 <sbrk_aligned>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4e0e      	ldr	r6, [pc, #56]	; (80089c0 <sbrk_aligned+0x3c>)
 8008988:	460c      	mov	r4, r1
 800898a:	6831      	ldr	r1, [r6, #0]
 800898c:	4605      	mov	r5, r0
 800898e:	b911      	cbnz	r1, 8008996 <sbrk_aligned+0x12>
 8008990:	f000 f8bc 	bl	8008b0c <_sbrk_r>
 8008994:	6030      	str	r0, [r6, #0]
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f8b7 	bl	8008b0c <_sbrk_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d00a      	beq.n	80089b8 <sbrk_aligned+0x34>
 80089a2:	1cc4      	adds	r4, r0, #3
 80089a4:	f024 0403 	bic.w	r4, r4, #3
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d007      	beq.n	80089bc <sbrk_aligned+0x38>
 80089ac:	1a21      	subs	r1, r4, r0
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 f8ac 	bl	8008b0c <_sbrk_r>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d101      	bne.n	80089bc <sbrk_aligned+0x38>
 80089b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089bc:	4620      	mov	r0, r4
 80089be:	bd70      	pop	{r4, r5, r6, pc}
 80089c0:	20000a80 	.word	0x20000a80

080089c4 <_malloc_r>:
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	1ccd      	adds	r5, r1, #3
 80089ca:	f025 0503 	bic.w	r5, r5, #3
 80089ce:	3508      	adds	r5, #8
 80089d0:	2d0c      	cmp	r5, #12
 80089d2:	bf38      	it	cc
 80089d4:	250c      	movcc	r5, #12
 80089d6:	2d00      	cmp	r5, #0
 80089d8:	4607      	mov	r7, r0
 80089da:	db01      	blt.n	80089e0 <_malloc_r+0x1c>
 80089dc:	42a9      	cmp	r1, r5
 80089de:	d905      	bls.n	80089ec <_malloc_r+0x28>
 80089e0:	230c      	movs	r3, #12
 80089e2:	2600      	movs	r6, #0
 80089e4:	603b      	str	r3, [r7, #0]
 80089e6:	4630      	mov	r0, r6
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	4e2e      	ldr	r6, [pc, #184]	; (8008aa8 <_malloc_r+0xe4>)
 80089ee:	f000 f89d 	bl	8008b2c <__malloc_lock>
 80089f2:	6833      	ldr	r3, [r6, #0]
 80089f4:	461c      	mov	r4, r3
 80089f6:	bb34      	cbnz	r4, 8008a46 <_malloc_r+0x82>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff ffc2 	bl	8008984 <sbrk_aligned>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	4604      	mov	r4, r0
 8008a04:	d14d      	bne.n	8008aa2 <_malloc_r+0xde>
 8008a06:	6834      	ldr	r4, [r6, #0]
 8008a08:	4626      	mov	r6, r4
 8008a0a:	2e00      	cmp	r6, #0
 8008a0c:	d140      	bne.n	8008a90 <_malloc_r+0xcc>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	4631      	mov	r1, r6
 8008a12:	4638      	mov	r0, r7
 8008a14:	eb04 0803 	add.w	r8, r4, r3
 8008a18:	f000 f878 	bl	8008b0c <_sbrk_r>
 8008a1c:	4580      	cmp	r8, r0
 8008a1e:	d13a      	bne.n	8008a96 <_malloc_r+0xd2>
 8008a20:	6821      	ldr	r1, [r4, #0]
 8008a22:	3503      	adds	r5, #3
 8008a24:	1a6d      	subs	r5, r5, r1
 8008a26:	f025 0503 	bic.w	r5, r5, #3
 8008a2a:	3508      	adds	r5, #8
 8008a2c:	2d0c      	cmp	r5, #12
 8008a2e:	bf38      	it	cc
 8008a30:	250c      	movcc	r5, #12
 8008a32:	4638      	mov	r0, r7
 8008a34:	4629      	mov	r1, r5
 8008a36:	f7ff ffa5 	bl	8008984 <sbrk_aligned>
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d02b      	beq.n	8008a96 <_malloc_r+0xd2>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	442b      	add	r3, r5
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	e00e      	b.n	8008a64 <_malloc_r+0xa0>
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	1b52      	subs	r2, r2, r5
 8008a4a:	d41e      	bmi.n	8008a8a <_malloc_r+0xc6>
 8008a4c:	2a0b      	cmp	r2, #11
 8008a4e:	d916      	bls.n	8008a7e <_malloc_r+0xba>
 8008a50:	1961      	adds	r1, r4, r5
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	6025      	str	r5, [r4, #0]
 8008a56:	bf18      	it	ne
 8008a58:	6059      	strne	r1, [r3, #4]
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	bf08      	it	eq
 8008a5e:	6031      	streq	r1, [r6, #0]
 8008a60:	5162      	str	r2, [r4, r5]
 8008a62:	604b      	str	r3, [r1, #4]
 8008a64:	4638      	mov	r0, r7
 8008a66:	f104 060b 	add.w	r6, r4, #11
 8008a6a:	f000 f865 	bl	8008b38 <__malloc_unlock>
 8008a6e:	f026 0607 	bic.w	r6, r6, #7
 8008a72:	1d23      	adds	r3, r4, #4
 8008a74:	1af2      	subs	r2, r6, r3
 8008a76:	d0b6      	beq.n	80089e6 <_malloc_r+0x22>
 8008a78:	1b9b      	subs	r3, r3, r6
 8008a7a:	50a3      	str	r3, [r4, r2]
 8008a7c:	e7b3      	b.n	80089e6 <_malloc_r+0x22>
 8008a7e:	6862      	ldr	r2, [r4, #4]
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	bf0c      	ite	eq
 8008a84:	6032      	streq	r2, [r6, #0]
 8008a86:	605a      	strne	r2, [r3, #4]
 8008a88:	e7ec      	b.n	8008a64 <_malloc_r+0xa0>
 8008a8a:	4623      	mov	r3, r4
 8008a8c:	6864      	ldr	r4, [r4, #4]
 8008a8e:	e7b2      	b.n	80089f6 <_malloc_r+0x32>
 8008a90:	4634      	mov	r4, r6
 8008a92:	6876      	ldr	r6, [r6, #4]
 8008a94:	e7b9      	b.n	8008a0a <_malloc_r+0x46>
 8008a96:	230c      	movs	r3, #12
 8008a98:	4638      	mov	r0, r7
 8008a9a:	603b      	str	r3, [r7, #0]
 8008a9c:	f000 f84c 	bl	8008b38 <__malloc_unlock>
 8008aa0:	e7a1      	b.n	80089e6 <_malloc_r+0x22>
 8008aa2:	6025      	str	r5, [r4, #0]
 8008aa4:	e7de      	b.n	8008a64 <_malloc_r+0xa0>
 8008aa6:	bf00      	nop
 8008aa8:	20000a7c 	.word	0x20000a7c

08008aac <_realloc_r>:
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	4680      	mov	r8, r0
 8008ab2:	4614      	mov	r4, r2
 8008ab4:	460e      	mov	r6, r1
 8008ab6:	b921      	cbnz	r1, 8008ac2 <_realloc_r+0x16>
 8008ab8:	4611      	mov	r1, r2
 8008aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008abe:	f7ff bf81 	b.w	80089c4 <_malloc_r>
 8008ac2:	b92a      	cbnz	r2, 8008ad0 <_realloc_r+0x24>
 8008ac4:	f7ff ff16 	bl	80088f4 <_free_r>
 8008ac8:	4625      	mov	r5, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad0:	f000 f838 	bl	8008b44 <_malloc_usable_size_r>
 8008ad4:	4284      	cmp	r4, r0
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	d802      	bhi.n	8008ae0 <_realloc_r+0x34>
 8008ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ade:	d812      	bhi.n	8008b06 <_realloc_r+0x5a>
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	f7ff ff6e 	bl	80089c4 <_malloc_r>
 8008ae8:	4605      	mov	r5, r0
 8008aea:	2800      	cmp	r0, #0
 8008aec:	d0ed      	beq.n	8008aca <_realloc_r+0x1e>
 8008aee:	42bc      	cmp	r4, r7
 8008af0:	4622      	mov	r2, r4
 8008af2:	4631      	mov	r1, r6
 8008af4:	bf28      	it	cs
 8008af6:	463a      	movcs	r2, r7
 8008af8:	f7ff fed4 	bl	80088a4 <memcpy>
 8008afc:	4631      	mov	r1, r6
 8008afe:	4640      	mov	r0, r8
 8008b00:	f7ff fef8 	bl	80088f4 <_free_r>
 8008b04:	e7e1      	b.n	8008aca <_realloc_r+0x1e>
 8008b06:	4635      	mov	r5, r6
 8008b08:	e7df      	b.n	8008aca <_realloc_r+0x1e>
	...

08008b0c <_sbrk_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4d05      	ldr	r5, [pc, #20]	; (8008b28 <_sbrk_r+0x1c>)
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	602b      	str	r3, [r5, #0]
 8008b18:	f7f7 fdd4 	bl	80006c4 <_sbrk>
 8008b1c:	1c43      	adds	r3, r0, #1
 8008b1e:	d102      	bne.n	8008b26 <_sbrk_r+0x1a>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	b103      	cbz	r3, 8008b26 <_sbrk_r+0x1a>
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	bd38      	pop	{r3, r4, r5, pc}
 8008b28:	20000a84 	.word	0x20000a84

08008b2c <__malloc_lock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__malloc_lock+0x8>)
 8008b2e:	f000 b811 	b.w	8008b54 <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20000a88 	.word	0x20000a88

08008b38 <__malloc_unlock>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__malloc_unlock+0x8>)
 8008b3a:	f000 b80c 	b.w	8008b56 <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20000a88 	.word	0x20000a88

08008b44 <_malloc_usable_size_r>:
 8008b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b48:	1f18      	subs	r0, r3, #4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bfbc      	itt	lt
 8008b4e:	580b      	ldrlt	r3, [r1, r0]
 8008b50:	18c0      	addlt	r0, r0, r3
 8008b52:	4770      	bx	lr

08008b54 <__retarget_lock_acquire_recursive>:
 8008b54:	4770      	bx	lr

08008b56 <__retarget_lock_release_recursive>:
 8008b56:	4770      	bx	lr

08008b58 <_init>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	bf00      	nop
 8008b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5e:	bc08      	pop	{r3}
 8008b60:	469e      	mov	lr, r3
 8008b62:	4770      	bx	lr

08008b64 <_fini>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	bf00      	nop
 8008b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6a:	bc08      	pop	{r3}
 8008b6c:	469e      	mov	lr, r3
 8008b6e:	4770      	bx	lr
