
Midi_Hand_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008ea4  08008ea4  00018ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f64  08008f64  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  08008f64  08008f64  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f64  08008f64  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f64  08008f64  00018f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f6c  08008f6c  00018f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08008f70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  200001c8  08009138  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ab4  08009138  00020ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f07  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003431  00000000  00000000  000330f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00036530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cdec  00000000  00000000  000384d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b39  00000000  00000000  000552bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a64  00000000  00000000  0006adf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e0  00000000  00000000  000fb8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c8 	.word	0x200001c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e8c 	.word	0x08008e8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001cc 	.word	0x200001cc
 8000148:	08008e8c 	.word	0x08008e8c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcbf 	bl	8000ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f867 	bl	8000228 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f97b 	bl	8000454 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 800015e:	f000 f8cf 	bl	8000300 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000162:	f000 f915 	bl	8000390 <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 8000166:	f000 f947 	bl	80003f8 <_ZL19MX_USART1_UART_Initv>
  MX_USB_DEVICE_Init();
 800016a:	f007 fe29 	bl	8007dc0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  potentiometer1.Init();
 800016e:	4829      	ldr	r0, [pc, #164]	; (8000214 <main+0xc8>)
 8000170:	f000 fba0 	bl	80008b4 <_ZN13Potentiometer4InitEv>
  rotaryEncoder1.Init();
 8000174:	4828      	ldr	r0, [pc, #160]	; (8000218 <main+0xcc>)
 8000176:	f000 fc02 	bl	800097e <_ZN13RotaryEncoder4InitEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t re1_val = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	75fb      	strb	r3, [r7, #23]
  uint8_t re1_sw_state = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	75bb      	strb	r3, [r7, #22]
		//   sprintf(buffer, "%u \r\n", pot1_val);
		//   HAL_UART_Transmit(&huart1,(uint8_t*)buffer,sizeof(buffer),10);// Sending in normal mode
	  // }

    // Testing Rotary Encoder
    if(0 == rotaryEncoder1.Read())		
 8000182:	4825      	ldr	r0, [pc, #148]	; (8000218 <main+0xcc>)
 8000184:	f000 fc44 	bl	8000a10 <_ZN13RotaryEncoder4ReadEv>
 8000188:	4603      	mov	r3, r0
 800018a:	2b00      	cmp	r3, #0
 800018c:	bf0c      	ite	eq
 800018e:	2301      	moveq	r3, #1
 8000190:	2300      	movne	r3, #0
 8000192:	b2db      	uxtb	r3, r3
 8000194:	2b00      	cmp	r3, #0
 8000196:	d0f4      	beq.n	8000182 <main+0x36>
	  {		
		  char buffer[20];
      if(rotaryEncoder1.GetCount() != re1_val){
 8000198:	481f      	ldr	r0, [pc, #124]	; (8000218 <main+0xcc>)
 800019a:	f000 fc84 	bl	8000aa6 <_ZN13RotaryEncoder8GetCountEv>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	7dfb      	ldrb	r3, [r7, #23]
 80001a4:	4293      	cmp	r3, r2
 80001a6:	bf14      	ite	ne
 80001a8:	2301      	movne	r3, #1
 80001aa:	2300      	moveq	r3, #0
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d010      	beq.n	80001d4 <main+0x88>
        re1_val = rotaryEncoder1.GetCount();
 80001b2:	4819      	ldr	r0, [pc, #100]	; (8000218 <main+0xcc>)
 80001b4:	f000 fc77 	bl	8000aa6 <_ZN13RotaryEncoder8GetCountEv>
 80001b8:	4603      	mov	r3, r0
 80001ba:	75fb      	strb	r3, [r7, #23]
        sprintf(buffer, "RE: %d, %d\n", re1_val, re1_sw_state);
 80001bc:	7dfa      	ldrb	r2, [r7, #23]
 80001be:	7dbb      	ldrb	r3, [r7, #22]
 80001c0:	4638      	mov	r0, r7
 80001c2:	4916      	ldr	r1, [pc, #88]	; (800021c <main+0xd0>)
 80001c4:	f008 f9e8 	bl	8008598 <siprintf>
		    HAL_UART_Transmit(&huart1,(uint8_t*)buffer,sizeof(buffer),10);
 80001c8:	4639      	mov	r1, r7
 80001ca:	230a      	movs	r3, #10
 80001cc:	2214      	movs	r2, #20
 80001ce:	4814      	ldr	r0, [pc, #80]	; (8000220 <main+0xd4>)
 80001d0:	f003 fcab 	bl	8003b2a <HAL_UART_Transmit>
      }
      if(rotaryEncoder1.GetSwitchState() != re1_sw_state){
 80001d4:	4810      	ldr	r0, [pc, #64]	; (8000218 <main+0xcc>)
 80001d6:	f000 fc71 	bl	8000abc <_ZN13RotaryEncoder14GetSwitchStateEv>
 80001da:	4603      	mov	r3, r0
 80001dc:	461a      	mov	r2, r3
 80001de:	7dbb      	ldrb	r3, [r7, #22]
 80001e0:	4293      	cmp	r3, r2
 80001e2:	bf14      	ite	ne
 80001e4:	2301      	movne	r3, #1
 80001e6:	2300      	moveq	r3, #0
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0c9      	beq.n	8000182 <main+0x36>
        re1_sw_state = rotaryEncoder1.GetSwitchState();
 80001ee:	480a      	ldr	r0, [pc, #40]	; (8000218 <main+0xcc>)
 80001f0:	f000 fc64 	bl	8000abc <_ZN13RotaryEncoder14GetSwitchStateEv>
 80001f4:	4603      	mov	r3, r0
 80001f6:	75bb      	strb	r3, [r7, #22]
        sprintf(buffer, "RE: %d, %d\r\n", re1_val, re1_sw_state);
 80001f8:	7dfa      	ldrb	r2, [r7, #23]
 80001fa:	7dbb      	ldrb	r3, [r7, #22]
 80001fc:	4638      	mov	r0, r7
 80001fe:	4909      	ldr	r1, [pc, #36]	; (8000224 <main+0xd8>)
 8000200:	f008 f9ca 	bl	8008598 <siprintf>
		    HAL_UART_Transmit(&huart1,(uint8_t*)buffer,sizeof(buffer),10);
 8000204:	4639      	mov	r1, r7
 8000206:	230a      	movs	r3, #10
 8000208:	2214      	movs	r2, #20
 800020a:	4805      	ldr	r0, [pc, #20]	; (8000220 <main+0xd4>)
 800020c:	f003 fc8d 	bl	8003b2a <HAL_UART_Transmit>

    // HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000210:	e7b7      	b.n	8000182 <main+0x36>
 8000212:	bf00      	nop
 8000214:	200002ac 	.word	0x200002ac
 8000218:	200002bc 	.word	0x200002bc
 800021c:	08008ea4 	.word	0x08008ea4
 8000220:	20000268 	.word	0x20000268
 8000224:	08008eb0 	.word	0x08008eb0

08000228 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f008 f9a6 	bl	8008588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 ff36 	bl	80030f0 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	bf14      	ite	ne
 800028a:	2301      	movne	r3, #1
 800028c:	2300      	moveq	r3, #0
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8000294:	f000 f92e 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	2102      	movs	r1, #2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f003 f99d 	bl	80035f4 <HAL_RCC_ClockConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf14      	ite	ne
 80002c0:	2301      	movne	r3, #1
 80002c2:	2300      	moveq	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80002ca:	f000 f913 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002ce:	2312      	movs	r3, #18
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002d8:	2300      	movs	r3, #0
 80002da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f003 fb20 	bl	8003924 <HAL_RCCEx_PeriphCLKConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	bf14      	ite	ne
 80002ea:	2301      	movne	r3, #1
 80002ec:	2300      	moveq	r3, #0
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <_Z18SystemClock_Configv+0xd0>
  {
    Error_Handler();
 80002f4:	f000 f8fe 	bl	80004f4 <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3750      	adds	r7, #80	; 0x50
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 8000312:	4a1e      	ldr	r2, [pc, #120]	; (800038c <_ZL12MX_ADC1_Initv+0x8c>)
 8000314:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 800031e:	2201      	movs	r2, #1
 8000320:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 8000324:	2200      	movs	r2, #0
 8000326:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 800032a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800032e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 8000332:	2200      	movs	r2, #0
 8000334:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 8000338:	2201      	movs	r2, #1
 800033a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800033c:	4812      	ldr	r0, [pc, #72]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 800033e:	f000 fc2b 	bl	8000b98 <HAL_ADC_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	bf14      	ite	ne
 8000348:	2301      	movne	r3, #1
 800034a:	2300      	moveq	r3, #0
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8000352:	f000 f8cf 	bl	80004f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000356:	2300      	movs	r3, #0
 8000358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800035a:	2301      	movs	r3, #1
 800035c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	4808      	ldr	r0, [pc, #32]	; (8000388 <_ZL12MX_ADC1_Initv+0x88>)
 8000368:	f000 fcee 	bl	8000d48 <HAL_ADC_ConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	bf14      	ite	ne
 8000372:	2301      	movne	r3, #1
 8000374:	2300      	moveq	r3, #0
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 800037c:	f000 f8ba 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200001e4 	.word	0x200001e4
 800038c:	40012400 	.word	0x40012400

08000390 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 8000396:	4a16      	ldr	r2, [pc, #88]	; (80003f0 <_ZL12MX_I2C1_Initv+0x60>)
 8000398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 800039c:	4a15      	ldr	r2, [pc, #84]	; (80003f4 <_ZL12MX_I2C1_Initv+0x64>)
 800039e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003a0:	4b12      	ldr	r3, [pc, #72]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ac:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <_ZL12MX_I2C1_Initv+0x5c>)
 80003ce:	f001 f89f 	bl	8001510 <HAL_I2C_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	bf14      	ite	ne
 80003d8:	2301      	movne	r3, #1
 80003da:	2300      	moveq	r3, #0
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80003e2:	f000 f887 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	20000214 	.word	0x20000214
 80003f0:	40005400 	.word	0x40005400
 80003f4:	000186a0 	.word	0x000186a0

080003f8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003fc:	4b13      	ldr	r3, [pc, #76]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b08      	ldr	r3, [pc, #32]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4807      	ldr	r0, [pc, #28]	; (800044c <_ZL19MX_USART1_UART_Initv+0x54>)
 8000430:	f003 fb2e 	bl	8003a90 <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	bf14      	ite	ne
 800043a:	2301      	movne	r3, #1
 800043c:	2300      	moveq	r3, #0
 800043e:	b2db      	uxtb	r3, r3
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000444:	f000 f856 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000268 	.word	0x20000268
 8000450:	40013800 	.word	0x40013800

08000454 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000468:	4b1f      	ldr	r3, [pc, #124]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a1e      	ldr	r2, [pc, #120]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 800046e:	f043 0320 	orr.w	r3, r3, #32
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0320 	and.w	r3, r3, #32
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a18      	ldr	r2, [pc, #96]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a12      	ldr	r2, [pc, #72]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 800049e:	f043 0308 	orr.w	r3, r3, #8
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <_ZL12MX_GPIO_Initv+0x94>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0308 	and.w	r3, r3, #8
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RE0_A_Pin RE0_B_Pin RE0_SW_Pin RE1_A_Pin
                           RE1_B_Pin */
  GPIO_InitStruct.Pin = RE0_A_Pin|RE0_B_Pin|RE0_SW_Pin|RE1_A_Pin
 80004b0:	23f8      	movs	r3, #248	; 0xf8
 80004b2:	613b      	str	r3, [r7, #16]
                          |RE1_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	480a      	ldr	r0, [pc, #40]	; (80004ec <_ZL12MX_GPIO_Initv+0x98>)
 80004c4:	f000 fe88 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RE1_SW_Pin */
  GPIO_InitStruct.Pin = RE1_SW_Pin;
 80004c8:	2301      	movs	r3, #1
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RE1_SW_GPIO_Port, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <_ZL12MX_GPIO_Initv+0x9c>)
 80004dc:	f000 fe7c 	bl	80011d8 <HAL_GPIO_Init>

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40010c00 	.word	0x40010c00

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af04      	add	r7, sp, #16
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d118      	bne.n	8000542 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000516:	4293      	cmp	r3, r2
 8000518:	d113      	bne.n	8000542 <_Z41__static_initialization_and_destruction_0ii+0x42>
                             GPIOA, GPIO_PIN_0);
 800051a:	2301      	movs	r3, #1
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	490b      	ldr	r1, [pc, #44]	; (8000550 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000526:	f000 f9ac 	bl	8000882 <_ZN13PotentiometerC1EP19__ADC_HandleTypeDefmP12GPIO_TypeDeft>
                             GPIOA, GPIO_PIN_5);
 800052a:	2320      	movs	r3, #32
 800052c:	9302      	str	r3, [sp, #8]
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2310      	movs	r3, #16
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000538:	2208      	movs	r2, #8
 800053a:	4904      	ldr	r1, [pc, #16]	; (800054c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800053e:	f000 f9fb 	bl	8000938 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_tS1_t>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40010800 	.word	0x40010800
 8000550:	200001e4 	.word	0x200001e4
 8000554:	200002ac 	.word	0x200002ac
 8000558:	200002bc 	.word	0x200002bc

0800055c <_GLOBAL__sub_I_hadc1>:
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
 8000560:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000564:	2001      	movs	r0, #1
 8000566:	f7ff ffcb 	bl	8000500 <_Z41__static_initialization_and_destruction_0ii>
 800056a:	bd80      	pop	{r7, pc}

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000572:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <HAL_MspInit+0x5c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <HAL_MspInit+0x5c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_MspInit+0x60>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_MspInit+0x60>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_ADC_MspInit+0x6c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d121      	bne.n	8000634 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_ADC_MspInit+0x70>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <HAL_ADC_MspInit+0x70>)
 80005f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <HAL_ADC_MspInit+0x70>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_ADC_MspInit+0x70>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a0c      	ldr	r2, [pc, #48]	; (8000640 <HAL_ADC_MspInit+0x70>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_ADC_MspInit+0x70>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000624:	2303      	movs	r3, #3
 8000626:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <HAL_ADC_MspInit+0x74>)
 8000630:	f000 fdd2 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40012400 	.word	0x40012400
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800

08000648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a15      	ldr	r2, [pc, #84]	; (80006b8 <HAL_I2C_MspInit+0x70>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d123      	bne.n	80006b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000668:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_I2C_MspInit+0x74>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a13      	ldr	r2, [pc, #76]	; (80006bc <HAL_I2C_MspInit+0x74>)
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_I2C_MspInit+0x74>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000680:	23c0      	movs	r3, #192	; 0xc0
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000684:	2312      	movs	r3, #18
 8000686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <HAL_I2C_MspInit+0x78>)
 8000694:	f000 fda0 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_I2C_MspInit+0x74>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_I2C_MspInit+0x74>)
 800069e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a2:	61d3      	str	r3, [r2, #28]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_I2C_MspInit+0x74>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40005400 	.word	0x40005400
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010c00 	.word	0x40010c00

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <HAL_UART_MspInit+0x8c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d131      	bne.n	8000748 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a1a      	ldr	r2, [pc, #104]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_UART_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_UART_MspInit+0x90>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_UART_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f003 0304 	and.w	r3, r3, #4
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <HAL_UART_MspInit+0x94>)
 800072a:	f000 fd55 	bl	80011d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <HAL_UART_MspInit+0x94>)
 8000744:	f000 fd48 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a2:	f000 f9dd 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007b2:	f001 f922 	bl	80019fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200007a4 	.word	0x200007a4

080007c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <_sbrk+0x5c>)
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <_sbrk+0x60>)
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <_sbrk+0x64>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <_sbrk+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f0:	f007 fea0 	bl	8008534 <__errno>
 80007f4:	4603      	mov	r3, r0
 80007f6:	220c      	movs	r2, #12
 80007f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007fe:	e009      	b.n	8000814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <_sbrk+0x64>)
 8000810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20005000 	.word	0x20005000
 8000820:	00000400 	.word	0x00000400
 8000824:	200002d4 	.word	0x200002d4
 8000828:	20000ab8 	.word	0x20000ab8

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	; (8000870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	; (800087c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800085e:	f7ff ffe5 	bl	800082c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000862:	f007 fe6d 	bl	8008540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff fc71 	bl	800014c <main>
  bx lr
 800086a:	4770      	bx	lr
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000874:	08008f70 	.word	0x08008f70
  ldr r2, =_sbss
 8000878:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 800087c:	20000ab4 	.word	0x20000ab4

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>

08000882 <_ZN13PotentiometerC1EP19__ADC_HandleTypeDefmP12GPIO_TypeDeft>:
 *      Author: peterfitzpatrick
 */

#include "Potentiometer.hpp"

Potentiometer::Potentiometer(ADC_HandleTypeDef* hadc, uint32_t channel, GPIO_TypeDef* port, uint16_t pin)
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	60f8      	str	r0, [r7, #12]
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	603b      	str	r3, [r7, #0]
{
    _hadc = hadc;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	601a      	str	r2, [r3, #0]
    _channel = channel;
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	605a      	str	r2, [r3, #4]
    _port = port;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	609a      	str	r2, [r3, #8]
    _pin = pin;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	8b3a      	ldrh	r2, [r7, #24]
 80008a6:	819a      	strh	r2, [r3, #12]
}
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <_ZN13Potentiometer4InitEv>:

int Potentiometer::Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]

    /** Common config
     */
    _hadc->Instance = ADC1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <_ZN13Potentiometer4InitEv+0x80>)
 80008ce:	601a      	str	r2, [r3, #0]
    _hadc->Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
    _hadc->Init.ContinuousConvMode = ENABLE;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2201      	movs	r2, #1
 80008de:	731a      	strb	r2, [r3, #12]
    _hadc->Init.DiscontinuousConvMode = DISABLE;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2200      	movs	r2, #0
 80008e6:	751a      	strb	r2, [r3, #20]
    _hadc->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80008f0:	61da      	str	r2, [r3, #28]
    _hadc->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
    _hadc->Init.NbrOfConversion = 1;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2201      	movs	r2, #1
 8000900:	611a      	str	r2, [r3, #16]
    HAL_ADC_Init(_hadc);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f946 	bl	8000b98 <HAL_ADC_Init>

    /** Configure Regular Channel
     */
    sConfig.Channel = _channel;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000912:	2301      	movs	r3, #1
 8000914:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(_hadc, &sConfig);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f107 020c 	add.w	r2, r7, #12
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fa0f 	bl	8000d48 <HAL_ADC_ConfigChannel>

    return 0;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40012400 	.word	0x40012400

08000938 <_ZN13RotaryEncoderC1EP12GPIO_TypeDeftS1_tS1_t>:
 *      Author: peterfitzpatrick
 */

#include "RotaryEncoder.hpp"

RotaryEncoder::RotaryEncoder(GPIO_TypeDef* port_a, uint16_t pin_a,
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4613      	mov	r3, r2
 8000946:	80fb      	strh	r3, [r7, #6]
                             GPIO_TypeDef* port_b, uint16_t pin_b,
                             GPIO_TypeDef* port_sw, uint16_t pin_sw)
{
    _port_a = port_a;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	60da      	str	r2, [r3, #12]
    _pin_a = pin_a;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	88fa      	ldrh	r2, [r7, #6]
 8000952:	809a      	strh	r2, [r3, #4]
    _port_b = port_b;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	611a      	str	r2, [r3, #16]
    _pin_b = pin_b;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	8b3a      	ldrh	r2, [r7, #24]
 800095e:	80da      	strh	r2, [r3, #6]
    _port_sw = port_sw;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	615a      	str	r2, [r3, #20]
    _pin_sw = pin_sw;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	8c3a      	ldrh	r2, [r7, #32]
 800096a:	811a      	strh	r2, [r3, #8]
    _counter = 0;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <_ZN13RotaryEncoder4InitEv>:

int RotaryEncoder::Init(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]

    /* Initialize Input A */
    GPIO_InitStruct.Pin = _pin_a;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	889b      	ldrh	r3, [r3, #4]
 8000998:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099e:	2301      	movs	r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port_a, &GPIO_InitStruct);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	f107 0208 	add.w	r2, r7, #8
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fc13 	bl	80011d8 <HAL_GPIO_Init>

    /* Initialize Input B */
    GPIO_InitStruct.Pin = _pin_b;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	88db      	ldrh	r3, [r3, #6]
 80009b6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port_b, &GPIO_InitStruct);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	f107 0208 	add.w	r2, r7, #8
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fc04 	bl	80011d8 <HAL_GPIO_Init>

    /* Initialize Switch */
    GPIO_InitStruct.Pin = _pin_sw;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	891b      	ldrh	r3, [r3, #8]
 80009d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	2301      	movs	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port_sw, &GPIO_InitStruct);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f107 0208 	add.w	r2, r7, #8
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 fbf5 	bl	80011d8 <HAL_GPIO_Init>

	_a_last_state = HAL_GPIO_ReadPin(_port_a, _pin_a);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	889b      	ldrh	r3, [r3, #4]
 80009f6:	4619      	mov	r1, r3
 80009f8:	4610      	mov	r0, r2
 80009fa:	f000 fd71 	bl	80014e0 <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	70da      	strb	r2, [r3, #3]
    return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <_ZN13RotaryEncoder4ReadEv>:

int RotaryEncoder::Read(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    _sw_state = HAL_GPIO_ReadPin(_port_sw, _pin_sw);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	891b      	ldrh	r3, [r3, #8]
 8000a20:	4619      	mov	r1, r3
 8000a22:	4610      	mov	r0, r2
 8000a24:	f000 fd5c 	bl	80014e0 <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	705a      	strb	r2, [r3, #1]
    _a_state = HAL_GPIO_ReadPin(_port_a, _pin_a); // Change to a
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	889b      	ldrh	r3, [r3, #4]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	f000 fd50 	bl	80014e0 <HAL_GPIO_ReadPin>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	709a      	strb	r2, [r3, #2]

    if(_a_state != _a_last_state)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	789a      	ldrb	r2, [r3, #2]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	78db      	ldrb	r3, [r3, #3]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d023      	beq.n	8000a9c <_ZN13RotaryEncoder4ReadEv+0x8c>
    {
        if(HAL_GPIO_ReadPin(_port_b, _pin_b) != _a_state)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	691a      	ldr	r2, [r3, #16]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	88db      	ldrh	r3, [r3, #6]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4610      	mov	r0, r2
 8000a60:	f000 fd3e 	bl	80014e0 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <_ZN13RotaryEncoder4ReadEv+0x78>
        {
            _counter++;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e005      	b.n	8000a94 <_ZN13RotaryEncoder4ReadEv+0x84>
        }
        else
        {
            _counter--;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	701a      	strb	r2, [r3, #0]
        }
        _a_last_state = _a_state;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	789a      	ldrb	r2, [r3, #2]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	70da      	strb	r2, [r3, #3]
    }

    return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZN13RotaryEncoder8GetCountEv>:

uint8_t RotaryEncoder::GetCount(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
    return _counter;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <_ZN13RotaryEncoder14GetSwitchStateEv>:

uint8_t RotaryEncoder::GetSwitchState(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    return _sw_state;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	785b      	ldrb	r3, [r3, #1]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x28>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 fb35 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f000 f808 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fd3c 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40022000 	.word	0x40022000

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x54>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x58>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fb4d 	bl	80011be <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b3c:	f000 fb15 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x5c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000004 	.word	0x20000004

08000b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_IncTick+0x1c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_IncTick+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a03      	ldr	r2, [pc, #12]	; (8000b80 <HAL_IncTick+0x20>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200002d8 	.word	0x200002d8

08000b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <HAL_GetTick+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	200002d8 	.word	0x200002d8

08000b98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0be      	b.n	8000d38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fcfa 	bl	80005d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f9ab 	bl	8000f38 <ADC_ConversionStop_Disable>
 8000be2:	4603      	mov	r3, r0
 8000be4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8099 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8095 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c04:	f023 0302 	bic.w	r3, r3, #2
 8000c08:	f043 0202 	orr.w	r2, r3, #2
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7b1b      	ldrb	r3, [r3, #12]
 8000c1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c30:	d003      	beq.n	8000c3a <HAL_ADC_Init+0xa2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d102      	bne.n	8000c40 <HAL_ADC_Init+0xa8>
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	e000      	b.n	8000c42 <HAL_ADC_Init+0xaa>
 8000c40:	2300      	movs	r3, #0
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7d1b      	ldrb	r3, [r3, #20]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d119      	bne.n	8000c84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7b1b      	ldrb	r3, [r3, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	035a      	lsls	r2, r3, #13
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	e00b      	b.n	8000c84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	f043 0220 	orr.w	r2, r3, #32
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7c:	f043 0201 	orr.w	r2, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_ADC_Init+0x1a8>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cb4:	d003      	beq.n	8000cbe <HAL_ADC_Init+0x126>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d104      	bne.n	8000cc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_ADC_Init+0x1ac>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d10b      	bne.n	8000d04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d02:	e018      	b.n	8000d36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f023 0312 	bic.w	r3, r3, #18
 8000d0c:	f043 0210 	orr.w	r2, r3, #16
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	f043 0201 	orr.w	r2, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d24:	e007      	b.n	8000d36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f043 0210 	orr.w	r2, r3, #16
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	ffe1f7fd 	.word	0xffe1f7fd
 8000d44:	ff1f0efe 	.word	0xff1f0efe

08000d48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d101      	bne.n	8000d68 <HAL_ADC_ConfigChannel+0x20>
 8000d64:	2302      	movs	r3, #2
 8000d66:	e0dc      	b.n	8000f22 <HAL_ADC_ConfigChannel+0x1da>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b06      	cmp	r3, #6
 8000d76:	d81c      	bhi.n	8000db2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	3b05      	subs	r3, #5
 8000d8a:	221f      	movs	r2, #31
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4019      	ands	r1, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4413      	add	r3, r2
 8000da2:	3b05      	subs	r3, #5
 8000da4:	fa00 f203 	lsl.w	r2, r0, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	635a      	str	r2, [r3, #52]	; 0x34
 8000db0:	e03c      	b.n	8000e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b0c      	cmp	r3, #12
 8000db8:	d81c      	bhi.n	8000df4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	3b23      	subs	r3, #35	; 0x23
 8000dcc:	221f      	movs	r2, #31
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4019      	ands	r1, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	3b23      	subs	r3, #35	; 0x23
 8000de6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	631a      	str	r2, [r3, #48]	; 0x30
 8000df2:	e01b      	b.n	8000e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4413      	add	r3, r2
 8000e04:	3b41      	subs	r3, #65	; 0x41
 8000e06:	221f      	movs	r2, #31
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4019      	ands	r1, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3b41      	subs	r3, #65	; 0x41
 8000e20:	fa00 f203 	lsl.w	r2, r0, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b09      	cmp	r3, #9
 8000e32:	d91c      	bls.n	8000e6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68d9      	ldr	r1, [r3, #12]
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	3b1e      	subs	r3, #30
 8000e46:	2207      	movs	r2, #7
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4019      	ands	r1, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	6898      	ldr	r0, [r3, #8]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3b1e      	subs	r3, #30
 8000e60:	fa00 f203 	lsl.w	r2, r0, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	e019      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6919      	ldr	r1, [r3, #16]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4413      	add	r3, r2
 8000e7e:	2207      	movs	r2, #7
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4019      	ands	r1, r3
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	6898      	ldr	r0, [r3, #8]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	fa00 f203 	lsl.w	r2, r0, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b10      	cmp	r3, #16
 8000ea8:	d003      	beq.n	8000eb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eae:	2b11      	cmp	r3, #17
 8000eb0:	d132      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_ADC_ConfigChannel+0x1e4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d125      	bne.n	8000f08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d126      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ed8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b10      	cmp	r3, #16
 8000ee0:	d11a      	bne.n	8000f18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	0c9a      	lsrs	r2, r3, #18
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef8:	e002      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f9      	bne.n	8000efa <HAL_ADC_ConfigChannel+0x1b2>
 8000f06:	e007      	b.n	8000f18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	f043 0220 	orr.w	r2, r3, #32
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40012400 	.word	0x40012400
 8000f30:	20000000 	.word	0x20000000
 8000f34:	431bde83 	.word	0x431bde83

08000f38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d12e      	bne.n	8000fb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f62:	f7ff fe0f 	bl	8000b84 <HAL_GetTick>
 8000f66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f68:	e01b      	b.n	8000fa2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f6a:	f7ff fe0b 	bl	8000b84 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d914      	bls.n	8000fa2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d10d      	bne.n	8000fa2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8a:	f043 0210 	orr.w	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e007      	b.n	8000fb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d0dc      	beq.n	8000f6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b08b      	sub	sp, #44	; 0x2c
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e169      	b.n	80014c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ec:	2201      	movs	r2, #1
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	429a      	cmp	r2, r3
 8001206:	f040 8158 	bne.w	80014ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4a9a      	ldr	r2, [pc, #616]	; (8001478 <HAL_GPIO_Init+0x2a0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d05e      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001214:	4a98      	ldr	r2, [pc, #608]	; (8001478 <HAL_GPIO_Init+0x2a0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d875      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800121a:	4a98      	ldr	r2, [pc, #608]	; (800147c <HAL_GPIO_Init+0x2a4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d058      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001220:	4a96      	ldr	r2, [pc, #600]	; (800147c <HAL_GPIO_Init+0x2a4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d86f      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001226:	4a96      	ldr	r2, [pc, #600]	; (8001480 <HAL_GPIO_Init+0x2a8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d052      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 800122c:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_GPIO_Init+0x2a8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d869      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001232:	4a94      	ldr	r2, [pc, #592]	; (8001484 <HAL_GPIO_Init+0x2ac>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d04c      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001238:	4a92      	ldr	r2, [pc, #584]	; (8001484 <HAL_GPIO_Init+0x2ac>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d863      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800123e:	4a92      	ldr	r2, [pc, #584]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d046      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
 8001244:	4a90      	ldr	r2, [pc, #576]	; (8001488 <HAL_GPIO_Init+0x2b0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d85d      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 800124a:	2b12      	cmp	r3, #18
 800124c:	d82a      	bhi.n	80012a4 <HAL_GPIO_Init+0xcc>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d859      	bhi.n	8001306 <HAL_GPIO_Init+0x12e>
 8001252:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <HAL_GPIO_Init+0x80>)
 8001254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001258:	080012d3 	.word	0x080012d3
 800125c:	080012ad 	.word	0x080012ad
 8001260:	080012bf 	.word	0x080012bf
 8001264:	08001301 	.word	0x08001301
 8001268:	08001307 	.word	0x08001307
 800126c:	08001307 	.word	0x08001307
 8001270:	08001307 	.word	0x08001307
 8001274:	08001307 	.word	0x08001307
 8001278:	08001307 	.word	0x08001307
 800127c:	08001307 	.word	0x08001307
 8001280:	08001307 	.word	0x08001307
 8001284:	08001307 	.word	0x08001307
 8001288:	08001307 	.word	0x08001307
 800128c:	08001307 	.word	0x08001307
 8001290:	08001307 	.word	0x08001307
 8001294:	08001307 	.word	0x08001307
 8001298:	08001307 	.word	0x08001307
 800129c:	080012b5 	.word	0x080012b5
 80012a0:	080012c9 	.word	0x080012c9
 80012a4:	4a79      	ldr	r2, [pc, #484]	; (800148c <HAL_GPIO_Init+0x2b4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012aa:	e02c      	b.n	8001306 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e029      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	3304      	adds	r3, #4
 80012ba:	623b      	str	r3, [r7, #32]
          break;
 80012bc:	e024      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	3308      	adds	r3, #8
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e01f      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	330c      	adds	r3, #12
 80012ce:	623b      	str	r3, [r7, #32]
          break;
 80012d0:	e01a      	b.n	8001308 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012da:	2304      	movs	r3, #4
 80012dc:	623b      	str	r3, [r7, #32]
          break;
 80012de:	e013      	b.n	8001308 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	2308      	movs	r3, #8
 80012ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	611a      	str	r2, [r3, #16]
          break;
 80012f2:	e009      	b.n	8001308 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f4:	2308      	movs	r3, #8
 80012f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69fa      	ldr	r2, [r7, #28]
 80012fc:	615a      	str	r2, [r3, #20]
          break;
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
          break;
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x130>
          break;
 8001306:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2bff      	cmp	r3, #255	; 0xff
 800130c:	d801      	bhi.n	8001312 <HAL_GPIO_Init+0x13a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_Init+0x13e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3304      	adds	r3, #4
 8001316:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d802      	bhi.n	8001324 <HAL_GPIO_Init+0x14c>
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x152>
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	3b08      	subs	r3, #8
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	210f      	movs	r1, #15
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	401a      	ands	r2, r3
 800133c:	6a39      	ldr	r1, [r7, #32]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80b1 	beq.w	80014ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001358:	4b4d      	ldr	r3, [pc, #308]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b4a      	ldr	r3, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x2b8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001370:	4a48      	ldr	r2, [pc, #288]	; (8001494 <HAL_GPIO_Init+0x2bc>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <HAL_GPIO_Init+0x2c0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_GPIO_Init+0x1ec>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a3f      	ldr	r2, [pc, #252]	; (800149c <HAL_GPIO_Init+0x2c4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d00d      	beq.n	80013c0 <HAL_GPIO_Init+0x1e8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a3e      	ldr	r2, [pc, #248]	; (80014a0 <HAL_GPIO_Init+0x2c8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d007      	beq.n	80013bc <HAL_GPIO_Init+0x1e4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a3d      	ldr	r2, [pc, #244]	; (80014a4 <HAL_GPIO_Init+0x2cc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d101      	bne.n	80013b8 <HAL_GPIO_Init+0x1e0>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013b8:	2304      	movs	r3, #4
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x1ee>
 80013c4:	2300      	movs	r3, #0
 80013c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d6:	492f      	ldr	r1, [pc, #188]	; (8001494 <HAL_GPIO_Init+0x2bc>)
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	492c      	ldr	r1, [pc, #176]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013fe:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4928      	ldr	r1, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4922      	ldr	r1, [pc, #136]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	491e      	ldr	r1, [pc, #120]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4914      	ldr	r1, [pc, #80]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d021      	beq.n	80014ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	490e      	ldr	r1, [pc, #56]	; (80014a8 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
 8001474:	e021      	b.n	80014ba <HAL_GPIO_Init+0x2e2>
 8001476:	bf00      	nop
 8001478:	10320000 	.word	0x10320000
 800147c:	10310000 	.word	0x10310000
 8001480:	10220000 	.word	0x10220000
 8001484:	10210000 	.word	0x10210000
 8001488:	10120000 	.word	0x10120000
 800148c:	10110000 	.word	0x10110000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_GPIO_Init+0x304>)
 80014ae:	68da      	ldr	r2, [r3, #12]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4909      	ldr	r1, [pc, #36]	; (80014dc <HAL_GPIO_Init+0x304>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f47f ae8e 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	372c      	adds	r7, #44	; 0x2c
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e001      	b.n	8001502 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001502:	7bfb      	ldrb	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e12b      	b.n	800177a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff f886 	bl	8000648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0201 	bic.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001574:	f002 f990 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8001578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a81      	ldr	r2, [pc, #516]	; (8001784 <HAL_I2C_Init+0x274>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d807      	bhi.n	8001594 <HAL_I2C_Init+0x84>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4a80      	ldr	r2, [pc, #512]	; (8001788 <HAL_I2C_Init+0x278>)
 8001588:	4293      	cmp	r3, r2
 800158a:	bf94      	ite	ls
 800158c:	2301      	movls	r3, #1
 800158e:	2300      	movhi	r3, #0
 8001590:	b2db      	uxtb	r3, r3
 8001592:	e006      	b.n	80015a2 <HAL_I2C_Init+0x92>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a7d      	ldr	r2, [pc, #500]	; (800178c <HAL_I2C_Init+0x27c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	bf94      	ite	ls
 800159c:	2301      	movls	r3, #1
 800159e:	2300      	movhi	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e7      	b.n	800177a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4a78      	ldr	r2, [pc, #480]	; (8001790 <HAL_I2C_Init+0x280>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <HAL_I2C_Init+0x274>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d802      	bhi.n	80015e4 <HAL_I2C_Init+0xd4>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3301      	adds	r3, #1
 80015e2:	e009      	b.n	80015f8 <HAL_I2C_Init+0xe8>
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_I2C_Init+0x284>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	099b      	lsrs	r3, r3, #6
 80015f6:	3301      	adds	r3, #1
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800160a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	495c      	ldr	r1, [pc, #368]	; (8001784 <HAL_I2C_Init+0x274>)
 8001614:	428b      	cmp	r3, r1
 8001616:	d819      	bhi.n	800164c <HAL_I2C_Init+0x13c>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e59      	subs	r1, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	fbb1 f3f3 	udiv	r3, r1, r3
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800162c:	400b      	ands	r3, r1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00a      	beq.n	8001648 <HAL_I2C_Init+0x138>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e59      	subs	r1, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001640:	3301      	adds	r3, #1
 8001642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001646:	e051      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 8001648:	2304      	movs	r3, #4
 800164a:	e04f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d111      	bne.n	8001678 <HAL_I2C_Init+0x168>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e58      	subs	r0, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	440b      	add	r3, r1
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	e012      	b.n	800169e <HAL_I2C_Init+0x18e>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	0099      	lsls	r1, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_I2C_Init+0x196>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e022      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10e      	bne.n	80016cc <HAL_I2C_Init+0x1bc>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1e58      	subs	r0, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	440b      	add	r3, r1
 80016bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c0:	3301      	adds	r3, #1
 80016c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ca:	e00f      	b.n	80016ec <HAL_I2C_Init+0x1dc>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1e58      	subs	r0, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	0099      	lsls	r1, r3, #2
 80016dc:	440b      	add	r3, r1
 80016de:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e2:	3301      	adds	r3, #1
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6809      	ldr	r1, [r1, #0]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800171a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6911      	ldr	r1, [r2, #16]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68d2      	ldr	r2, [r2, #12]
 8001726:	4311      	orrs	r1, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	430b      	orrs	r3, r1
 800172e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	000186a0 	.word	0x000186a0
 8001788:	001e847f 	.word	0x001e847f
 800178c:	003d08ff 	.word	0x003d08ff
 8001790:	431bde83 	.word	0x431bde83
 8001794:	10624dd3 	.word	0x10624dd3

08001798 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af06      	add	r7, sp, #24
 800179e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0fd      	b.n	80019a6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f006 fc32 	bl	8008028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2203      	movs	r2, #3
 80017c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fb3b 	bl	8003e4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	687e      	ldr	r6, [r7, #4]
 80017de:	466d      	mov	r5, sp
 80017e0:	f106 0410 	add.w	r4, r6, #16
 80017e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	602b      	str	r3, [r5, #0]
 80017ec:	1d33      	adds	r3, r6, #4
 80017ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017f0:	6838      	ldr	r0, [r7, #0]
 80017f2:	f002 fb05 	bl	8003e00 <USB_CoreInit>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0ce      	b.n	80019a6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fb36 	bl	8003e80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e04c      	b.n	80018b4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	3301      	adds	r3, #1
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	440b      	add	r3, r1
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	b298      	uxth	r0, r3
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	440b      	add	r3, r1
 8001856:	3336      	adds	r3, #54	; 0x36
 8001858:	4602      	mov	r2, r0
 800185a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	4613      	mov	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3303      	adds	r3, #3
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	3338      	adds	r3, #56	; 0x38
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	333c      	adds	r3, #60	; 0x3c
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800189a:	7bfa      	ldrb	r2, [r7, #15]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	3340      	adds	r3, #64	; 0x40
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	3301      	adds	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3ad      	bcc.n	800181a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e044      	b.n	800194e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	3301      	adds	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	7bfa      	ldrb	r2, [r7, #15]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d3b5      	bcc.n	80018c4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	687e      	ldr	r6, [r7, #4]
 8001960:	466d      	mov	r5, sp
 8001962:	f106 0410 	add.w	r4, r6, #16
 8001966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	602b      	str	r3, [r5, #0]
 800196e:	1d33      	adds	r3, r6, #4
 8001970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001972:	6838      	ldr	r0, [r7, #0]
 8001974:	f002 fa90 	bl	8003e98 <USB_DevInit>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2202      	movs	r2, #2
 8001982:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e00d      	b.n	80019a6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 ff42 	bl	8006828 <USB_DevDisconnect>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_PCD_Start+0x16>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e016      	b.n	80019f2 <HAL_PCD_Start+0x44>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fa25 	bl	8003e20 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80019d6:	2101      	movs	r1, #1
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f006 fd74 	bl	80084c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f004 ff16 	bl	8006814 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b088      	sub	sp, #32
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 ff18 	bl	800683c <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a16:	d102      	bne.n	8001a1e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fb48 	bl	80020ae <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 ff0a 	bl	800683c <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d112      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f006 fb66 	bl	800811e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a52:	2100      	movs	r1, #0
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f923 	bl	8001ca0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 feec 	bl	800683c <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6e:	d10b      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a82:	b292      	uxth	r2, r2
 8001a84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fed5 	bl	800683c <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a9c:	d10b      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ab0:	b292      	uxth	r2, r2
 8001ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 febe 	bl	800683c <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aca:	d126      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0204 	bic.w	r2, r2, #4
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0208 	bic.w	r2, r2, #8
 8001af6:	b292      	uxth	r2, r2
 8001af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f006 fb47 	bl	8008190 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b14:	b292      	uxth	r2, r2
 8001b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 fe8c 	bl	800683c <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2e:	f040 8082 	bne.w	8001c36 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	77fb      	strb	r3, [r7, #31]
 8001b36:	e010      	b.n	8001b5a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	441a      	add	r2, r3
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	b292      	uxth	r2, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	3320      	adds	r3, #32
 8001b4e:	443b      	add	r3, r7
 8001b50:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001b54:	7ffb      	ldrb	r3, [r7, #31]
 8001b56:	3301      	adds	r3, #1
 8001b58:	77fb      	strb	r3, [r7, #31]
 8001b5a:	7ffb      	ldrb	r3, [r7, #31]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	d9eb      	bls.n	8001b38 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	b292      	uxth	r2, r2
 8001b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b90:	bf00      	nop
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f6      	beq.n	8001b92 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	77fb      	strb	r3, [r7, #31]
 8001bc0:	e00f      	b.n	8001be2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	7ffa      	ldrb	r2, [r7, #31]
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	440a      	add	r2, r1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	3320      	adds	r3, #32
 8001bd4:	443b      	add	r3, r7
 8001bd6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001bda:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bdc:	7ffb      	ldrb	r3, [r7, #31]
 8001bde:	3301      	adds	r3, #1
 8001be0:	77fb      	strb	r3, [r7, #31]
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	2b07      	cmp	r3, #7
 8001be6:	d9ec      	bls.n	8001bc2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0208 	orr.w	r2, r2, #8
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0204 	orr.w	r2, r2, #4
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f006 fa93 	bl	800815c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fdfe 	bl	800683c <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c4a:	d10e      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f006 fa4c 	bl	8008102 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 fde4 	bl	800683c <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7e:	d10b      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c92:	b292      	uxth	r2, r2
 8001c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_PCD_SetAddress+0x1a>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e013      	b.n	8001ce2 <HAL_PCD_SetAddress+0x42>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	78fa      	ldrb	r2, [r7, #3]
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fd8b 	bl	80067ee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	4608      	mov	r0, r1
 8001cf4:	4611      	mov	r1, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	70fb      	strb	r3, [r7, #3]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	803b      	strh	r3, [r7, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	da0e      	bge.n	8001d2e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	705a      	strb	r2, [r3, #1]
 8001d2c:	e00e      	b.n	8001d4c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	f003 0207 	and.w	r2, r3, #7
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d58:	883a      	ldrh	r2, [r7, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	78ba      	ldrb	r2, [r7, #2]
 8001d62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d76:	78bb      	ldrb	r3, [r7, #2]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d102      	bne.n	8001d82 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_PCD_EP_Open+0xa6>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e00e      	b.n	8001dae <HAL_PCD_EP_Open+0xc4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68f9      	ldr	r1, [r7, #12]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 f89a 	bl	8003ed8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001dac:	7afb      	ldrb	r3, [r7, #11]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da0e      	bge.n	8001de8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	705a      	strb	r2, [r3, #1]
 8001de6:	e00e      	b.n	8001e06 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	f003 0207 	and.w	r2, r3, #7
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_EP_Close+0x6a>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_Close+0x88>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f002 fbbc 	bl	80045ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	460b      	mov	r3, r1
 8001e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	f003 0207 	and.w	r2, r3, #7
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2200      	movs	r2, #0
 8001e84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 fd6e 	bl	8004984 <USB_EPStartXfer>
 8001ea8:	e005      	b.n	8001eb6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6979      	ldr	r1, [r7, #20]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fd67 	bl	8004984 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6979      	ldr	r1, [r7, #20]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fd2b 	bl	8004984 <USB_EPStartXfer>
 8001f2e:	e005      	b.n	8001f3c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6979      	ldr	r1, [r7, #20]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f002 fd24 	bl	8004984 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	f003 0207 	and.w	r2, r3, #7
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d901      	bls.n	8001f64 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e04c      	b.n	8001ffe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da0e      	bge.n	8001f8a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
 8001f88:	e00c      	b.n	8001fa4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_PCD_EP_SetStall+0x7e>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e01c      	b.n	8001ffe <HAL_PCD_EP_SetStall+0xb8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f004 fb0e 	bl	80065f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d108      	bne.n	8001ff4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f004 fc33 	bl	800685a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	f003 020f 	and.w	r2, r3, #15
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d901      	bls.n	8002024 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e040      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0e      	bge.n	800204a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	705a      	strb	r2, [r3, #1]
 8002048:	e00e      	b.n	8002068 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	f003 0207 	and.w	r2, r3, #7
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	b2da      	uxtb	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_PCD_EP_ClrStall+0x82>
 8002084:	2302      	movs	r3, #2
 8002086:	e00e      	b.n	80020a6 <HAL_PCD_EP_ClrStall+0xa0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fafc 	bl	8006694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b08e      	sub	sp, #56	; 0x38
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020b6:	e2ec      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80020c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80020ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f040 8161 	bne.w	800239a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80020d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d152      	bne.n	8002188 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f2:	81fb      	strh	r3, [r7, #14]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	89fb      	ldrh	r3, [r7, #14]
 80020fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002102:	b29b      	uxth	r3, r3
 8002104:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3328      	adds	r3, #40	; 0x28
 800210a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	3302      	adds	r3, #2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	695a      	ldr	r2, [r3, #20]
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	441a      	add	r2, r3
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002146:	2100      	movs	r1, #0
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f005 ffc0 	bl	80080ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 829b 	beq.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 8296 	bne.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002172:	b2da      	uxtb	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b292      	uxth	r2, r2
 800217a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002186:	e284      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002198:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800219a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d034      	beq.n	800220c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	3306      	adds	r3, #6
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f004 fb8a 	bl	80068fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021f2:	4013      	ands	r3, r2
 80021f4:	823b      	strh	r3, [r7, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	8a3a      	ldrh	r2, [r7, #16]
 80021fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002200:	b292      	uxth	r2, r2
 8002202:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f005 ff35 	bl	8008074 <HAL_PCD_SetupStageCallback>
 800220a:	e242      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800220c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002210:	2b00      	cmp	r3, #0
 8002212:	f280 823e 	bge.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	b29a      	uxth	r2, r3
 800221e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002222:	4013      	ands	r3, r2
 8002224:	83bb      	strh	r3, [r7, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	8bba      	ldrh	r2, [r7, #28]
 800222c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002230:	b292      	uxth	r2, r2
 8002232:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800223c:	b29b      	uxth	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4413      	add	r3, r2
 8002248:	3306      	adds	r3, #6
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d019      	beq.n	800229c <PCD_EP_ISR_Handler+0x1ee>
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	6959      	ldr	r1, [r3, #20]
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002280:	b29b      	uxth	r3, r3
 8002282:	f004 fb3a 	bl	80068fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	441a      	add	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002294:	2100      	movs	r1, #0
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f005 fefe 	bl	8008098 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f040 81f2 	bne.w	8002692 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	4413      	add	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d112      	bne.n	80022fc <PCD_EP_ISR_Handler+0x24e>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	801a      	strh	r2, [r3, #0]
 80022fa:	e02f      	b.n	800235c <PCD_EP_ISR_Handler+0x2ae>
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b3e      	cmp	r3, #62	; 0x3e
 8002302:	d813      	bhi.n	800232c <PCD_EP_ISR_Handler+0x27e>
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <PCD_EP_ISR_Handler+0x270>
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	3301      	adds	r3, #1
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	b29b      	uxth	r3, r3
 8002322:	029b      	lsls	r3, r3, #10
 8002324:	b29a      	uxth	r2, r3
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	e017      	b.n	800235c <PCD_EP_ISR_Handler+0x2ae>
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <PCD_EP_ISR_Handler+0x298>
 8002340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002342:	3b01      	subs	r3, #1
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	b29b      	uxth	r3, r3
 800234a:	029b      	lsls	r3, r3, #10
 800234c:	b29b      	uxth	r3, r3
 800234e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002356:	b29a      	uxth	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236c:	827b      	strh	r3, [r7, #18]
 800236e:	8a7b      	ldrh	r3, [r7, #18]
 8002370:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002374:	827b      	strh	r3, [r7, #18]
 8002376:	8a7b      	ldrh	r3, [r7, #18]
 8002378:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800237c:	827b      	strh	r3, [r7, #18]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	8a7b      	ldrh	r3, [r7, #18]
 8002384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002394:	b29b      	uxth	r3, r3
 8002396:	8013      	strh	r3, [r2, #0]
 8002398:	e17b      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023ac:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f280 80ea 	bge.w	800258a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023cc:	4013      	ands	r3, r2
 80023ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e4:	b292      	uxth	r2, r2
 80023e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80023e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	7b1b      	ldrb	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d122      	bne.n	800244c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240e:	b29b      	uxth	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	3306      	adds	r3, #6
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800242e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8087 	beq.w	8002546 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	6959      	ldr	r1, [r3, #20]
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	88da      	ldrh	r2, [r3, #6]
 8002444:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002446:	f004 fa58 	bl	80068fa <USB_ReadPMA>
 800244a:	e07c      	b.n	8002546 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	78db      	ldrb	r3, [r3, #3]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d108      	bne.n	8002466 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002454:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002456:	461a      	mov	r2, r3
 8002458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f927 	bl	80026ae <HAL_PCD_EP_DB_Receive>
 8002460:	4603      	mov	r3, r0
 8002462:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002464:	e06f      	b.n	8002546 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800247c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002480:	847b      	strh	r3, [r7, #34]	; 0x22
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	441a      	add	r2, r3
 8002490:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800249a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800249e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d021      	beq.n	8002504 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	3302      	adds	r3, #2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80024ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02a      	beq.n	8002546 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	6959      	ldr	r1, [r3, #20]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	891a      	ldrh	r2, [r3, #8]
 80024fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024fe:	f004 f9fc 	bl	80068fa <USB_ReadPMA>
 8002502:	e020      	b.n	8002546 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	3306      	adds	r3, #6
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800252e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	6959      	ldr	r1, [r3, #20]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	895a      	ldrh	r2, [r3, #10]
 8002540:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002542:	f004 f9da 	bl	80068fa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800254c:	441a      	add	r2, r3
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002558:	441a      	add	r2, r3
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <PCD_EP_ISR_Handler+0x4c2>
 8002566:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	429a      	cmp	r2, r3
 800256e:	d206      	bcs.n	800257e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f005 fd8e 	bl	8008098 <HAL_PCD_DataOutStageCallback>
 800257c:	e005      	b.n	800258a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002584:	4618      	mov	r0, r3
 8002586:	f002 f9fd 	bl	8004984 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800258a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d07e      	beq.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002594:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	843b      	strh	r3, [r7, #32]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	8c3b      	ldrh	r3, [r7, #32]
 80025d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	78db      	ldrb	r3, [r3, #3]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d00c      	beq.n	8002602 <PCD_EP_ISR_Handler+0x554>
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	78db      	ldrb	r3, [r3, #3]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d146      	bne.n	8002686 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80025f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d141      	bne.n	8002686 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	3302      	adds	r3, #2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	8bfb      	ldrh	r3, [r7, #30]
 8002632:	429a      	cmp	r2, r3
 8002634:	d906      	bls.n	8002644 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	8bfb      	ldrh	r3, [r7, #30]
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	619a      	str	r2, [r3, #24]
 8002642:	e002      	b.n	800264a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f005 fd38 	bl	80080ce <HAL_PCD_DataInStageCallback>
 800265e:	e018      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	8bfb      	ldrh	r3, [r7, #30]
 8002666:	441a      	add	r2, r3
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	8bfb      	ldrh	r3, [r7, #30]
 8002672:	441a      	add	r2, r3
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267e:	4618      	mov	r0, r3
 8002680:	f002 f980 	bl	8004984 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002684:	e005      	b.n	8002692 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002688:	461a      	mov	r2, r3
 800268a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f91b 	bl	80028c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800269a:	b29b      	uxth	r3, r3
 800269c:	b21b      	sxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f6ff ad0a 	blt.w	80020b8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b088      	sub	sp, #32
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	4613      	mov	r3, r2
 80026ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d07e      	beq.n	80027c4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	3302      	adds	r3, #2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	8b7b      	ldrh	r3, [r7, #26]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d306      	bcc.n	8002708 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	8b7b      	ldrh	r3, [r7, #26]
 8002700:	1ad2      	subs	r2, r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	619a      	str	r2, [r3, #24]
 8002706:	e002      	b.n	800270e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d123      	bne.n	800275e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800272c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002730:	833b      	strh	r3, [r7, #24]
 8002732:	8b3b      	ldrh	r3, [r7, #24]
 8002734:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002738:	833b      	strh	r3, [r7, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	441a      	add	r2, r3
 8002748:	8b3b      	ldrh	r3, [r7, #24]
 800274a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800274e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275a:	b29b      	uxth	r3, r3
 800275c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01f      	beq.n	80027a8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	82fb      	strh	r3, [r7, #22]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	441a      	add	r2, r3
 8002792:	8afb      	ldrh	r3, [r7, #22]
 8002794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800279c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027a8:	8b7b      	ldrh	r3, [r7, #26]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8087 	beq.w	80028be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6959      	ldr	r1, [r3, #20]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	891a      	ldrh	r2, [r3, #8]
 80027bc:	8b7b      	ldrh	r3, [r7, #26]
 80027be:	f004 f89c 	bl	80068fa <USB_ReadPMA>
 80027c2:	e07c      	b.n	80028be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	3306      	adds	r3, #6
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	8b7b      	ldrh	r3, [r7, #26]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d306      	bcc.n	8002806 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	8b7b      	ldrh	r3, [r7, #26]
 80027fe:	1ad2      	subs	r2, r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	619a      	str	r2, [r3, #24]
 8002804:	e002      	b.n	800280c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d123      	bne.n	800285c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	83fb      	strh	r3, [r7, #30]
 8002830:	8bfb      	ldrh	r3, [r7, #30]
 8002832:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002836:	83fb      	strh	r3, [r7, #30]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	441a      	add	r2, r3
 8002846:	8bfb      	ldrh	r3, [r7, #30]
 8002848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002858:	b29b      	uxth	r3, r3
 800285a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11f      	bne.n	80028a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	83bb      	strh	r3, [r7, #28]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	441a      	add	r2, r3
 8002890:	8bbb      	ldrh	r3, [r7, #28]
 8002892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800289a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800289e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028a6:	8b7b      	ldrh	r3, [r7, #26]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	6959      	ldr	r1, [r3, #20]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	895a      	ldrh	r2, [r3, #10]
 80028b8:	8b7b      	ldrh	r3, [r7, #26]
 80028ba:	f004 f81e 	bl	80068fa <USB_ReadPMA>
    }
  }

  return count;
 80028be:	8b7b      	ldrh	r3, [r7, #26]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0a2      	sub	sp, #136	; 0x88
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	4613      	mov	r3, r2
 80028d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 81c7 	beq.w	8002c70 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	3302      	adds	r3, #2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002916:	429a      	cmp	r2, r3
 8002918:	d907      	bls.n	800292a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002922:	1ad2      	subs	r2, r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	619a      	str	r2, [r3, #24]
 8002928:	e002      	b.n	8002930 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 80b9 	bne.w	8002aac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d126      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002950:	b29b      	uxth	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	4413      	add	r3, r2
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	011a      	lsls	r2, r3, #4
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	4413      	add	r3, r2
 8002964:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002974:	b29a      	uxth	r2, r3
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	b29b      	uxth	r3, r3
 8002980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002988:	b29a      	uxth	r2, r3
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	801a      	strh	r2, [r3, #0]
 800298e:	e01a      	b.n	80029c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d116      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	4413      	add	r3, r2
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	011a      	lsls	r2, r3, #4
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	4413      	add	r3, r2
 80029ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d126      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x15a>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	4413      	add	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	011a      	lsls	r2, r3, #4
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4413      	add	r3, r2
 80029f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	801a      	strh	r2, [r3, #0]
 8002a20:	e017      	b.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d113      	bne.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	4413      	add	r3, r2
 8002a3a:	623b      	str	r3, [r7, #32]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	011a      	lsls	r2, r3, #4
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	4413      	add	r3, r2
 8002a46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	4619      	mov	r1, r3
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f005 fb38 	bl	80080ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 82d4 	beq.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a84:	827b      	strh	r3, [r7, #18]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	441a      	add	r2, r3
 8002a94:	8a7b      	ldrh	r3, [r7, #18]
 8002a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	8013      	strh	r3, [r2, #0]
 8002aaa:	e2b2      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d021      	beq.n	8002afa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	441a      	add	r2, r3
 8002ae2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	f040 8286 	bne.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b0e:	441a      	add	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b1c:	441a      	add	r2, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d309      	bcc.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6a1a      	ldr	r2, [r3, #32]
 8002b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	621a      	str	r2, [r3, #32]
 8002b40:	e015      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002b4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b58:	e009      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	785b      	ldrb	r3, [r3, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d155      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	4413      	add	r3, r2
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	011a      	lsls	r2, r3, #4
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	4413      	add	r3, r2
 8002b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d112      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x302>
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	e047      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8002bce:	d811      	bhi.n	8002bf4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be2:	3301      	adds	r3, #1
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	029b      	lsls	r3, r3, #10
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	801a      	strh	r2, [r3, #0]
 8002bf2:	e032      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x342>
 8002c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c06:	3b01      	subs	r3, #1
 8002c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1e:	801a      	strh	r2, [r3, #0]
 8002c20:	e01b      	b.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	785b      	ldrb	r3, [r3, #1]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d117      	bne.n	8002c5a <HAL_PCD_EP_DB_Transmit+0x392>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3e:	4413      	add	r3, r2
 8002c40:	643b      	str	r3, [r7, #64]	; 0x40
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	011a      	lsls	r2, r3, #4
 8002c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	6959      	ldr	r1, [r3, #20]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	891a      	ldrh	r2, [r3, #8]
 8002c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	f003 fe01 	bl	8006870 <USB_WritePMA>
 8002c6e:	e1d0      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	3306      	adds	r3, #6
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d307      	bcc.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb0:	1ad2      	subs	r2, r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	619a      	str	r2, [r3, #24]
 8002cb6:	e002      	b.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 80c4 	bne.w	8002e50 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d126      	bne.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x456>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce4:	4413      	add	r3, r2
 8002ce6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	011a      	lsls	r2, r3, #4
 8002cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	e01a      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	785b      	ldrb	r3, [r3, #1]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d116      	bne.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	677b      	str	r3, [r7, #116]	; 0x74
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3a:	4413      	add	r3, r2
 8002d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	011a      	lsls	r2, r3, #4
 8002d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d46:	4413      	add	r3, r2
 8002d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d50:	2200      	movs	r2, #0
 8002d52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d12f      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	011a      	lsls	r2, r3, #4
 8002d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e017      	b.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d113      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd8:	4413      	add	r3, r2
 8002dda:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	011a      	lsls	r2, r3, #4
 8002de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dee:	2200      	movs	r2, #0
 8002df0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f005 f968 	bl	80080ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 8104 	bne.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
 8002e4e:	e0e0      	b.n	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d121      	bne.n	8002e9e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80b4 	bne.w	8003012 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ec0:	441a      	add	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d309      	bcc.n	8002ee6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6a1a      	ldr	r2, [r3, #32]
 8002edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ede:	1ad2      	subs	r2, r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	621a      	str	r2, [r3, #32]
 8002ee4:	e015      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d107      	bne.n	8002efe <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002eee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ef2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002efc:	e009      	b.n	8002f12 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	667b      	str	r3, [r7, #100]	; 0x64
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d155      	bne.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x704>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f34:	4413      	add	r3, r2
 8002f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	011a      	lsls	r2, r3, #4
 8002f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f40:	4413      	add	r3, r2
 8002f42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d112      	bne.n	8002f74 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f5c:	801a      	strh	r2, [r3, #0]
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f70:	801a      	strh	r2, [r3, #0]
 8002f72:	e044      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f76:	2b3e      	cmp	r3, #62	; 0x3e
 8002f78:	d811      	bhi.n	8002f9e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	029b      	lsls	r3, r3, #10
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	e02f      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	029b      	lsls	r3, r3, #10
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e018      	b.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d114      	bne.n	8002ffe <HAL_PCD_EP_DB_Transmit+0x736>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe2:	4413      	add	r3, r2
 8002fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	011a      	lsls	r2, r3, #4
 8002fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fee:	4413      	add	r3, r2
 8002ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	6959      	ldr	r1, [r3, #20]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	895a      	ldrh	r2, [r3, #10]
 800300a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300c:	b29b      	uxth	r3, r3
 800300e:	f003 fc2f 	bl	8006870 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29b      	uxth	r3, r3
 8003024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800302c:	823b      	strh	r3, [r7, #16]
 800302e:	8a3b      	ldrh	r3, [r7, #16]
 8003030:	f083 0310 	eor.w	r3, r3, #16
 8003034:	823b      	strh	r3, [r7, #16]
 8003036:	8a3b      	ldrh	r3, [r7, #16]
 8003038:	f083 0320 	eor.w	r3, r3, #32
 800303c:	823b      	strh	r3, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	441a      	add	r2, r3
 800304c:	8a3b      	ldrh	r3, [r7, #16]
 800304e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800305e:	b29b      	uxth	r3, r3
 8003060:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3788      	adds	r7, #136	; 0x88
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	607b      	str	r3, [r7, #4]
 8003076:	460b      	mov	r3, r1
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	4613      	mov	r3, r2
 800307c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	e009      	b.n	80030b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030a2:	897a      	ldrh	r2, [r7, #10]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	80da      	strh	r2, [r3, #6]
 80030ca:	e00b      	b.n	80030e4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2201      	movs	r2, #1
 80030d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	b29a      	uxth	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e272      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8087 	beq.w	800321e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003110:	4b92      	ldr	r3, [pc, #584]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b04      	cmp	r3, #4
 800311a:	d00c      	beq.n	8003136 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800311c:	4b8f      	ldr	r3, [pc, #572]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b08      	cmp	r3, #8
 8003126:	d112      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
 8003128:	4b8c      	ldr	r3, [pc, #560]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003134:	d10b      	bne.n	800314e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003136:	4b89      	ldr	r3, [pc, #548]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d06c      	beq.n	800321c <HAL_RCC_OscConfig+0x12c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d168      	bne.n	800321c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e24c      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x76>
 8003158:	4b80      	ldr	r3, [pc, #512]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a7f      	ldr	r2, [pc, #508]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800315e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	e02e      	b.n	80031c4 <HAL_RCC_OscConfig+0xd4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x98>
 800316e:	4b7b      	ldr	r3, [pc, #492]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7a      	ldr	r2, [pc, #488]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b78      	ldr	r3, [pc, #480]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a77      	ldr	r2, [pc, #476]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e01d      	b.n	80031c4 <HAL_RCC_OscConfig+0xd4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0xbc>
 8003192:	4b72      	ldr	r3, [pc, #456]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a71      	ldr	r2, [pc, #452]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a6e      	ldr	r2, [pc, #440]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0xd4>
 80031ac:	4b6b      	ldr	r3, [pc, #428]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a6a      	ldr	r2, [pc, #424]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b68      	ldr	r3, [pc, #416]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a67      	ldr	r2, [pc, #412]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031cc:	f7fd fcda 	bl	8000b84 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d4:	f7fd fcd6 	bl	8000b84 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b64      	cmp	r3, #100	; 0x64
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e200      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b5d      	ldr	r3, [pc, #372]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0xe4>
 80031f2:	e014      	b.n	800321e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fd fcc6 	bl	8000b84 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031fc:	f7fd fcc2 	bl	8000b84 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b64      	cmp	r3, #100	; 0x64
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1ec      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800320e:	4b53      	ldr	r3, [pc, #332]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x10c>
 800321a:	e000      	b.n	800321e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800321c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d063      	beq.n	80032f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800322a:	4b4c      	ldr	r3, [pc, #304]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 030c 	and.w	r3, r3, #12
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003236:	4b49      	ldr	r3, [pc, #292]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b08      	cmp	r3, #8
 8003240:	d11c      	bne.n	800327c <HAL_RCC_OscConfig+0x18c>
 8003242:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324e:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_RCC_OscConfig+0x176>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d001      	beq.n	8003266 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e1c0      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003266:	4b3d      	ldr	r3, [pc, #244]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4939      	ldr	r1, [pc, #228]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	e03a      	b.n	80032f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d020      	beq.n	80032c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003284:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fd fc7b 	bl	8000b84 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003292:	f7fd fc77 	bl	8000b84 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e1a1      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a4:	4b2d      	ldr	r3, [pc, #180]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b2a      	ldr	r3, [pc, #168]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4927      	ldr	r1, [pc, #156]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e015      	b.n	80032f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032c6:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_RCC_OscConfig+0x270>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fd fc5a 	bl	8000b84 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d4:	f7fd fc56 	bl	8000b84 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e180      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d03a      	beq.n	8003374 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d019      	beq.n	800333a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	4b17      	ldr	r3, [pc, #92]	; (8003364 <HAL_RCC_OscConfig+0x274>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330c:	f7fd fc3a 	bl	8000b84 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003314:	f7fd fc36 	bl	8000b84 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e160      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_RCC_OscConfig+0x26c>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003332:	2001      	movs	r0, #1
 8003334:	f000 fad8 	bl	80038e8 <RCC_Delay>
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_RCC_OscConfig+0x274>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003340:	f7fd fc20 	bl	8000b84 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003346:	e00f      	b.n	8003368 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003348:	f7fd fc1c 	bl	8000b84 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d908      	bls.n	8003368 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e146      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
 800335a:	bf00      	nop
 800335c:	40021000 	.word	0x40021000
 8003360:	42420000 	.word	0x42420000
 8003364:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003368:	4b92      	ldr	r3, [pc, #584]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e9      	bne.n	8003348 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a6 	beq.w	80034ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b8b      	ldr	r3, [pc, #556]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10d      	bne.n	80033ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4a87      	ldr	r2, [pc, #540]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	61d3      	str	r3, [r2, #28]
 800339e:	4b85      	ldr	r3, [pc, #532]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_OscConfig+0x4c8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d118      	bne.n	80033ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ba:	4b7f      	ldr	r3, [pc, #508]	; (80035b8 <HAL_RCC_OscConfig+0x4c8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a7e      	ldr	r2, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x4c8>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c6:	f7fd fbdd 	bl	8000b84 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fd fbd9 	bl	8000b84 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	; 0x64
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e103      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	4b75      	ldr	r3, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x4c8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x312>
 80033f4:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4a6e      	ldr	r2, [pc, #440]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6213      	str	r3, [r2, #32]
 8003400:	e02d      	b.n	800345e <HAL_RCC_OscConfig+0x36e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x334>
 800340a:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4a69      	ldr	r2, [pc, #420]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6213      	str	r3, [r2, #32]
 8003416:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a66      	ldr	r2, [pc, #408]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	e01c      	b.n	800345e <HAL_RCC_OscConfig+0x36e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b05      	cmp	r3, #5
 800342a:	d10c      	bne.n	8003446 <HAL_RCC_OscConfig+0x356>
 800342c:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a60      	ldr	r2, [pc, #384]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6213      	str	r3, [r2, #32]
 8003438:	4b5e      	ldr	r3, [pc, #376]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a5d      	ldr	r2, [pc, #372]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	e00b      	b.n	800345e <HAL_RCC_OscConfig+0x36e>
 8003446:	4b5b      	ldr	r3, [pc, #364]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	4a5a      	ldr	r2, [pc, #360]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6213      	str	r3, [r2, #32]
 8003452:	4b58      	ldr	r3, [pc, #352]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d015      	beq.n	8003492 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003466:	f7fd fb8d 	bl	8000b84 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fd fb89 	bl	8000b84 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	; 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0b1      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003484:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ee      	beq.n	800346e <HAL_RCC_OscConfig+0x37e>
 8003490:	e014      	b.n	80034bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003492:	f7fd fb77 	bl	8000b84 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fd fb73 	bl	8000b84 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e09b      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b0:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1ee      	bne.n	800349a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d105      	bne.n	80034ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c2:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a3b      	ldr	r2, [pc, #236]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8087 	beq.w	80035e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034d8:	4b36      	ldr	r3, [pc, #216]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d061      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d146      	bne.n	800357a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b33      	ldr	r3, [pc, #204]	; (80035bc <HAL_RCC_OscConfig+0x4cc>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fd fb47 	bl	8000b84 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fa:	f7fd fb43 	bl	8000b84 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e06d      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350c:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f0      	bne.n	80034fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003520:	d108      	bne.n	8003534 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4921      	ldr	r1, [pc, #132]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003534:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a19      	ldr	r1, [r3, #32]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	430b      	orrs	r3, r1
 8003546:	491b      	ldr	r1, [pc, #108]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x4cc>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fd fb17 	bl	8000b84 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355a:	f7fd fb13 	bl	8000b84 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e03d      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x46a>
 8003578:	e035      	b.n	80035e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_RCC_OscConfig+0x4cc>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd fb00 	bl	8000b84 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd fafc 	bl	8000b84 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e026      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x498>
 80035a6:	e01e      	b.n	80035e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e019      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
 80035b4:	40021000 	.word	0x40021000
 80035b8:	40007000 	.word	0x40007000
 80035bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035c0:	4b0b      	ldr	r3, [pc, #44]	; (80035f0 <HAL_RCC_OscConfig+0x500>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000

080035f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0d0      	b.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d910      	bls.n	8003638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b67      	ldr	r3, [pc, #412]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0207 	bic.w	r2, r3, #7
 800361e:	4965      	ldr	r1, [pc, #404]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0b8      	b.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800365a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003672:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	494d      	ldr	r1, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003682:	4313      	orrs	r3, r2
 8003684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d040      	beq.n	8003714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d115      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e073      	b.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e06b      	b.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4936      	ldr	r1, [pc, #216]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fd fa4e 	bl	8000b84 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fd fa4a 	bl	8000b84 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e053      	b.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d210      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 0207 	bic.w	r2, r3, #7
 800372a:	4922      	ldr	r1, [pc, #136]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e032      	b.n	80037aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4916      	ldr	r1, [pc, #88]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003782:	f000 f821 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	490a      	ldr	r1, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x1c8>)
 8003794:	5ccb      	ldrb	r3, [r1, r3]
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1cc>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1d0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd f9ac 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40021000 	.word	0x40021000
 80037bc:	08008f18 	.word	0x08008f18
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	b490      	push	{r4, r7}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <HAL_RCC_GetSysClockFreq+0xac>)
 80037d0:	1d3c      	adds	r4, r7, #4
 80037d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037d8:	f240 2301 	movw	r3, #513	; 0x201
 80037dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d002      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x40>
 8003802:	2b08      	cmp	r3, #8
 8003804:	d003      	beq.n	800380e <HAL_RCC_GetSysClockFreq+0x46>
 8003806:	e02b      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <HAL_RCC_GetSysClockFreq+0xb4>)
 800380a:	623b      	str	r3, [r7, #32]
      break;
 800380c:	e02b      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	0c9b      	lsrs	r3, r3, #18
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	3328      	adds	r3, #40	; 0x28
 8003818:	443b      	add	r3, r7
 800381a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800381e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d012      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_RCC_GetSysClockFreq+0xb0>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0c5b      	lsrs	r3, r3, #17
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	3328      	adds	r3, #40	; 0x28
 8003836:	443b      	add	r3, r7
 8003838:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800383c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a0e      	ldr	r2, [pc, #56]	; (800387c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003842:	fb03 f202 	mul.w	r2, r3, r2
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e004      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	623b      	str	r3, [r7, #32]
      break;
 800385e:	e002      	b.n	8003866 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003862:	623b      	str	r3, [r7, #32]
      break;
 8003864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003866:	6a3b      	ldr	r3, [r7, #32]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bc90      	pop	{r4, r7}
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	08008ec0 	.word	0x08008ec0
 8003878:	40021000 	.word	0x40021000
 800387c:	007a1200 	.word	0x007a1200
 8003880:	003d0900 	.word	0x003d0900

08003884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003888:	4b02      	ldr	r3, [pc, #8]	; (8003894 <HAL_RCC_GetHCLKFreq+0x10>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	20000000 	.word	0x20000000

08003898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800389c:	f7ff fff2 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08008f28 	.word	0x08008f28

080038c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038c4:	f7ff ffde 	bl	8003884 <HAL_RCC_GetHCLKFreq>
 80038c8:	4602      	mov	r2, r0
 80038ca:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	0adb      	lsrs	r3, r3, #11
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	4903      	ldr	r1, [pc, #12]	; (80038e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038d6:	5ccb      	ldrb	r3, [r1, r3]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08008f28 	.word	0x08008f28

080038e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <RCC_Delay+0x34>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <RCC_Delay+0x38>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0a5b      	lsrs	r3, r3, #9
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003904:	bf00      	nop
  }
  while (Delay --);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	60fa      	str	r2, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f9      	bne.n	8003904 <RCC_Delay+0x1c>
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	20000000 	.word	0x20000000
 8003920:	10624dd3 	.word	0x10624dd3

08003924 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d07d      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003940:	2300      	movs	r3, #0
 8003942:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003944:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003950:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4a4b      	ldr	r2, [pc, #300]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395a:	61d3      	str	r3, [r2, #28]
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d118      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003978:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a42      	ldr	r2, [pc, #264]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003984:	f7fd f8fe 	bl	8000b84 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	e008      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fd f8fa 	bl	8000b84 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e06d      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399e:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039aa:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02e      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d027      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039c8:	4b2e      	ldr	r3, [pc, #184]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039d2:	4b2e      	ldr	r3, [pc, #184]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d014      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fd f8c9 	bl	8000b84 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fd f8c5 	bl	8000b84 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e036      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ee      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4917      	ldr	r1, [pc, #92]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	490b      	ldr	r1, [pc, #44]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4904      	ldr	r1, [pc, #16]	; (8003a84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	40007000 	.word	0x40007000
 8003a8c:	42420440 	.word	0x42420440

08003a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e03f      	b.n	8003b22 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fc fe04 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f905 	bl	8003ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b08a      	sub	sp, #40	; 0x28
 8003b2e:	af02      	add	r7, sp, #8
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d17c      	bne.n	8003c44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_UART_Transmit+0x2c>
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e075      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Transmit+0x3e>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e06e      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2221      	movs	r2, #33	; 0x21
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd f801 	bl	8000b84 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	88fa      	ldrh	r2, [r7, #6]
 8003b88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	88fa      	ldrh	r2, [r7, #6]
 8003b8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b98:	d108      	bne.n	8003bac <HAL_UART_Transmit+0x82>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	e003      	b.n	8003bb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bbc:	e02a      	b.n	8003c14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f840 	bl	8003c4e <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e036      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	e007      	b.n	8003c06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	3301      	adds	r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1cf      	bne.n	8003bbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2140      	movs	r1, #64	; 0x40
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f810 	bl	8003c4e <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e006      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	e02c      	b.n	8003cba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c66:	d028      	beq.n	8003cba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6e:	f7fc ff89 	bl	8000b84 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d21d      	bcs.n	8003cba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c8c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e00f      	b.n	8003cda <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d0c3      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d1e:	f023 030c 	bic.w	r3, r3, #12
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6812      	ldr	r2, [r2, #0]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a2c      	ldr	r2, [pc, #176]	; (8003df8 <UART_SetConfig+0x114>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d4c:	f7ff fdb8 	bl	80038c0 <HAL_RCC_GetPCLK2Freq>
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	e002      	b.n	8003d5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7ff fda0 	bl	8003898 <HAL_RCC_GetPCLK1Freq>
 8003d58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <UART_SetConfig+0x118>)
 8003d72:	fba2 2303 	umull	r2, r3, r2, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	0119      	lsls	r1, r3, #4
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009a      	lsls	r2, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <UART_SetConfig+0x118>)
 8003d92:	fba3 0302 	umull	r0, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2064      	movs	r0, #100	; 0x64
 8003d9a:	fb00 f303 	mul.w	r3, r0, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	3332      	adds	r3, #50	; 0x32
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <UART_SetConfig+0x118>)
 8003da6:	fba2 2303 	umull	r2, r3, r2, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db0:	4419      	add	r1, r3
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	009a      	lsls	r2, r3, #2
 8003dbc:	441a      	add	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <UART_SetConfig+0x118>)
 8003dca:	fba3 0302 	umull	r0, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	2064      	movs	r0, #100	; 0x64
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	3332      	adds	r3, #50	; 0x32
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <UART_SetConfig+0x118>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	f003 020f 	and.w	r2, r3, #15
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	440a      	add	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	51eb851f 	.word	0x51eb851f

08003e00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e00:	b084      	sub	sp, #16
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	f107 0014 	add.w	r0, r7, #20
 8003e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	b004      	add	sp, #16
 8003e1e:	4770      	bx	lr

08003e20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e30:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e54:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e98:	b084      	sub	sp, #16
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	f107 0014 	add.w	r0, r7, #20
 8003ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	b004      	add	sp, #16
 8003ed6:	4770      	bx	lr

08003ed8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b09b      	sub	sp, #108	; 0x6c
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	78db      	ldrb	r3, [r3, #3]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d81f      	bhi.n	8003f4a <USB_ActivateEndpoint+0x72>
 8003f0a:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <USB_ActivateEndpoint+0x38>)
 8003f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f10:	08003f21 	.word	0x08003f21
 8003f14:	08003f3d 	.word	0x08003f3d
 8003f18:	08003f53 	.word	0x08003f53
 8003f1c:	08003f2f 	.word	0x08003f2f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f2c:	e012      	b.n	8003f54 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f32:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f3a:	e00b      	b.n	8003f54 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f48:	e004      	b.n	8003f54 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003f50:	e000      	b.n	8003f54 <USB_ActivateEndpoint+0x7c>
      break;
 8003f52:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	441a      	add	r2, r3
 8003fa4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	7b1b      	ldrb	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 8149 	bne.w	8004258 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8084 	beq.w	80040d8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	011a      	lsls	r2, r3, #4
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	88db      	ldrh	r3, [r3, #6]
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	81fb      	strh	r3, [r7, #14]
 8004012:	89fb      	ldrh	r3, [r7, #14]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01b      	beq.n	8004054 <USB_ActivateEndpoint+0x17c>
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	81bb      	strh	r3, [r7, #12]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	89bb      	ldrh	r3, [r7, #12]
 8004040:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004044:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800404c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004050:	b29b      	uxth	r3, r3
 8004052:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	78db      	ldrb	r3, [r3, #3]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d020      	beq.n	800409e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004072:	813b      	strh	r3, [r7, #8]
 8004074:	893b      	ldrh	r3, [r7, #8]
 8004076:	f083 0320 	eor.w	r3, r3, #32
 800407a:	813b      	strh	r3, [r7, #8]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	893b      	ldrh	r3, [r7, #8]
 8004088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
 800409c:	e27f      	b.n	800459e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b4:	817b      	strh	r3, [r7, #10]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	441a      	add	r2, r3
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	8013      	strh	r3, [r2, #0]
 80040d6:	e262      	b.n	800459e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e8:	4413      	add	r3, r2
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	011a      	lsls	r2, r3, #4
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	88db      	ldrh	r3, [r3, #6]
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	4413      	add	r3, r2
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	011a      	lsls	r2, r3, #4
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	4413      	add	r3, r2
 800412a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d112      	bne.n	800415e <USB_ActivateEndpoint+0x286>
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004142:	b29a      	uxth	r2, r3
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004156:	b29a      	uxth	r2, r3
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	801a      	strh	r2, [r3, #0]
 800415c:	e02f      	b.n	80041be <USB_ActivateEndpoint+0x2e6>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b3e      	cmp	r3, #62	; 0x3e
 8004164:	d813      	bhi.n	800418e <USB_ActivateEndpoint+0x2b6>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	663b      	str	r3, [r7, #96]	; 0x60
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <USB_ActivateEndpoint+0x2a8>
 800417a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417c:	3301      	adds	r3, #1
 800417e:	663b      	str	r3, [r7, #96]	; 0x60
 8004180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004182:	b29b      	uxth	r3, r3
 8004184:	029b      	lsls	r3, r3, #10
 8004186:	b29a      	uxth	r2, r3
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	801a      	strh	r2, [r3, #0]
 800418c:	e017      	b.n	80041be <USB_ActivateEndpoint+0x2e6>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	663b      	str	r3, [r7, #96]	; 0x60
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <USB_ActivateEndpoint+0x2d0>
 80041a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a4:	3b01      	subs	r3, #1
 80041a6:	663b      	str	r3, [r7, #96]	; 0x60
 80041a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	029b      	lsls	r3, r3, #10
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	83fb      	strh	r3, [r7, #30]
 80041cc:	8bfb      	ldrh	r3, [r7, #30]
 80041ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01b      	beq.n	800420e <USB_ActivateEndpoint+0x336>
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ec:	83bb      	strh	r3, [r7, #28]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	8bbb      	ldrh	r3, [r7, #28]
 80041fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420a:	b29b      	uxth	r3, r3
 800420c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	837b      	strh	r3, [r7, #26]
 8004226:	8b7b      	ldrh	r3, [r7, #26]
 8004228:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800422c:	837b      	strh	r3, [r7, #26]
 800422e:	8b7b      	ldrh	r3, [r7, #26]
 8004230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004234:	837b      	strh	r3, [r7, #26]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	8b7b      	ldrh	r3, [r7, #26]
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
 8004256:	e1a2      	b.n	800459e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	441a      	add	r2, r3
 800427c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004288:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800428c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004290:	b29b      	uxth	r3, r3
 8004292:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	65bb      	str	r3, [r7, #88]	; 0x58
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429e:	b29b      	uxth	r3, r3
 80042a0:	461a      	mov	r2, r3
 80042a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a4:	4413      	add	r3, r2
 80042a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	011a      	lsls	r2, r3, #4
 80042ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b6:	657b      	str	r3, [r7, #84]	; 0x54
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	891b      	ldrh	r3, [r3, #8]
 80042bc:	085b      	lsrs	r3, r3, #1
 80042be:	b29b      	uxth	r3, r3
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	801a      	strh	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	4413      	add	r3, r2
 80042da:	653b      	str	r3, [r7, #80]	; 0x50
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	011a      	lsls	r2, r3, #4
 80042e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	895b      	ldrh	r3, [r3, #10]
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	785b      	ldrb	r3, [r3, #1]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 8091 	bne.w	8004428 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004314:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01b      	beq.n	8004356 <USB_ActivateEndpoint+0x47e>
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	441a      	add	r2, r3
 8004340:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800434a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800434e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004352:	b29b      	uxth	r3, r3
 8004354:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	873b      	strh	r3, [r7, #56]	; 0x38
 8004364:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01b      	beq.n	80043a6 <USB_ActivateEndpoint+0x4ce>
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	441a      	add	r2, r3
 8004390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	441a      	add	r2, r3
 80043d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80043da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004404:	867b      	strh	r3, [r7, #50]	; 0x32
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	441a      	add	r2, r3
 8004410:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800441a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800441e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004422:	b29b      	uxth	r3, r3
 8004424:	8013      	strh	r3, [r2, #0]
 8004426:	e0ba      	b.n	800459e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004438:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800443c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d01d      	beq.n	8004480 <USB_ActivateEndpoint+0x5a8>
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	441a      	add	r2, r3
 8004468:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800446c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004474:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004490:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01d      	beq.n	80044d8 <USB_ActivateEndpoint+0x600>
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80044c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	78db      	ldrb	r3, [r3, #3]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d024      	beq.n	800452a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044fe:	f083 0320 	eor.w	r3, r3, #32
 8004502:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	441a      	add	r2, r3
 8004510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800451c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004524:	b29b      	uxth	r3, r3
 8004526:	8013      	strh	r3, [r2, #0]
 8004528:	e01d      	b.n	8004566 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004540:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	441a      	add	r2, r3
 800454e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800459e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	376c      	adds	r7, #108	; 0x6c
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b08d      	sub	sp, #52	; 0x34
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	7b1b      	ldrb	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f040 808e 	bne.w	80046dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d044      	beq.n	8004652 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	81bb      	strh	r3, [r7, #12]
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <USB_DeactivateEndpoint+0x6c>
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	817b      	strh	r3, [r7, #10]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462e:	813b      	strh	r3, [r7, #8]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
 8004650:	e192      	b.n	8004978 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	827b      	strh	r3, [r7, #18]
 8004660:	8a7b      	ldrh	r3, [r7, #18]
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01b      	beq.n	80046a2 <USB_DeactivateEndpoint+0xf6>
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	823b      	strh	r3, [r7, #16]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	8a3b      	ldrh	r3, [r7, #16]
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	81fb      	strh	r3, [r7, #14]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	89fb      	ldrh	r3, [r7, #14]
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
 80046da:	e14d      	b.n	8004978 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 80a5 	bne.w	8004830 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	843b      	strh	r3, [r7, #32]
 80046f4:	8c3b      	ldrh	r3, [r7, #32]
 80046f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01b      	beq.n	8004736 <USB_DeactivateEndpoint+0x18a>
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004714:	83fb      	strh	r3, [r7, #30]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	83bb      	strh	r3, [r7, #28]
 8004744:	8bbb      	ldrh	r3, [r7, #28]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01b      	beq.n	8004786 <USB_DeactivateEndpoint+0x1da>
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004764:	837b      	strh	r3, [r7, #26]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8b7b      	ldrh	r3, [r7, #26]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	833b      	strh	r3, [r7, #24]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	441a      	add	r2, r3
 80047a8:	8b3b      	ldrh	r3, [r7, #24]
 80047aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	82fb      	strh	r3, [r7, #22]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	441a      	add	r2, r3
 80047e0:	8afb      	ldrh	r3, [r7, #22]
 80047e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	82bb      	strh	r3, [r7, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	8abb      	ldrh	r3, [r7, #20]
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]
 800482e:	e0a3      	b.n	8004978 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800483e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <USB_DeactivateEndpoint+0x2d4>
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800488e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <USB_DeactivateEndpoint+0x324>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	441a      	add	r2, r3
 80048f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004956:	847b      	strh	r3, [r7, #34]	; 0x22
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3734      	adds	r7, #52	; 0x34
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b0cc      	sub	sp, #304	; 0x130
 8004988:	af00      	add	r7, sp, #0
 800498a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800498e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004992:	6018      	str	r0, [r3, #0]
 8004994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800499c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800499e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	f041 817d 	bne.w	8005caa <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d908      	bls.n	80049de <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80049cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80049dc:	e007      	b.n	80049ee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80049de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	7b1b      	ldrb	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d152      	bne.n	8004aa4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6959      	ldr	r1, [r3, #20]
 8004a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	88da      	ldrh	r2, [r3, #6]
 8004a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a24:	6800      	ldr	r0, [r0, #0]
 8004a26:	f001 ff23 	bl	8006870 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a36:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a54:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a5c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	440a      	add	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	011a      	lsls	r2, r3, #4
 8004a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	f001 b8b5 	b.w	8005c0e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78db      	ldrb	r3, [r3, #3]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f040 84c6 	bne.w	8005442 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	f240 8443 	bls.w	800535a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	441a      	add	r2, r3
 8004b18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b40:	1ad2      	subs	r2, r2, r3
 8004b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4413      	add	r3, r2
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 823e 	beq.w	8004ff2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b82:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 809a 	bne.w	8004cd0 <USB_EPStartXfer+0x34c>
 8004b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ba4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ba8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bce:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	011a      	lsls	r2, r3, #4
 8004be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d122      	bne.n	8004c4e <USB_EPStartXfer+0x2ca>
 8004c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	801a      	strh	r2, [r3, #0]
 8004c4c:	e079      	b.n	8004d42 <USB_EPStartXfer+0x3be>
 8004c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c52:	2b3e      	cmp	r3, #62	; 0x3e
 8004c54:	d81b      	bhi.n	8004c8e <USB_EPStartXfer+0x30a>
 8004c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <USB_EPStartXfer+0x2f2>
 8004c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c70:	3301      	adds	r3, #1
 8004c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	029b      	lsls	r3, r3, #10
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	e059      	b.n	8004d42 <USB_EPStartXfer+0x3be>
 8004c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d104      	bne.n	8004cae <USB_EPStartXfer+0x32a>
 8004ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	029b      	lsls	r3, r3, #10
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	e038      	b.n	8004d42 <USB_EPStartXfer+0x3be>
 8004cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d130      	bne.n	8004d42 <USB_EPStartXfer+0x3be>
 8004ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004cfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cfe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	440a      	add	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	011a      	lsls	r2, r3, #4
 8004d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	895b      	ldrh	r3, [r3, #10]
 8004d4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6959      	ldr	r1, [r3, #20]
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d70:	6800      	ldr	r0, [r0, #0]
 8004d72:	f001 fd7d 	bl	8006870 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d86:	441a      	add	r2, r3
 8004d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a1a      	ldr	r2, [r3, #32]
 8004da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d90f      	bls.n	8004dd0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc0:	1ad2      	subs	r2, r2, r3
 8004dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	621a      	str	r2, [r3, #32]
 8004dce:	e00e      	b.n	8004dee <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f040 809a 	bne.w	8004f34 <USB_EPStartXfer+0x5b0>
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e10:	6812      	ldr	r2, [r2, #0]
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4619      	mov	r1, r3
 8004e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e32:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	440a      	add	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4413      	add	r3, r2
 8004e56:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d122      	bne.n	8004eb2 <USB_EPStartXfer+0x52e>
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e84:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e083      	b.n	8004fba <USB_EPStartXfer+0x636>
 8004eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8004eb8:	d81b      	bhi.n	8004ef2 <USB_EPStartXfer+0x56e>
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <USB_EPStartXfer+0x556>
 8004ed0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eda:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	029b      	lsls	r3, r3, #10
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	e063      	b.n	8004fba <USB_EPStartXfer+0x636>
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f00:	f003 031f 	and.w	r3, r3, #31
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d104      	bne.n	8004f12 <USB_EPStartXfer+0x58e>
 8004f08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	e042      	b.n	8004fba <USB_EPStartXfer+0x636>
 8004f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d13a      	bne.n	8004fba <USB_EPStartXfer+0x636>
 8004f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f50:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f76:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	891b      	ldrh	r3, [r3, #8]
 8004fc6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6959      	ldr	r1, [r3, #20]
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fe0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fe4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fe8:	6800      	ldr	r0, [r0, #0]
 8004fea:	f001 fc41 	bl	8006870 <USB_WritePMA>
 8004fee:	f000 be0e 	b.w	8005c0e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d16d      	bne.n	80050de <USB_EPStartXfer+0x75a>
 8005002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005006:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	64bb      	str	r3, [r7, #72]	; 0x48
 800500e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005022:	4413      	add	r3, r2
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	011a      	lsls	r2, r3, #4
 8005034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005036:	4413      	add	r3, r2
 8005038:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800503c:	647b      	str	r3, [r7, #68]	; 0x44
 800503e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d112      	bne.n	800506c <USB_EPStartXfer+0x6e8>
 8005046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005050:	b29a      	uxth	r2, r3
 8005052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005064:	b29a      	uxth	r2, r3
 8005066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	e063      	b.n	8005134 <USB_EPStartXfer+0x7b0>
 800506c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005070:	2b3e      	cmp	r3, #62	; 0x3e
 8005072:	d817      	bhi.n	80050a4 <USB_EPStartXfer+0x720>
 8005074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800507e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <USB_EPStartXfer+0x710>
 800508a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800508e:	3301      	adds	r3, #1
 8005090:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005094:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005098:	b29b      	uxth	r3, r3
 800509a:	029b      	lsls	r3, r3, #10
 800509c:	b29a      	uxth	r2, r3
 800509e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	e047      	b.n	8005134 <USB_EPStartXfer+0x7b0>
 80050a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <USB_EPStartXfer+0x740>
 80050ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050be:	3b01      	subs	r3, #1
 80050c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	e02a      	b.n	8005134 <USB_EPStartXfer+0x7b0>
 80050de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d122      	bne.n	8005134 <USB_EPStartXfer+0x7b0>
 80050ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	653b      	str	r3, [r7, #80]	; 0x50
 80050fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005108:	b29b      	uxth	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800510e:	4413      	add	r3, r2
 8005110:	653b      	str	r3, [r7, #80]	; 0x50
 8005112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	011a      	lsls	r2, r3, #4
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	4413      	add	r3, r2
 8005124:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800512a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512e:	b29a      	uxth	r2, r3
 8005130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005132:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	891b      	ldrh	r3, [r3, #8]
 8005140:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6959      	ldr	r1, [r3, #20]
 8005150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005154:	b29b      	uxth	r3, r3
 8005156:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800515a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800515e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005162:	6800      	ldr	r0, [r0, #0]
 8005164:	f001 fb84 	bl	8006870 <USB_WritePMA>
            ep->xfer_buff += len;
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695a      	ldr	r2, [r3, #20]
 8005174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005178:	441a      	add	r2, r3
 800517a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a1a      	ldr	r2, [r3, #32]
 8005192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90f      	bls.n	80051c2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80051a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	621a      	str	r2, [r3, #32]
 80051c0:	e00e      	b.n	80051e0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2200      	movs	r2, #0
 80051de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	643b      	str	r3, [r7, #64]	; 0x40
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d16d      	bne.n	80052d8 <USB_EPStartXfer+0x954>
 80051fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
 8005208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005216:	b29b      	uxth	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	4413      	add	r3, r2
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	011a      	lsls	r2, r3, #4
 800522e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005230:	4413      	add	r3, r2
 8005232:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
 8005238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d112      	bne.n	8005266 <USB_EPStartXfer+0x8e2>
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800524a:	b29a      	uxth	r2, r3
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	801a      	strh	r2, [r3, #0]
 8005250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525e:	b29a      	uxth	r2, r3
 8005260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e05d      	b.n	8005322 <USB_EPStartXfer+0x99e>
 8005266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526a:	2b3e      	cmp	r3, #62	; 0x3e
 800526c:	d817      	bhi.n	800529e <USB_EPStartXfer+0x91a>
 800526e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <USB_EPStartXfer+0x90a>
 8005284:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005288:	3301      	adds	r3, #1
 800528a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800528e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005292:	b29b      	uxth	r3, r3
 8005294:	029b      	lsls	r3, r3, #10
 8005296:	b29a      	uxth	r2, r3
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	801a      	strh	r2, [r3, #0]
 800529c:	e041      	b.n	8005322 <USB_EPStartXfer+0x99e>
 800529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d104      	bne.n	80052be <USB_EPStartXfer+0x93a>
 80052b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052b8:	3b01      	subs	r3, #1
 80052ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	801a      	strh	r2, [r3, #0]
 80052d6:	e024      	b.n	8005322 <USB_EPStartXfer+0x99e>
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d11c      	bne.n	8005322 <USB_EPStartXfer+0x99e>
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fc:	4413      	add	r3, r2
 80052fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	011a      	lsls	r2, r3, #4
 800530e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005310:	4413      	add	r3, r2
 8005312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531c:	b29a      	uxth	r2, r3
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	895b      	ldrh	r3, [r3, #10]
 800532e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6959      	ldr	r1, [r3, #20]
 800533e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005342:	b29b      	uxth	r3, r3
 8005344:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005348:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800534c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005350:	6800      	ldr	r0, [r0, #0]
 8005352:	f001 fa8d 	bl	8006870 <USB_WritePMA>
 8005356:	f000 bc5a 	b.w	8005c0e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005398:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	441a      	add	r2, r3
 80053ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80053b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e6:	4413      	add	r3, r2
 80053e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	011a      	lsls	r2, r3, #4
 80053f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fa:	4413      	add	r3, r2
 80053fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005400:	65bb      	str	r3, [r7, #88]	; 0x58
 8005402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005406:	b29a      	uxth	r2, r3
 8005408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800540a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800540c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	891b      	ldrh	r3, [r3, #8]
 8005418:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6959      	ldr	r1, [r3, #20]
 8005428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542c:	b29b      	uxth	r3, r3
 800542e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005432:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005436:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800543a:	6800      	ldr	r0, [r0, #0]
 800543c:	f001 fa18 	bl	8006870 <USB_WritePMA>
 8005440:	e3e5      	b.n	8005c0e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005446:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800546c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005470:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800549e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 81bc 	beq.w	800585c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d16d      	bne.n	80055de <USB_EPStartXfer+0xc5a>
 8005502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	67bb      	str	r3, [r7, #120]	; 0x78
 800550e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551c:	b29b      	uxth	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005522:	4413      	add	r3, r2
 8005524:	67bb      	str	r3, [r7, #120]	; 0x78
 8005526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	011a      	lsls	r2, r3, #4
 8005534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005536:	4413      	add	r3, r2
 8005538:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800553c:	677b      	str	r3, [r7, #116]	; 0x74
 800553e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d112      	bne.n	800556c <USB_EPStartXfer+0xbe8>
 8005546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005550:	b29a      	uxth	r2, r3
 8005552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005564:	b29a      	uxth	r2, r3
 8005566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005568:	801a      	strh	r2, [r3, #0]
 800556a:	e060      	b.n	800562e <USB_EPStartXfer+0xcaa>
 800556c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005570:	2b3e      	cmp	r3, #62	; 0x3e
 8005572:	d817      	bhi.n	80055a4 <USB_EPStartXfer+0xc20>
 8005574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800557e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <USB_EPStartXfer+0xc10>
 800558a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800558e:	3301      	adds	r3, #1
 8005590:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005594:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005598:	b29b      	uxth	r3, r3
 800559a:	029b      	lsls	r3, r3, #10
 800559c:	b29a      	uxth	r2, r3
 800559e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	e044      	b.n	800562e <USB_EPStartXfer+0xcaa>
 80055a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d104      	bne.n	80055c4 <USB_EPStartXfer+0xc40>
 80055ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055be:	3b01      	subs	r3, #1
 80055c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	029b      	lsls	r3, r3, #10
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	e027      	b.n	800562e <USB_EPStartXfer+0xcaa>
 80055de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d11f      	bne.n	800562e <USB_EPStartXfer+0xcaa>
 80055ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005604:	4413      	add	r3, r2
 8005606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	011a      	lsls	r2, r3, #4
 8005618:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800561c:	4413      	add	r3, r2
 800561e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005622:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005628:	b29a      	uxth	r2, r3
 800562a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800562c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	895b      	ldrh	r3, [r3, #10]
 800563a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6959      	ldr	r1, [r3, #20]
 800564a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564e:	b29b      	uxth	r3, r3
 8005650:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005654:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005658:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800565c:	6800      	ldr	r0, [r0, #0]
 800565e:	f001 f907 	bl	8006870 <USB_WritePMA>
          ep->xfer_buff += len;
 8005662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005672:	441a      	add	r2, r3
 8005674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	429a      	cmp	r2, r3
 800569a:	d90f      	bls.n	80056bc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a1a      	ldr	r2, [r3, #32]
 80056a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	621a      	str	r2, [r3, #32]
 80056ba:	e00e      	b.n	80056da <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80056da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8295 	beq.w	8005c0e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d16d      	bne.n	80057d0 <USB_EPStartXfer+0xe4c>
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005714:	4413      	add	r3, r2
 8005716:	66bb      	str	r3, [r7, #104]	; 0x68
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	011a      	lsls	r2, r3, #4
 8005726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005728:	4413      	add	r3, r2
 800572a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800572e:	667b      	str	r3, [r7, #100]	; 0x64
 8005730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005734:	2b00      	cmp	r3, #0
 8005736:	d112      	bne.n	800575e <USB_EPStartXfer+0xdda>
 8005738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005742:	b29a      	uxth	r2, r3
 8005744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005756:	b29a      	uxth	r2, r3
 8005758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	e063      	b.n	8005826 <USB_EPStartXfer+0xea2>
 800575e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005762:	2b3e      	cmp	r3, #62	; 0x3e
 8005764:	d817      	bhi.n	8005796 <USB_EPStartXfer+0xe12>
 8005766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <USB_EPStartXfer+0xe02>
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005780:	3301      	adds	r3, #1
 8005782:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800578a:	b29b      	uxth	r3, r3
 800578c:	029b      	lsls	r3, r3, #10
 800578e:	b29a      	uxth	r2, r3
 8005790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e047      	b.n	8005826 <USB_EPStartXfer+0xea2>
 8005796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a4:	f003 031f 	and.w	r3, r3, #31
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <USB_EPStartXfer+0xe32>
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b0:	3b01      	subs	r3, #1
 80057b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	029b      	lsls	r3, r3, #10
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e02a      	b.n	8005826 <USB_EPStartXfer+0xea2>
 80057d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d122      	bne.n	8005826 <USB_EPStartXfer+0xea2>
 80057e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	673b      	str	r3, [r7, #112]	; 0x70
 80057ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005800:	4413      	add	r3, r2
 8005802:	673b      	str	r3, [r7, #112]	; 0x70
 8005804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	011a      	lsls	r2, r3, #4
 8005812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005814:	4413      	add	r3, r2
 8005816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800581a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800581c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005820:	b29a      	uxth	r2, r3
 8005822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005824:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	891b      	ldrh	r3, [r3, #8]
 8005832:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6959      	ldr	r1, [r3, #20]
 8005842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005846:	b29b      	uxth	r3, r3
 8005848:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800584c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005850:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005854:	6800      	ldr	r0, [r0, #0]
 8005856:	f001 f80b 	bl	8006870 <USB_WritePMA>
 800585a:	e1d8      	b.n	8005c0e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d178      	bne.n	800595e <USB_EPStartXfer+0xfda>
 800586c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800587a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005890:	4413      	add	r3, r2
 8005892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	011a      	lsls	r2, r3, #4
 80058a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <USB_EPStartXfer+0xf64>
 80058ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e06b      	b.n	80059c0 <USB_EPStartXfer+0x103c>
 80058e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ec:	2b3e      	cmp	r3, #62	; 0x3e
 80058ee:	d818      	bhi.n	8005922 <USB_EPStartXfer+0xf9e>
 80058f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80058fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <USB_EPStartXfer+0xf8c>
 8005906:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800590a:	3301      	adds	r3, #1
 800590c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005910:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005914:	b29b      	uxth	r3, r3
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	b29a      	uxth	r2, r3
 800591a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e04e      	b.n	80059c0 <USB_EPStartXfer+0x103c>
 8005922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800592c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	2b00      	cmp	r3, #0
 8005936:	d104      	bne.n	8005942 <USB_EPStartXfer+0xfbe>
 8005938:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800593c:	3b01      	subs	r3, #1
 800593e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005942:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005946:	b29b      	uxth	r3, r3
 8005948:	029b      	lsls	r3, r3, #10
 800594a:	b29b      	uxth	r3, r3
 800594c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005954:	b29a      	uxth	r2, r3
 8005956:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	e030      	b.n	80059c0 <USB_EPStartXfer+0x103c>
 800595e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d128      	bne.n	80059c0 <USB_EPStartXfer+0x103c>
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005992:	4413      	add	r3, r2
 8005994:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	011a      	lsls	r2, r3, #4
 80059a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059aa:	4413      	add	r3, r2
 80059ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	891b      	ldrh	r3, [r3, #8]
 80059cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6959      	ldr	r1, [r3, #20]
 80059dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059ee:	6800      	ldr	r0, [r0, #0]
 80059f0:	f000 ff3e 	bl	8006870 <USB_WritePMA>
          ep->xfer_buff += len;
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a04:	441a      	add	r2, r3
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6a1a      	ldr	r2, [r3, #32]
 8005a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d90f      	bls.n	8005a4e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a1a      	ldr	r2, [r3, #32]
 8005a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	621a      	str	r2, [r3, #32]
 8005a4c:	e00e      	b.n	8005a6c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80cc 	beq.w	8005c0e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d178      	bne.n	8005b86 <USB_EPStartXfer+0x1202>
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ab8:	4413      	add	r3, r2
 8005aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	011a      	lsls	r2, r3, #4
 8005acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ad6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d116      	bne.n	8005b10 <USB_EPStartXfer+0x118c>
 8005ae2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	e064      	b.n	8005bda <USB_EPStartXfer+0x1256>
 8005b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b14:	2b3e      	cmp	r3, #62	; 0x3e
 8005b16:	d818      	bhi.n	8005b4a <USB_EPStartXfer+0x11c6>
 8005b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <USB_EPStartXfer+0x11b4>
 8005b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b32:	3301      	adds	r3, #1
 8005b34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	029b      	lsls	r3, r3, #10
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	e047      	b.n	8005bda <USB_EPStartXfer+0x1256>
 8005b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <USB_EPStartXfer+0x11e6>
 8005b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b64:	3b01      	subs	r3, #1
 8005b66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	029b      	lsls	r3, r3, #10
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e029      	b.n	8005bda <USB_EPStartXfer+0x1256>
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d121      	bne.n	8005bda <USB_EPStartXfer+0x1256>
 8005b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bac:	4413      	add	r3, r2
 8005bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	011a      	lsls	r2, r3, #4
 8005bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	895b      	ldrh	r3, [r3, #10]
 8005be6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6959      	ldr	r1, [r3, #20]
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c00:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c04:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c08:	6800      	ldr	r0, [r0, #0]
 8005c0a:	f000 fe31 	bl	8006870 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c30:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3c:	8013      	strh	r3, [r2, #0]
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c4a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c4e:	8812      	ldrh	r2, [r2, #0]
 8005c50:	f082 0210 	eor.w	r2, r2, #16
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c62:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005c66:	8812      	ldrh	r2, [r2, #0]
 8005c68:	f082 0220 	eor.w	r2, r2, #32
 8005c6c:	801a      	strh	r2, [r3, #0]
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
 8005ca6:	f000 bc9f 	b.w	80065e8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	7b1b      	ldrb	r3, [r3, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 80ae 	bne.w	8005e18 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699a      	ldr	r2, [r3, #24]
 8005cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d917      	bls.n	8005d08 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	619a      	str	r2, [r3, #24]
 8005d06:	e00e      	b.n	8005d26 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2200      	movs	r2, #0
 8005d24:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	011a      	lsls	r2, r3, #4
 8005d5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005d62:	4413      	add	r3, r2
 8005d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d116      	bne.n	8005da2 <USB_EPStartXfer+0x141e>
 8005d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e3e8      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
 8005da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da6:	2b3e      	cmp	r3, #62	; 0x3e
 8005da8:	d818      	bhi.n	8005ddc <USB_EPStartXfer+0x1458>
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d004      	beq.n	8005dca <USB_EPStartXfer+0x1446>
 8005dc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e3cb      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <USB_EPStartXfer+0x1478>
 8005df2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005df6:	3b01      	subs	r3, #1
 8005df8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005dfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	029b      	lsls	r3, r3, #10
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e3ad      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	f040 8200 	bne.w	800622a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f040 8091 	bne.w	8005f5e <USB_EPStartXfer+0x15da>
 8005e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e60:	4413      	add	r3, r2
 8005e62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	011a      	lsls	r2, r3, #4
 8005e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e78:	4413      	add	r3, r2
 8005e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d116      	bne.n	8005ec0 <USB_EPStartXfer+0x153c>
 8005e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ea4:	801a      	strh	r2, [r3, #0]
 8005ea6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ebc:	801a      	strh	r2, [r3, #0]
 8005ebe:	e083      	b.n	8005fc8 <USB_EPStartXfer+0x1644>
 8005ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8005ece:	d820      	bhi.n	8005f12 <USB_EPStartXfer+0x158e>
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <USB_EPStartXfer+0x157c>
 8005ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005efa:	3301      	adds	r3, #1
 8005efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	029b      	lsls	r3, r3, #10
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e05a      	b.n	8005fc8 <USB_EPStartXfer+0x1644>
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f003 031f 	and.w	r3, r3, #31
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <USB_EPStartXfer+0x15be>
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	029b      	lsls	r3, r3, #10
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e034      	b.n	8005fc8 <USB_EPStartXfer+0x1644>
 8005f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d12c      	bne.n	8005fc8 <USB_EPStartXfer+0x1644>
 8005f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f92:	4413      	add	r3, r2
 8005f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 8091 	bne.w	800610a <USB_EPStartXfer+0x1786>
 8005fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006004:	b29b      	uxth	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800600c:	4413      	add	r3, r2
 800600e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	011a      	lsls	r2, r3, #4
 8006020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006024:	4413      	add	r3, r2
 8006026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800602a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800602e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d116      	bne.n	800606c <USB_EPStartXfer+0x16e8>
 800603e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e07c      	b.n	8006166 <USB_EPStartXfer+0x17e2>
 800606c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b3e      	cmp	r3, #62	; 0x3e
 800607a:	d820      	bhi.n	80060be <USB_EPStartXfer+0x173a>
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800608e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <USB_EPStartXfer+0x1728>
 80060a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060a6:	3301      	adds	r3, #1
 80060a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	029b      	lsls	r3, r3, #10
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	e053      	b.n	8006166 <USB_EPStartXfer+0x17e2>
 80060be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <USB_EPStartXfer+0x176a>
 80060e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060e8:	3b01      	subs	r3, #1
 80060ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80060ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	029b      	lsls	r3, r3, #10
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006100:	b29a      	uxth	r2, r3
 8006102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	e02d      	b.n	8006166 <USB_EPStartXfer+0x17e2>
 800610a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d125      	bne.n	8006166 <USB_EPStartXfer+0x17e2>
 800611a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006130:	4413      	add	r3, r2
 8006132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	011a      	lsls	r2, r3, #4
 8006144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006148:	4413      	add	r3, r2
 800614a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800614e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	b29a      	uxth	r2, r3
 8006160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006164:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 81fe 	beq.w	8006574 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006198:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800619c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <USB_EPStartXfer+0x182c>
 80061a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10d      	bne.n	80061cc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f040 81db 	bne.w	8006574 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 81d4 	bne.w	8006574 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80061cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006224:	b29b      	uxth	r3, r3
 8006226:	8013      	strh	r3, [r2, #0]
 8006228:	e1a4      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800622a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	78db      	ldrb	r3, [r3, #3]
 8006236:	2b01      	cmp	r3, #1
 8006238:	f040 819a 	bne.w	8006570 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d917      	bls.n	8006288 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	619a      	str	r2, [r3, #24]
 8006286:	e00e      	b.n	80062a6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2200      	movs	r2, #0
 80062a4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d178      	bne.n	80063a8 <USB_EPStartXfer+0x1a24>
 80062b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062da:	4413      	add	r3, r2
 80062dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d116      	bne.n	8006332 <USB_EPStartXfer+0x19ae>
 8006304:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006310:	b29a      	uxth	r2, r3
 8006312:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006328:	b29a      	uxth	r2, r3
 800632a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	e06b      	b.n	800640a <USB_EPStartXfer+0x1a86>
 8006332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006336:	2b3e      	cmp	r3, #62	; 0x3e
 8006338:	d818      	bhi.n	800636c <USB_EPStartXfer+0x19e8>
 800633a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d004      	beq.n	800635a <USB_EPStartXfer+0x19d6>
 8006350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006354:	3301      	adds	r3, #1
 8006356:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800635a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800635e:	b29b      	uxth	r3, r3
 8006360:	029b      	lsls	r3, r3, #10
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	e04e      	b.n	800640a <USB_EPStartXfer+0x1a86>
 800636c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <USB_EPStartXfer+0x1a08>
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006386:	3b01      	subs	r3, #1
 8006388:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006390:	b29b      	uxth	r3, r3
 8006392:	029b      	lsls	r3, r3, #10
 8006394:	b29b      	uxth	r3, r3
 8006396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800639a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063a4:	801a      	strh	r2, [r3, #0]
 80063a6:	e030      	b.n	800640a <USB_EPStartXfer+0x1a86>
 80063a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	785b      	ldrb	r3, [r3, #1]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d128      	bne.n	800640a <USB_EPStartXfer+0x1a86>
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063dc:	4413      	add	r3, r2
 80063de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	011a      	lsls	r2, r3, #4
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f4:	4413      	add	r3, r2
 80063f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80063fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006402:	b29a      	uxth	r2, r3
 8006404:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006408:	801a      	strh	r2, [r3, #0]
 800640a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d178      	bne.n	800651a <USB_EPStartXfer+0x1b96>
 8006428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800642c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006444:	b29b      	uxth	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644c:	4413      	add	r3, r2
 800644e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	011a      	lsls	r2, r3, #4
 8006460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006464:	4413      	add	r3, r2
 8006466:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800646a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800646e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d116      	bne.n	80064a4 <USB_EPStartXfer+0x1b20>
 8006476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006482:	b29a      	uxth	r2, r3
 8006484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006488:	801a      	strh	r2, [r3, #0]
 800648a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649a:	b29a      	uxth	r2, r3
 800649c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	e067      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
 80064a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a8:	2b3e      	cmp	r3, #62	; 0x3e
 80064aa:	d818      	bhi.n	80064de <USB_EPStartXfer+0x1b5a>
 80064ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <USB_EPStartXfer+0x1b48>
 80064c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064c6:	3301      	adds	r3, #1
 80064c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	029b      	lsls	r3, r3, #10
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064da:	801a      	strh	r2, [r3, #0]
 80064dc:	e04a      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
 80064de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <USB_EPStartXfer+0x1b7a>
 80064f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064f8:	3b01      	subs	r3, #1
 80064fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80064fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006502:	b29b      	uxth	r3, r3
 8006504:	029b      	lsls	r3, r3, #10
 8006506:	b29b      	uxth	r3, r3
 8006508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006510:	b29a      	uxth	r2, r3
 8006512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e02c      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d124      	bne.n	8006574 <USB_EPStartXfer+0x1bf0>
 800652a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	4413      	add	r3, r2
 8006542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	011a      	lsls	r2, r3, #4
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	4413      	add	r3, r2
 800655a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800655e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006566:	b29a      	uxth	r2, r3
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	801a      	strh	r2, [r3, #0]
 800656e:	e001      	b.n	8006574 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e03a      	b.n	80065ea <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006578:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800659e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80065aa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80065d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d020      	beq.n	8006648 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661c:	81bb      	strh	r3, [r7, #12]
 800661e:	89bb      	ldrh	r3, [r7, #12]
 8006620:	f083 0310 	eor.w	r3, r3, #16
 8006624:	81bb      	strh	r3, [r7, #12]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	89bb      	ldrh	r3, [r7, #12]
 8006632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800663a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006642:	b29b      	uxth	r3, r3
 8006644:	8013      	strh	r3, [r2, #0]
 8006646:	e01f      	b.n	8006688 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29b      	uxth	r3, r3
 8006656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	81fb      	strh	r3, [r7, #14]
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006666:	81fb      	strh	r3, [r7, #14]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	441a      	add	r2, r3
 8006672:	89fb      	ldrh	r3, [r7, #14]
 8006674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006684:	b29b      	uxth	r3, r3
 8006686:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr

08006694 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	7b1b      	ldrb	r3, [r3, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 809d 	bne.w	80067e2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d04c      	beq.n	800674a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	823b      	strh	r3, [r7, #16]
 80066be:	8a3b      	ldrh	r3, [r7, #16]
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01b      	beq.n	8006700 <USB_EPClearStall+0x6c>
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	81fb      	strh	r3, [r7, #14]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	441a      	add	r2, r3
 80066ea:	89fb      	ldrh	r3, [r7, #14]
 80066ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	78db      	ldrb	r3, [r3, #3]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d06c      	beq.n	80067e2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800671e:	81bb      	strh	r3, [r7, #12]
 8006720:	89bb      	ldrh	r3, [r7, #12]
 8006722:	f083 0320 	eor.w	r3, r3, #32
 8006726:	81bb      	strh	r3, [r7, #12]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	441a      	add	r2, r3
 8006732:	89bb      	ldrh	r3, [r7, #12]
 8006734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006744:	b29b      	uxth	r3, r3
 8006746:	8013      	strh	r3, [r2, #0]
 8006748:	e04b      	b.n	80067e2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	82fb      	strh	r3, [r7, #22]
 8006758:	8afb      	ldrh	r3, [r7, #22]
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01b      	beq.n	800679a <USB_EPClearStall+0x106>
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006778:	82bb      	strh	r3, [r7, #20]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	8abb      	ldrh	r3, [r7, #20]
 8006786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800678a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006796:	b29b      	uxth	r3, r3
 8006798:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b0:	827b      	strh	r3, [r7, #18]
 80067b2:	8a7b      	ldrh	r3, [r7, #18]
 80067b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067b8:	827b      	strh	r3, [r7, #18]
 80067ba:	8a7b      	ldrh	r3, [r7, #18]
 80067bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067c0:	827b      	strh	r3, [r7, #18]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	8a7b      	ldrh	r3, [r7, #18]
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr

080067ee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d103      	bne.n	8006808 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2280      	movs	r2, #128	; 0x80
 8006804:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	bc80      	pop	{r7}
 800683a:	4770      	bx	lr

0800683c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800684a:	b29b      	uxth	r3, r3
 800684c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006870:	b480      	push	{r7}
 8006872:	b08d      	sub	sp, #52	; 0x34
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	80fb      	strh	r3, [r7, #6]
 8006882:	4613      	mov	r3, r2
 8006884:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006886:	88bb      	ldrh	r3, [r7, #4]
 8006888:	3301      	adds	r3, #1
 800688a:	085b      	lsrs	r3, r3, #1
 800688c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	005a      	lsls	r2, r3, #1
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a8:	e01e      	b.n	80068e8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	3301      	adds	r3, #1
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	b29b      	uxth	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	3302      	adds	r3, #2
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	3302      	adds	r3, #2
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	3301      	adds	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	3b01      	subs	r3, #1
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1dd      	bne.n	80068aa <USB_WritePMA+0x3a>
  }
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	3734      	adds	r7, #52	; 0x34
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr

080068fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b08b      	sub	sp, #44	; 0x2c
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	4611      	mov	r1, r2
 8006906:	461a      	mov	r2, r3
 8006908:	460b      	mov	r3, r1
 800690a:	80fb      	strh	r3, [r7, #6]
 800690c:	4613      	mov	r3, r2
 800690e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006910:	88bb      	ldrh	r3, [r7, #4]
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	b29b      	uxth	r3, r3
 8006916:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	005a      	lsls	r2, r3, #1
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
 8006932:	e01b      	b.n	800696c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	3302      	adds	r3, #2
 8006940:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	b2da      	uxtb	r2, r3
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	3301      	adds	r3, #1
 800695e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	3302      	adds	r3, #2
 8006964:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	3b01      	subs	r3, #1
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e0      	bne.n	8006934 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006972:	88bb      	ldrh	r3, [r7, #4]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d007      	beq.n	800698e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	701a      	strb	r2, [r3, #0]
  }
}
 800698e:	bf00      	nop
 8006990:	372c      	adds	r7, #44	; 0x2c
 8006992:	46bd      	mov	sp, r7
 8006994:	bc80      	pop	{r7}
 8006996:	4770      	bx	lr

08006998 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80069a4:	2304      	movs	r3, #4
 80069a6:	2203      	movs	r2, #3
 80069a8:	2181      	movs	r1, #129	; 0x81
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fc61 	bl	8008272 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80069b6:	2010      	movs	r0, #16
 80069b8:	f001 fd70 	bl	800849c <USBD_static_malloc>
 80069bc:	4602      	mov	r2, r0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80069ce:	2302      	movs	r3, #2
 80069d0:	e005      	b.n	80069de <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d8:	2200      	movs	r2, #0
 80069da:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80069f2:	2181      	movs	r1, #129	; 0x81
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fc62 	bl	80082be <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 fd4f 	bl	80084b4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a38:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d045      	beq.n	8006ae2 <USBD_HID_Setup+0xba>
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	f040 80d3 	bne.w	8006c02 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	3b02      	subs	r3, #2
 8006a62:	2b09      	cmp	r3, #9
 8006a64:	d835      	bhi.n	8006ad2 <USBD_HID_Setup+0xaa>
 8006a66:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <USBD_HID_Setup+0x44>)
 8006a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6c:	08006ac3 	.word	0x08006ac3
 8006a70:	08006aa3 	.word	0x08006aa3
 8006a74:	08006ad3 	.word	0x08006ad3
 8006a78:	08006ad3 	.word	0x08006ad3
 8006a7c:	08006ad3 	.word	0x08006ad3
 8006a80:	08006ad3 	.word	0x08006ad3
 8006a84:	08006ad3 	.word	0x08006ad3
 8006a88:	08006ad3 	.word	0x08006ad3
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006a95 	.word	0x08006a95
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	885b      	ldrh	r3, [r3, #2]
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	601a      	str	r2, [r3, #0]
          break;
 8006aa0:	e01e      	b.n	8006ae0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 f922 	bl	8007cf2 <USBD_CtlSendData>
          break;
 8006aae:	e017      	b.n	8006ae0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	885b      	ldrh	r3, [r3, #2]
 8006ab4:	0a1b      	lsrs	r3, r3, #8
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]
          break;
 8006ac0:	e00e      	b.n	8006ae0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f911 	bl	8007cf2 <USBD_CtlSendData>
          break;
 8006ad0:	e006      	b.n	8006ae0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f8a2 	bl	8007c1e <USBD_CtlError>
          ret = USBD_FAIL;
 8006ada:	2302      	movs	r3, #2
 8006adc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ade:	bf00      	nop
      }
      break;
 8006ae0:	e096      	b.n	8006c10 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	785b      	ldrb	r3, [r3, #1]
 8006ae6:	2b0b      	cmp	r3, #11
 8006ae8:	f200 8083 	bhi.w	8006bf2 <USBD_HID_Setup+0x1ca>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <USBD_HID_Setup+0xcc>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b25 	.word	0x08006b25
 8006af8:	08006bf3 	.word	0x08006bf3
 8006afc:	08006bf3 	.word	0x08006bf3
 8006b00:	08006bf3 	.word	0x08006bf3
 8006b04:	08006bf3 	.word	0x08006bf3
 8006b08:	08006bf3 	.word	0x08006bf3
 8006b0c:	08006b4d 	.word	0x08006b4d
 8006b10:	08006bf3 	.word	0x08006bf3
 8006b14:	08006bf3 	.word	0x08006bf3
 8006b18:	08006bf3 	.word	0x08006bf3
 8006b1c:	08006ba5 	.word	0x08006ba5
 8006b20:	08006bcd 	.word	0x08006bcd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d107      	bne.n	8006b3e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b2e:	f107 030e 	add.w	r3, r7, #14
 8006b32:	2202      	movs	r2, #2
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 f8db 	bl	8007cf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b3c:	e060      	b.n	8006c00 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f86c 	bl	8007c1e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b46:	2302      	movs	r3, #2
 8006b48:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4a:	e059      	b.n	8006c00 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	885b      	ldrh	r3, [r3, #2]
 8006b50:	0a1b      	lsrs	r3, r3, #8
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b22      	cmp	r3, #34	; 0x22
 8006b56:	d108      	bne.n	8006b6a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	88db      	ldrh	r3, [r3, #6]
 8006b5c:	2b4a      	cmp	r3, #74	; 0x4a
 8006b5e:	bf28      	it	cs
 8006b60:	234a      	movcs	r3, #74	; 0x4a
 8006b62:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006b64:	4b2d      	ldr	r3, [pc, #180]	; (8006c1c <USBD_HID_Setup+0x1f4>)
 8006b66:	61bb      	str	r3, [r7, #24]
 8006b68:	e015      	b.n	8006b96 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	885b      	ldrh	r3, [r3, #2]
 8006b6e:	0a1b      	lsrs	r3, r3, #8
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b21      	cmp	r3, #33	; 0x21
 8006b74:	d108      	bne.n	8006b88 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006b76:	4b2a      	ldr	r3, [pc, #168]	; (8006c20 <USBD_HID_Setup+0x1f8>)
 8006b78:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	88db      	ldrh	r3, [r3, #6]
 8006b7e:	2b09      	cmp	r3, #9
 8006b80:	bf28      	it	cs
 8006b82:	2309      	movcs	r3, #9
 8006b84:	83fb      	strh	r3, [r7, #30]
 8006b86:	e006      	b.n	8006b96 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 f847 	bl	8007c1e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b90:	2302      	movs	r3, #2
 8006b92:	75fb      	strb	r3, [r7, #23]
            break;
 8006b94:	e034      	b.n	8006c00 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006b96:	8bfb      	ldrh	r3, [r7, #30]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 f8a8 	bl	8007cf2 <USBD_CtlSendData>
          break;
 8006ba2:	e02d      	b.n	8006c00 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d107      	bne.n	8006bbe <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 f89b 	bl	8007cf2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bbc:	e020      	b.n	8006c00 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f82c 	bl	8007c1e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bca:	e019      	b.n	8006c00 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d106      	bne.n	8006be4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006be2:	e00d      	b.n	8006c00 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 f819 	bl	8007c1e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bec:	2302      	movs	r3, #2
 8006bee:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf0:	e006      	b.n	8006c00 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f812 	bl	8007c1e <USBD_CtlError>
          ret = USBD_FAIL;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	75fb      	strb	r3, [r7, #23]
          break;
 8006bfe:	bf00      	nop
      }
      break;
 8006c00:	e006      	b.n	8006c10 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 f80a 	bl	8007c1e <USBD_CtlError>
      ret = USBD_FAIL;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0e:	bf00      	nop
  }

  return ret;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	200000c8 	.word	0x200000c8
 8006c20:	200000b0 	.word	0x200000b0

08006c24 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2222      	movs	r2, #34	; 0x22
 8006c30:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006c32:	4b03      	ldr	r3, [pc, #12]	; (8006c40 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000044 	.word	0x20000044

08006c44 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2222      	movs	r2, #34	; 0x22
 8006c50:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006c52:	4b03      	ldr	r3, [pc, #12]	; (8006c60 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	20000068 	.word	0x20000068

08006c64 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2222      	movs	r2, #34	; 0x22
 8006c70:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006c72:	4b03      	ldr	r3, [pc, #12]	; (8006c80 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	2000008c 	.word	0x2000008c

08006c84 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c96:	2200      	movs	r2, #0
 8006c98:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bc80      	pop	{r7}
 8006ca4:	4770      	bx	lr
	...

08006ca8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	220a      	movs	r2, #10
 8006cb4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006cb6:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	200000bc 	.word	0x200000bc

08006cc8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e01a      	b.n	8006d16 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	79fa      	ldrb	r2, [r7, #7]
 8006d0c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f001 fa4c 	bl	80081ac <USBD_LL_Init>

  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
 8006d3e:	e001      	b.n	8006d44 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bc80      	pop	{r7}
 8006d4e:	4770      	bx	lr

08006d50 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fa6f 	bl	800823c <USBD_LL_Start>

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00c      	beq.n	8006db0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	4611      	mov	r1, r2
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	4798      	blx	r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3

  return USBD_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fed7 	bl	8007ba6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e06:	461a      	mov	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d016      	beq.n	8006e4a <USBD_LL_SetupStage+0x6a>
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d81c      	bhi.n	8006e5a <USBD_LL_SetupStage+0x7a>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <USBD_LL_SetupStage+0x4a>
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d008      	beq.n	8006e3a <USBD_LL_SetupStage+0x5a>
 8006e28:	e017      	b.n	8006e5a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9ca 	bl	80071cc <USBD_StdDevReq>
      break;
 8006e38:	e01a      	b.n	8006e70 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa2c 	bl	80072a0 <USBD_StdItfReq>
      break;
 8006e48:	e012      	b.n	8006e70 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa6c 	bl	8007330 <USBD_StdEPReq>
      break;
 8006e58:	e00a      	b.n	8006e70 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 fa47 	bl	80082fc <USBD_LL_StallEP>
      break;
 8006e6e:	bf00      	nop
  }

  return USBD_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b086      	sub	sp, #24
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	60f8      	str	r0, [r7, #12]
 8006e82:	460b      	mov	r3, r1
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e88:	7afb      	ldrb	r3, [r7, #11]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d14b      	bne.n	8006f26 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d134      	bne.n	8006f0a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d919      	bls.n	8006ee0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	1ad2      	subs	r2, r2, r3
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d203      	bcs.n	8006ece <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	e002      	b.n	8006ed4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 ff38 	bl	8007d4e <USBD_CtlContinueRx>
 8006ede:	e038      	b.n	8006f52 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d105      	bne.n	8006f02 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 ff35 	bl	8007d72 <USBD_CtlSendStatus>
 8006f08:	e023      	b.n	8006f52 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f10:	2b05      	cmp	r3, #5
 8006f12:	d11e      	bne.n	8006f52 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f001 f9ec 	bl	80082fc <USBD_LL_StallEP>
 8006f24:	e015      	b.n	8006f52 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00d      	beq.n	8006f4e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d108      	bne.n	8006f4e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	7afa      	ldrb	r2, [r7, #11]
 8006f46:	4611      	mov	r1, r2
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	4798      	blx	r3
 8006f4c:	e001      	b.n	8006f52 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e000      	b.n	8006f54 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	460b      	mov	r3, r1
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f6a:	7afb      	ldrb	r3, [r7, #11]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d17f      	bne.n	8007070 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3314      	adds	r3, #20
 8006f74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d15c      	bne.n	800703a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d915      	bls.n	8006fb8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	1ad2      	subs	r2, r2, r3
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fec0 	bl	8007d2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006faa:	2300      	movs	r3, #0
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f001 fa4f 	bl	8008454 <USBD_LL_PrepareReceive>
 8006fb6:	e04e      	b.n	8007056 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	6912      	ldr	r2, [r2, #16]
 8006fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fc4:	fb01 f202 	mul.w	r2, r1, r2
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d11c      	bne.n	8007008 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d316      	bcc.n	8007008 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d20f      	bcs.n	8007008 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2100      	movs	r1, #0
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fe9c 	bl	8007d2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2100      	movs	r1, #0
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f001 fa27 	bl	8008454 <USBD_LL_PrepareReceive>
 8007006:	e026      	b.n	8007056 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800701a:	2b03      	cmp	r3, #3
 800701c:	d105      	bne.n	800702a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f001 f965 	bl	80082fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 feb0 	bl	8007d98 <USBD_CtlReceiveStatus>
 8007038:	e00d      	b.n	8007056 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007040:	2b04      	cmp	r3, #4
 8007042:	d004      	beq.n	800704e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800704e:	2180      	movs	r1, #128	; 0x80
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f001 f953 	bl	80082fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800705c:	2b01      	cmp	r3, #1
 800705e:	d11d      	bne.n	800709c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f7ff fe81 	bl	8006d68 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800706e:	e015      	b.n	800709c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007082:	2b03      	cmp	r3, #3
 8007084:	d108      	bne.n	8007098 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	7afa      	ldrb	r2, [r7, #11]
 8007090:	4611      	mov	r1, r2
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	4798      	blx	r3
 8007096:	e001      	b.n	800709c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007098:	2302      	movs	r3, #2
 800709a:	e000      	b.n	800709e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ae:	2340      	movs	r3, #64	; 0x40
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f8dc 	bl	8008272 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2240      	movs	r2, #64	; 0x40
 80070c6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ca:	2340      	movs	r3, #64	; 0x40
 80070cc:	2200      	movs	r2, #0
 80070ce:	2180      	movs	r1, #128	; 0x80
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f8ce 	bl	8008272 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2240      	movs	r2, #64	; 0x40
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6852      	ldr	r2, [r2, #4]
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	4611      	mov	r1, r2
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
  }

  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	78fa      	ldrb	r2, [r7, #3]
 8007138:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2204      	movs	r2, #4
 800715e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr

0800716e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	2b04      	cmp	r3, #4
 800717e:	d105      	bne.n	800718c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	bc80      	pop	{r7}
 8007196:	4770      	bx	lr

08007198 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d10b      	bne.n	80071c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d005      	beq.n	80071f2 <USBD_StdDevReq+0x26>
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	d84f      	bhi.n	800728a <USBD_StdDevReq+0xbe>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <USBD_StdDevReq+0x36>
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d14b      	bne.n	800728a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	4798      	blx	r3
      break;
 8007200:	e048      	b.n	8007294 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b09      	cmp	r3, #9
 8007208:	d839      	bhi.n	800727e <USBD_StdDevReq+0xb2>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <USBD_StdDevReq+0x44>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007261 	.word	0x08007261
 8007214:	08007275 	.word	0x08007275
 8007218:	0800727f 	.word	0x0800727f
 800721c:	0800726b 	.word	0x0800726b
 8007220:	0800727f 	.word	0x0800727f
 8007224:	08007243 	.word	0x08007243
 8007228:	08007239 	.word	0x08007239
 800722c:	0800727f 	.word	0x0800727f
 8007230:	08007257 	.word	0x08007257
 8007234:	0800724d 	.word	0x0800724d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007238:	6839      	ldr	r1, [r7, #0]
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f9dc 	bl	80075f8 <USBD_GetDescriptor>
          break;
 8007240:	e022      	b.n	8007288 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fb3f 	bl	80078c8 <USBD_SetAddress>
          break;
 800724a:	e01d      	b.n	8007288 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fb7e 	bl	8007950 <USBD_SetConfig>
          break;
 8007254:	e018      	b.n	8007288 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fc07 	bl	8007a6c <USBD_GetConfig>
          break;
 800725e:	e013      	b.n	8007288 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fc37 	bl	8007ad6 <USBD_GetStatus>
          break;
 8007268:	e00e      	b.n	8007288 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc65 	bl	8007b3c <USBD_SetFeature>
          break;
 8007272:	e009      	b.n	8007288 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fc74 	bl	8007b64 <USBD_ClrFeature>
          break;
 800727c:	e004      	b.n	8007288 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fccc 	bl	8007c1e <USBD_CtlError>
          break;
 8007286:	bf00      	nop
      }
      break;
 8007288:	e004      	b.n	8007294 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fcc6 	bl	8007c1e <USBD_CtlError>
      break;
 8007292:	bf00      	nop
  }

  return ret;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop

080072a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072b6:	2b40      	cmp	r3, #64	; 0x40
 80072b8:	d005      	beq.n	80072c6 <USBD_StdItfReq+0x26>
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d82e      	bhi.n	800731c <USBD_StdItfReq+0x7c>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <USBD_StdItfReq+0x26>
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	d12a      	bne.n	800731c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072cc:	3b01      	subs	r3, #1
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d81d      	bhi.n	800730e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	889b      	ldrh	r3, [r3, #4]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d813      	bhi.n	8007304 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
 80072ea:	4603      	mov	r3, r0
 80072ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	88db      	ldrh	r3, [r3, #6]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d110      	bne.n	8007318 <USBD_StdItfReq+0x78>
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fd38 	bl	8007d72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007302:	e009      	b.n	8007318 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fc89 	bl	8007c1e <USBD_CtlError>
          break;
 800730c:	e004      	b.n	8007318 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc84 	bl	8007c1e <USBD_CtlError>
          break;
 8007316:	e000      	b.n	800731a <USBD_StdItfReq+0x7a>
          break;
 8007318:	bf00      	nop
      }
      break;
 800731a:	e004      	b.n	8007326 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fc7d 	bl	8007c1e <USBD_CtlError>
      break;
 8007324:	bf00      	nop
  }

  return USBD_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	889b      	ldrh	r3, [r3, #4]
 8007342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d007      	beq.n	8007360 <USBD_StdEPReq+0x30>
 8007350:	2b40      	cmp	r3, #64	; 0x40
 8007352:	f200 8146 	bhi.w	80075e2 <USBD_StdEPReq+0x2b2>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <USBD_StdEPReq+0x40>
 800735a:	2b20      	cmp	r3, #32
 800735c:	f040 8141 	bne.w	80075e2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	4798      	blx	r3
      break;
 800736e:	e13d      	b.n	80075ec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007378:	2b20      	cmp	r3, #32
 800737a:	d10a      	bne.n	8007392 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	e12d      	b.n	80075ee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b03      	cmp	r3, #3
 8007398:	d007      	beq.n	80073aa <USBD_StdEPReq+0x7a>
 800739a:	2b03      	cmp	r3, #3
 800739c:	f300 811b 	bgt.w	80075d6 <USBD_StdEPReq+0x2a6>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d072      	beq.n	800748a <USBD_StdEPReq+0x15a>
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d03a      	beq.n	800741e <USBD_StdEPReq+0xee>
 80073a8:	e115      	b.n	80075d6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d002      	beq.n	80073ba <USBD_StdEPReq+0x8a>
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d015      	beq.n	80073e4 <USBD_StdEPReq+0xb4>
 80073b8:	e02b      	b.n	8007412 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <USBD_StdEPReq+0xaa>
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b80      	cmp	r3, #128	; 0x80
 80073c4:	d009      	beq.n	80073da <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 ff96 	bl	80082fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073d0:	2180      	movs	r1, #128	; 0x80
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 ff92 	bl	80082fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073d8:	e020      	b.n	800741c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fc1e 	bl	8007c1e <USBD_CtlError>
              break;
 80073e2:	e01b      	b.n	800741c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	885b      	ldrh	r3, [r3, #2]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10e      	bne.n	800740a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <USBD_StdEPReq+0xda>
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b80      	cmp	r3, #128	; 0x80
 80073f6:	d008      	beq.n	800740a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	88db      	ldrh	r3, [r3, #6]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007400:	7bbb      	ldrb	r3, [r7, #14]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 ff79 	bl	80082fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fcb1 	bl	8007d72 <USBD_CtlSendStatus>

              break;
 8007410:	e004      	b.n	800741c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fc02 	bl	8007c1e <USBD_CtlError>
              break;
 800741a:	bf00      	nop
          }
          break;
 800741c:	e0e0      	b.n	80075e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007424:	2b02      	cmp	r3, #2
 8007426:	d002      	beq.n	800742e <USBD_StdEPReq+0xfe>
 8007428:	2b03      	cmp	r3, #3
 800742a:	d015      	beq.n	8007458 <USBD_StdEPReq+0x128>
 800742c:	e026      	b.n	800747c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <USBD_StdEPReq+0x11e>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d009      	beq.n	800744e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 ff5c 	bl	80082fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007444:	2180      	movs	r1, #128	; 0x80
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 ff58 	bl	80082fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800744c:	e01c      	b.n	8007488 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fbe4 	bl	8007c1e <USBD_CtlError>
              break;
 8007456:	e017      	b.n	8007488 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	885b      	ldrh	r3, [r3, #2]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d112      	bne.n	8007486 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007466:	2b00      	cmp	r3, #0
 8007468:	d004      	beq.n	8007474 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 ff63 	bl	800833a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc7c 	bl	8007d72 <USBD_CtlSendStatus>
              }
              break;
 800747a:	e004      	b.n	8007486 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fbcd 	bl	8007c1e <USBD_CtlError>
              break;
 8007484:	e000      	b.n	8007488 <USBD_StdEPReq+0x158>
              break;
 8007486:	bf00      	nop
          }
          break;
 8007488:	e0aa      	b.n	80075e0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007490:	2b02      	cmp	r3, #2
 8007492:	d002      	beq.n	800749a <USBD_StdEPReq+0x16a>
 8007494:	2b03      	cmp	r3, #3
 8007496:	d032      	beq.n	80074fe <USBD_StdEPReq+0x1ce>
 8007498:	e097      	b.n	80075ca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <USBD_StdEPReq+0x180>
 80074a0:	7bbb      	ldrb	r3, [r7, #14]
 80074a2:	2b80      	cmp	r3, #128	; 0x80
 80074a4:	d004      	beq.n	80074b0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fbb8 	bl	8007c1e <USBD_CtlError>
                break;
 80074ae:	e091      	b.n	80075d4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	da0b      	bge.n	80074d0 <USBD_StdEPReq+0x1a0>
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	3310      	adds	r3, #16
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4413      	add	r3, r2
 80074cc:	3304      	adds	r3, #4
 80074ce:	e00b      	b.n	80074e8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2202      	movs	r2, #2
 80074f4:	4619      	mov	r1, r3
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fbfb 	bl	8007cf2 <USBD_CtlSendData>
              break;
 80074fc:	e06a      	b.n	80075d4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007502:	2b00      	cmp	r3, #0
 8007504:	da11      	bge.n	800752a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	f003 020f 	and.w	r2, r3, #15
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	3318      	adds	r3, #24
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d117      	bne.n	8007550 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fb7b 	bl	8007c1e <USBD_CtlError>
                  break;
 8007528:	e054      	b.n	80075d4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	f003 020f 	and.w	r2, r3, #15
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d104      	bne.n	8007550 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb68 	bl	8007c1e <USBD_CtlError>
                  break;
 800754e:	e041      	b.n	80075d4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007554:	2b00      	cmp	r3, #0
 8007556:	da0b      	bge.n	8007570 <USBD_StdEPReq+0x240>
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	3310      	adds	r3, #16
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	3304      	adds	r3, #4
 800756e:	e00b      	b.n	8007588 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007576:	4613      	mov	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	4413      	add	r3, r2
 8007586:	3304      	adds	r3, #4
 8007588:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <USBD_StdEPReq+0x266>
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d103      	bne.n	800759e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e00e      	b.n	80075bc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fee8 	bl	8008378 <USBD_LL_IsStallEP>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e002      	b.n	80075bc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2202      	movs	r2, #2
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb95 	bl	8007cf2 <USBD_CtlSendData>
              break;
 80075c8:	e004      	b.n	80075d4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fb26 	bl	8007c1e <USBD_CtlError>
              break;
 80075d2:	bf00      	nop
          }
          break;
 80075d4:	e004      	b.n	80075e0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fb20 	bl	8007c1e <USBD_CtlError>
          break;
 80075de:	bf00      	nop
      }
      break;
 80075e0:	e004      	b.n	80075ec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fb1a 	bl	8007c1e <USBD_CtlError>
      break;
 80075ea:	bf00      	nop
  }

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	885b      	ldrh	r3, [r3, #2]
 8007612:	0a1b      	lsrs	r3, r3, #8
 8007614:	b29b      	uxth	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	2b06      	cmp	r3, #6
 800761a:	f200 8128 	bhi.w	800786e <USBD_GetDescriptor+0x276>
 800761e:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <USBD_GetDescriptor+0x2c>)
 8007620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007624:	08007641 	.word	0x08007641
 8007628:	08007659 	.word	0x08007659
 800762c:	08007699 	.word	0x08007699
 8007630:	0800786f 	.word	0x0800786f
 8007634:	0800786f 	.word	0x0800786f
 8007638:	0800780f 	.word	0x0800780f
 800763c:	0800783b 	.word	0x0800783b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	7c12      	ldrb	r2, [r2, #16]
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	60f8      	str	r0, [r7, #12]
      break;
 8007656:	e112      	b.n	800787e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	7c1b      	ldrb	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10d      	bne.n	800767c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	f107 0208 	add.w	r2, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	2202      	movs	r2, #2
 8007678:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800767a:	e100      	b.n	800787e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	f107 0208 	add.w	r2, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	3301      	adds	r3, #1
 8007692:	2202      	movs	r2, #2
 8007694:	701a      	strb	r2, [r3, #0]
      break;
 8007696:	e0f2      	b.n	800787e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	885b      	ldrh	r3, [r3, #2]
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b05      	cmp	r3, #5
 80076a0:	f200 80ac 	bhi.w	80077fc <USBD_GetDescriptor+0x204>
 80076a4:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <USBD_GetDescriptor+0xb4>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076c5 	.word	0x080076c5
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	08007761 	.word	0x08007761
 80076bc:	08007795 	.word	0x08007795
 80076c0:	080077c9 	.word	0x080077c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e6:	e091      	b.n	800780c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa97 	bl	8007c1e <USBD_CtlError>
            err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
          break;
 80076f6:	e089      	b.n	800780c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	7c12      	ldrb	r2, [r2, #16]
 8007710:	f107 0108 	add.w	r1, r7, #8
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771a:	e077      	b.n	800780c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa7d 	bl	8007c1e <USBD_CtlError>
            err++;
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	3301      	adds	r3, #1
 8007728:	72fb      	strb	r3, [r7, #11]
          break;
 800772a:	e06f      	b.n	800780c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	7c12      	ldrb	r2, [r2, #16]
 8007744:	f107 0108 	add.w	r1, r7, #8
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774e:	e05d      	b.n	800780c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa63 	bl	8007c1e <USBD_CtlError>
            err++;
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	3301      	adds	r3, #1
 800775c:	72fb      	strb	r3, [r7, #11]
          break;
 800775e:	e055      	b.n	800780c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	7c12      	ldrb	r2, [r2, #16]
 8007778:	f107 0108 	add.w	r1, r7, #8
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007782:	e043      	b.n	800780c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fa49 	bl	8007c1e <USBD_CtlError>
            err++;
 800778c:	7afb      	ldrb	r3, [r7, #11]
 800778e:	3301      	adds	r3, #1
 8007790:	72fb      	strb	r3, [r7, #11]
          break;
 8007792:	e03b      	b.n	800780c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00b      	beq.n	80077b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a6:	695b      	ldr	r3, [r3, #20]
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7c12      	ldrb	r2, [r2, #16]
 80077ac:	f107 0108 	add.w	r1, r7, #8
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b6:	e029      	b.n	800780c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa2f 	bl	8007c1e <USBD_CtlError>
            err++;
 80077c0:	7afb      	ldrb	r3, [r7, #11]
 80077c2:	3301      	adds	r3, #1
 80077c4:	72fb      	strb	r3, [r7, #11]
          break;
 80077c6:	e021      	b.n	800780c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	7c12      	ldrb	r2, [r2, #16]
 80077e0:	f107 0108 	add.w	r1, r7, #8
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ea:	e00f      	b.n	800780c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa15 	bl	8007c1e <USBD_CtlError>
            err++;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3301      	adds	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]
          break;
 80077fa:	e007      	b.n	800780c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa0d 	bl	8007c1e <USBD_CtlError>
          err++;
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	3301      	adds	r3, #1
 8007808:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800780a:	e038      	b.n	800787e <USBD_GetDescriptor+0x286>
 800780c:	e037      	b.n	800787e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	7c1b      	ldrb	r3, [r3, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	f107 0208 	add.w	r2, r7, #8
 8007822:	4610      	mov	r0, r2
 8007824:	4798      	blx	r3
 8007826:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007828:	e029      	b.n	800787e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f9f6 	bl	8007c1e <USBD_CtlError>
        err++;
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	3301      	adds	r3, #1
 8007836:	72fb      	strb	r3, [r7, #11]
      break;
 8007838:	e021      	b.n	800787e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	7c1b      	ldrb	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10d      	bne.n	800785e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f107 0208 	add.w	r2, r7, #8
 800784e:	4610      	mov	r0, r2
 8007850:	4798      	blx	r3
 8007852:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	2207      	movs	r2, #7
 800785a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800785c:	e00f      	b.n	800787e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9dc 	bl	8007c1e <USBD_CtlError>
        err++;
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	3301      	adds	r3, #1
 800786a:	72fb      	strb	r3, [r7, #11]
      break;
 800786c:	e007      	b.n	800787e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f9d4 	bl	8007c1e <USBD_CtlError>
      err++;
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	3301      	adds	r3, #1
 800787a:	72fb      	strb	r3, [r7, #11]
      break;
 800787c:	bf00      	nop
  }

  if (err != 0U)
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d11c      	bne.n	80078be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007884:	893b      	ldrh	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d011      	beq.n	80078ae <USBD_GetDescriptor+0x2b6>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	88db      	ldrh	r3, [r3, #6]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00d      	beq.n	80078ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	88da      	ldrh	r2, [r3, #6]
 8007896:	893b      	ldrh	r3, [r7, #8]
 8007898:	4293      	cmp	r3, r2
 800789a:	bf28      	it	cs
 800789c:	4613      	movcs	r3, r2
 800789e:	b29b      	uxth	r3, r3
 80078a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078a2:	893b      	ldrh	r3, [r7, #8]
 80078a4:	461a      	mov	r2, r3
 80078a6:	68f9      	ldr	r1, [r7, #12]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fa22 	bl	8007cf2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88db      	ldrh	r3, [r3, #6]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d104      	bne.n	80078c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa5b 	bl	8007d72 <USBD_CtlSendStatus>
 80078bc:	e000      	b.n	80078c0 <USBD_GetDescriptor+0x2c8>
    return;
 80078be:	bf00      	nop
    }
  }
}
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop

080078c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	889b      	ldrh	r3, [r3, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d130      	bne.n	800793c <USBD_SetAddress+0x74>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88db      	ldrh	r3, [r3, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d12c      	bne.n	800793c <USBD_SetAddress+0x74>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	2b7f      	cmp	r3, #127	; 0x7f
 80078e8:	d828      	bhi.n	800793c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d104      	bne.n	800790a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f98b 	bl	8007c1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007908:	e01d      	b.n	8007946 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7bfa      	ldrb	r2, [r7, #15]
 800790e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fd5a 	bl	80083d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa28 	bl	8007d72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d004      	beq.n	8007932 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2202      	movs	r2, #2
 800792c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007930:	e009      	b.n	8007946 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793a:	e004      	b.n	8007946 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f96d 	bl	8007c1e <USBD_CtlError>
  }
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	b2da      	uxtb	r2, r3
 8007960:	4b41      	ldr	r3, [pc, #260]	; (8007a68 <USBD_SetConfig+0x118>)
 8007962:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007964:	4b40      	ldr	r3, [pc, #256]	; (8007a68 <USBD_SetConfig+0x118>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d904      	bls.n	8007976 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f955 	bl	8007c1e <USBD_CtlError>
 8007974:	e075      	b.n	8007a62 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800797c:	2b02      	cmp	r3, #2
 800797e:	d002      	beq.n	8007986 <USBD_SetConfig+0x36>
 8007980:	2b03      	cmp	r3, #3
 8007982:	d023      	beq.n	80079cc <USBD_SetConfig+0x7c>
 8007984:	e062      	b.n	8007a4c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007986:	4b38      	ldr	r3, [pc, #224]	; (8007a68 <USBD_SetConfig+0x118>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d01a      	beq.n	80079c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800798e:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <USBD_SetConfig+0x118>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2203      	movs	r2, #3
 800799c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079a0:	4b31      	ldr	r3, [pc, #196]	; (8007a68 <USBD_SetConfig+0x118>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff f9e8 	bl	8006d7c <USBD_SetClassConfig>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d104      	bne.n	80079bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80079b2:	6839      	ldr	r1, [r7, #0]
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f932 	bl	8007c1e <USBD_CtlError>
            return;
 80079ba:	e052      	b.n	8007a62 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f9d8 	bl	8007d72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079c2:	e04e      	b.n	8007a62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f9d4 	bl	8007d72 <USBD_CtlSendStatus>
        break;
 80079ca:	e04a      	b.n	8007a62 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079cc:	4b26      	ldr	r3, [pc, #152]	; (8007a68 <USBD_SetConfig+0x118>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d112      	bne.n	80079fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079dc:	4b22      	ldr	r3, [pc, #136]	; (8007a68 <USBD_SetConfig+0x118>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	461a      	mov	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079e6:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <USBD_SetConfig+0x118>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff f9e4 	bl	8006dba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9bd 	bl	8007d72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079f8:	e033      	b.n	8007a62 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079fa:	4b1b      	ldr	r3, [pc, #108]	; (8007a68 <USBD_SetConfig+0x118>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d01d      	beq.n	8007a44 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff f9d2 	bl	8006dba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <USBD_SetConfig+0x118>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a20:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <USBD_SetConfig+0x118>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7ff f9a8 	bl	8006d7c <USBD_SetClassConfig>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d104      	bne.n	8007a3c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f8f2 	bl	8007c1e <USBD_CtlError>
            return;
 8007a3a:	e012      	b.n	8007a62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f998 	bl	8007d72 <USBD_CtlSendStatus>
        break;
 8007a42:	e00e      	b.n	8007a62 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f994 	bl	8007d72 <USBD_CtlSendStatus>
        break;
 8007a4a:	e00a      	b.n	8007a62 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f8e5 	bl	8007c1e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <USBD_SetConfig+0x118>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7ff f9ad 	bl	8006dba <USBD_ClrClassConfig>
        break;
 8007a60:	bf00      	nop
    }
  }
}
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	200002dc 	.word	0x200002dc

08007a6c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	88db      	ldrh	r3, [r3, #6]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d004      	beq.n	8007a88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f8cc 	bl	8007c1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a86:	e022      	b.n	8007ace <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	dc02      	bgt.n	8007a98 <USBD_GetConfig+0x2c>
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dc03      	bgt.n	8007a9e <USBD_GetConfig+0x32>
 8007a96:	e015      	b.n	8007ac4 <USBD_GetConfig+0x58>
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d00b      	beq.n	8007ab4 <USBD_GetConfig+0x48>
 8007a9c:	e012      	b.n	8007ac4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f920 	bl	8007cf2 <USBD_CtlSendData>
        break;
 8007ab2:	e00c      	b.n	8007ace <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	2201      	movs	r2, #1
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f918 	bl	8007cf2 <USBD_CtlSendData>
        break;
 8007ac2:	e004      	b.n	8007ace <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f8a9 	bl	8007c1e <USBD_CtlError>
        break;
 8007acc:	bf00      	nop
}
 8007ace:	bf00      	nop
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d81e      	bhi.n	8007b2a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	88db      	ldrh	r3, [r3, #6]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d004      	beq.n	8007afe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f891 	bl	8007c1e <USBD_CtlError>
        break;
 8007afc:	e01a      	b.n	8007b34 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f043 0202 	orr.w	r2, r3, #2
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	2202      	movs	r2, #2
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f8e5 	bl	8007cf2 <USBD_CtlSendData>
      break;
 8007b28:	e004      	b.n	8007b34 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f876 	bl	8007c1e <USBD_CtlError>
      break;
 8007b32:	bf00      	nop
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d106      	bne.n	8007b5c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f90b 	bl	8007d72 <USBD_CtlSendStatus>
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b74:	3b01      	subs	r3, #1
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d80b      	bhi.n	8007b92 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	885b      	ldrh	r3, [r3, #2]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d10c      	bne.n	8007b9c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f8f1 	bl	8007d72 <USBD_CtlSendStatus>
      }
      break;
 8007b90:	e004      	b.n	8007b9c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f842 	bl	8007c1e <USBD_CtlError>
      break;
 8007b9a:	e000      	b.n	8007b9e <USBD_ClrFeature+0x3a>
      break;
 8007b9c:	bf00      	nop
  }
}
 8007b9e:	bf00      	nop
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	785a      	ldrb	r2, [r3, #1]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	3302      	adds	r3, #2
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	3303      	adds	r3, #3
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	021b      	lsls	r3, r3, #8
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	3304      	adds	r3, #4
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	3305      	adds	r3, #5
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	4413      	add	r3, r2
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	3306      	adds	r3, #6
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	3307      	adds	r3, #7
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	021b      	lsls	r3, r3, #8
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	80da      	strh	r2, [r3, #6]

}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bc80      	pop	{r7}
 8007c1c:	4770      	bx	lr

08007c1e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c28:	2180      	movs	r1, #128	; 0x80
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fb66 	bl	80082fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c30:	2100      	movs	r1, #0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fb62 	bl	80082fc <USBD_LL_StallEP>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d032      	beq.n	8007cbc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 f834 	bl	8007cc4 <USBD_GetLen>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	75fa      	strb	r2, [r7, #23]
 8007c70:	461a      	mov	r2, r3
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	4413      	add	r3, r2
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	7812      	ldrb	r2, [r2, #0]
 8007c7a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	75fa      	strb	r2, [r7, #23]
 8007c82:	461a      	mov	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4413      	add	r3, r2
 8007c88:	2203      	movs	r2, #3
 8007c8a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c8c:	e012      	b.n	8007cb4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	60fa      	str	r2, [r7, #12]
 8007c94:	7dfa      	ldrb	r2, [r7, #23]
 8007c96:	1c51      	adds	r1, r2, #1
 8007c98:	75f9      	strb	r1, [r7, #23]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	75fa      	strb	r2, [r7, #23]
 8007caa:	461a      	mov	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4413      	add	r3, r2
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e8      	bne.n	8007c8e <USBD_GetString+0x4e>
    }
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cd0:	e005      	b.n	8007cde <USBD_GetLen+0x1a>
  {
    len++;
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f5      	bne.n	8007cd2 <USBD_GetLen+0xe>
  }

  return len;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc80      	pop	{r7}
 8007cf0:	4770      	bx	lr

08007cf2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fb77 	bl	800840e <USBD_LL_Transmit>

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	60f8      	str	r0, [r7, #12]
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	4613      	mov	r3, r2
 8007d36:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fb65 	bl	800840e <USBD_LL_Transmit>

  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d5c:	88fb      	ldrh	r3, [r7, #6]
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	2100      	movs	r1, #0
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fb76 	bl	8008454 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2204      	movs	r2, #4
 8007d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d82:	2300      	movs	r3, #0
 8007d84:	2200      	movs	r2, #0
 8007d86:	2100      	movs	r1, #0
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fb40 	bl	800840e <USBD_LL_Transmit>

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2205      	movs	r2, #5
 8007da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007da8:	2300      	movs	r3, #0
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fb50 	bl	8008454 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	490e      	ldr	r1, [pc, #56]	; (8007e00 <MX_USB_DEVICE_Init+0x40>)
 8007dc8:	480e      	ldr	r0, [pc, #56]	; (8007e04 <MX_USB_DEVICE_Init+0x44>)
 8007dca:	f7fe ff7d 	bl	8006cc8 <USBD_Init>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007dd4:	f7f8 fb8e 	bl	80004f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007dd8:	490b      	ldr	r1, [pc, #44]	; (8007e08 <MX_USB_DEVICE_Init+0x48>)
 8007dda:	480a      	ldr	r0, [pc, #40]	; (8007e04 <MX_USB_DEVICE_Init+0x44>)
 8007ddc:	f7fe ff9f 	bl	8006d1e <USBD_RegisterClass>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007de6:	f7f8 fb85 	bl	80004f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007dea:	4806      	ldr	r0, [pc, #24]	; (8007e04 <MX_USB_DEVICE_Init+0x44>)
 8007dec:	f7fe ffb0 	bl	8006d50 <USBD_Start>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007df6:	f7f8 fb7d 	bl	80004f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007dfa:	bf00      	nop
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000114 	.word	0x20000114
 8007e04:	200002e0 	.word	0x200002e0
 8007e08:	2000000c 	.word	0x2000000c

08007e0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2212      	movs	r2, #18
 8007e1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e1e:	4b03      	ldr	r3, [pc, #12]	; (8007e2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000130 	.word	0x20000130

08007e30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2204      	movs	r2, #4
 8007e40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e42:	4b03      	ldr	r3, [pc, #12]	; (8007e50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20000144 	.word	0x20000144

08007e54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	6039      	str	r1, [r7, #0]
 8007e5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d105      	bne.n	8007e72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	4907      	ldr	r1, [pc, #28]	; (8007e88 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e6a:	4808      	ldr	r0, [pc, #32]	; (8007e8c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e6c:	f7ff fee8 	bl	8007c40 <USBD_GetString>
 8007e70:	e004      	b.n	8007e7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	4904      	ldr	r1, [pc, #16]	; (8007e88 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e76:	4805      	ldr	r0, [pc, #20]	; (8007e8c <USBD_FS_ProductStrDescriptor+0x38>)
 8007e78:	f7ff fee2 	bl	8007c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	200005a4 	.word	0x200005a4
 8007e8c:	08008ed0 	.word	0x08008ed0

08007e90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	4904      	ldr	r1, [pc, #16]	; (8007eb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ea0:	4804      	ldr	r0, [pc, #16]	; (8007eb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ea2:	f7ff fecd 	bl	8007c40 <USBD_GetString>
  return USBD_StrDesc;
 8007ea6:	4b02      	ldr	r3, [pc, #8]	; (8007eb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	200005a4 	.word	0x200005a4
 8007eb4:	08008ee8 	.word	0x08008ee8

08007eb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	221a      	movs	r2, #26
 8007ec8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007eca:	f000 f843 	bl	8007f54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ece:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000148 	.word	0x20000148

08007edc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d105      	bne.n	8007efa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	4907      	ldr	r1, [pc, #28]	; (8007f10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ef2:	4808      	ldr	r0, [pc, #32]	; (8007f14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ef4:	f7ff fea4 	bl	8007c40 <USBD_GetString>
 8007ef8:	e004      	b.n	8007f04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	4904      	ldr	r1, [pc, #16]	; (8007f10 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007efe:	4805      	ldr	r0, [pc, #20]	; (8007f14 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f00:	f7ff fe9e 	bl	8007c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f04:	4b02      	ldr	r3, [pc, #8]	; (8007f10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	200005a4 	.word	0x200005a4
 8007f14:	08008efc 	.word	0x08008efc

08007f18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f24:	79fb      	ldrb	r3, [r7, #7]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	4907      	ldr	r1, [pc, #28]	; (8007f4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f2e:	4808      	ldr	r0, [pc, #32]	; (8007f50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f30:	f7ff fe86 	bl	8007c40 <USBD_GetString>
 8007f34:	e004      	b.n	8007f40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f36:	683a      	ldr	r2, [r7, #0]
 8007f38:	4904      	ldr	r1, [pc, #16]	; (8007f4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f3a:	4805      	ldr	r0, [pc, #20]	; (8007f50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f3c:	f7ff fe80 	bl	8007c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f40:	4b02      	ldr	r3, [pc, #8]	; (8007f4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	200005a4 	.word	0x200005a4
 8007f50:	08008f08 	.word	0x08008f08

08007f54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f5a:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <Get_SerialNum+0x44>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f60:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <Get_SerialNum+0x48>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f66:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <Get_SerialNum+0x4c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4413      	add	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d009      	beq.n	8007f8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	4909      	ldr	r1, [pc, #36]	; (8007fa4 <Get_SerialNum+0x50>)
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f814 	bl	8007fac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f84:	2204      	movs	r2, #4
 8007f86:	4908      	ldr	r1, [pc, #32]	; (8007fa8 <Get_SerialNum+0x54>)
 8007f88:	68b8      	ldr	r0, [r7, #8]
 8007f8a:	f000 f80f 	bl	8007fac <IntToUnicode>
  }
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	1ffff7e8 	.word	0x1ffff7e8
 8007f9c:	1ffff7ec 	.word	0x1ffff7ec
 8007fa0:	1ffff7f0 	.word	0x1ffff7f0
 8007fa4:	2000014a 	.word	0x2000014a
 8007fa8:	2000015a 	.word	0x2000015a

08007fac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75fb      	strb	r3, [r7, #23]
 8007fc2:	e027      	b.n	8008014 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	0f1b      	lsrs	r3, r3, #28
 8007fc8:	2b09      	cmp	r3, #9
 8007fca:	d80b      	bhi.n	8007fe4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	0f1b      	lsrs	r3, r3, #28
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	440b      	add	r3, r1
 8007fdc:	3230      	adds	r2, #48	; 0x30
 8007fde:	b2d2      	uxtb	r2, r2
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	e00a      	b.n	8007ffa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	0f1b      	lsrs	r3, r3, #28
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	4619      	mov	r1, r3
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	440b      	add	r3, r1
 8007ff4:	3237      	adds	r2, #55	; 0x37
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	3301      	adds	r3, #1
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	4413      	add	r3, r2
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	3301      	adds	r3, #1
 8008012:	75fb      	strb	r3, [r7, #23]
 8008014:	7dfa      	ldrb	r2, [r7, #23]
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	429a      	cmp	r2, r3
 800801a:	d3d3      	bcc.n	8007fc4 <IntToUnicode+0x18>
  }
}
 800801c:	bf00      	nop
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a0d      	ldr	r2, [pc, #52]	; (800806c <HAL_PCD_MspInit+0x44>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d113      	bne.n	8008062 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800803a:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <HAL_PCD_MspInit+0x48>)
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	4a0c      	ldr	r2, [pc, #48]	; (8008070 <HAL_PCD_MspInit+0x48>)
 8008040:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008044:	61d3      	str	r3, [r2, #28]
 8008046:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <HAL_PCD_MspInit+0x48>)
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008052:	2200      	movs	r2, #0
 8008054:	2100      	movs	r1, #0
 8008056:	2014      	movs	r0, #20
 8008058:	f7f9 f887 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800805c:	2014      	movs	r0, #20
 800805e:	f7f9 f8a0 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	40005c00 	.word	0x40005c00
 8008070:	40021000 	.word	0x40021000

08008074 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f7fe fea8 	bl	8006de0 <USBD_LL_SetupStage>
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	440b      	add	r3, r1
 80080b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	4619      	mov	r1, r3
 80080c2:	f7fe feda 	bl	8006e7a <USBD_LL_DataOutStage>
}
 80080c6:	bf00      	nop
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80080e0:	78fa      	ldrb	r2, [r7, #3]
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	440b      	add	r3, r1
 80080ee:	333c      	adds	r3, #60	; 0x3c
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	4619      	mov	r1, r3
 80080f6:	f7fe ff31 	bl	8006f5c <USBD_LL_DataInStage>
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b082      	sub	sp, #8
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff f841 	bl	8007198 <USBD_LL_SOF>
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d001      	beq.n	8008136 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008132:	f7f8 f9df 	bl	80004f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800813c:	7bfa      	ldrb	r2, [r7, #15]
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe fff1 	bl	8007128 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800814c:	4618      	mov	r0, r3
 800814e:	f7fe ffaa 	bl	80070a6 <USBD_LL_Reset>
}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe ffeb 	bl	8007146 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008178:	4b04      	ldr	r3, [pc, #16]	; (800818c <HAL_PCD_SuspendCallback+0x30>)
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	4a03      	ldr	r2, [pc, #12]	; (800818c <HAL_PCD_SuspendCallback+0x30>)
 800817e:	f043 0306 	orr.w	r3, r3, #6
 8008182:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	e000ed00 	.word	0xe000ed00

08008190 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe ffe5 	bl	800716e <USBD_LL_Resume>
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80081b4:	4a1f      	ldr	r2, [pc, #124]	; (8008234 <USBD_LL_Init+0x88>)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1d      	ldr	r2, [pc, #116]	; (8008234 <USBD_LL_Init+0x88>)
 80081c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80081c4:	4b1b      	ldr	r3, [pc, #108]	; (8008234 <USBD_LL_Init+0x88>)
 80081c6:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <USBD_LL_Init+0x8c>)
 80081c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80081ca:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <USBD_LL_Init+0x88>)
 80081cc:	2208      	movs	r2, #8
 80081ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80081d0:	4b18      	ldr	r3, [pc, #96]	; (8008234 <USBD_LL_Init+0x88>)
 80081d2:	2202      	movs	r2, #2
 80081d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80081d6:	4b17      	ldr	r3, [pc, #92]	; (8008234 <USBD_LL_Init+0x88>)
 80081d8:	2200      	movs	r2, #0
 80081da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80081dc:	4b15      	ldr	r3, [pc, #84]	; (8008234 <USBD_LL_Init+0x88>)
 80081de:	2200      	movs	r2, #0
 80081e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <USBD_LL_Init+0x88>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081e8:	4812      	ldr	r0, [pc, #72]	; (8008234 <USBD_LL_Init+0x88>)
 80081ea:	f7f9 fad5 	bl	8001798 <HAL_PCD_Init>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80081f4:	f7f8 f97e 	bl	80004f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081fe:	2318      	movs	r3, #24
 8008200:	2200      	movs	r2, #0
 8008202:	2100      	movs	r1, #0
 8008204:	f7fa ff32 	bl	800306c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800820e:	2358      	movs	r3, #88	; 0x58
 8008210:	2200      	movs	r2, #0
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	f7fa ff2a 	bl	800306c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800821e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008222:	2200      	movs	r2, #0
 8008224:	2181      	movs	r1, #129	; 0x81
 8008226:	f7fa ff21 	bl	800306c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	200007a4 	.word	0x200007a4
 8008238:	40005c00 	.word	0x40005c00

0800823c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008252:	4618      	mov	r0, r3
 8008254:	f7f9 fbab 	bl	80019ae <HAL_PCD_Start>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	4618      	mov	r0, r3
 8008260:	f000 f93c 	bl	80084dc <USBD_Get_USB_Status>
 8008264:	4603      	mov	r3, r0
 8008266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008268:	7bbb      	ldrb	r3, [r7, #14]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	4608      	mov	r0, r1
 800827c:	4611      	mov	r1, r2
 800827e:	461a      	mov	r2, r3
 8008280:	4603      	mov	r3, r0
 8008282:	70fb      	strb	r3, [r7, #3]
 8008284:	460b      	mov	r3, r1
 8008286:	70bb      	strb	r3, [r7, #2]
 8008288:	4613      	mov	r3, r2
 800828a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800829a:	78bb      	ldrb	r3, [r7, #2]
 800829c:	883a      	ldrh	r2, [r7, #0]
 800829e:	78f9      	ldrb	r1, [r7, #3]
 80082a0:	f7f9 fd23 	bl	8001cea <HAL_PCD_EP_Open>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 f916 	bl	80084dc <USBD_Get_USB_Status>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f9 fd6a 	bl	8001db6 <HAL_PCD_EP_Close>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f8f7 	bl	80084dc <USBD_Get_USB_Status>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800830c:	2300      	movs	r3, #0
 800830e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008316:	78fa      	ldrb	r2, [r7, #3]
 8008318:	4611      	mov	r1, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f7f9 fe13 	bl	8001f46 <HAL_PCD_EP_SetStall>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 f8d8 	bl	80084dc <USBD_Get_USB_Status>
 800832c:	4603      	mov	r3, r0
 800832e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008330:	7bbb      	ldrb	r3, [r7, #14]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008354:	78fa      	ldrb	r2, [r7, #3]
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f7f9 fe54 	bl	8002006 <HAL_PCD_EP_ClrStall>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	4618      	mov	r0, r3
 8008366:	f000 f8b9 	bl	80084dc <USBD_Get_USB_Status>
 800836a:	4603      	mov	r3, r0
 800836c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800838a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800838c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008390:	2b00      	cmp	r3, #0
 8008392:	da0c      	bge.n	80083ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839a:	68f9      	ldr	r1, [r7, #12]
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	440b      	add	r3, r1
 80083a8:	3302      	adds	r3, #2
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	e00b      	b.n	80083c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083b4:	68f9      	ldr	r1, [r7, #12]
 80083b6:	4613      	mov	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	440b      	add	r3, r1
 80083c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80083c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ea:	78fa      	ldrb	r2, [r7, #3]
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f9 fc56 	bl	8001ca0 <HAL_PCD_SetAddress>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f000 f86e 	bl	80084dc <USBD_Get_USB_Status>
 8008400:	4603      	mov	r3, r0
 8008402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008404:	7bbb      	ldrb	r3, [r7, #14]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b086      	sub	sp, #24
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	461a      	mov	r2, r3
 800841a:	460b      	mov	r3, r1
 800841c:	72fb      	strb	r3, [r7, #11]
 800841e:	4613      	mov	r3, r2
 8008420:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008430:	893b      	ldrh	r3, [r7, #8]
 8008432:	7af9      	ldrb	r1, [r7, #11]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	f7f9 fd43 	bl	8001ec0 <HAL_PCD_EP_Transmit>
 800843a:	4603      	mov	r3, r0
 800843c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	4618      	mov	r0, r3
 8008442:	f000 f84b 	bl	80084dc <USBD_Get_USB_Status>
 8008446:	4603      	mov	r3, r0
 8008448:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800844a:	7dbb      	ldrb	r3, [r7, #22]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	461a      	mov	r2, r3
 8008460:	460b      	mov	r3, r1
 8008462:	72fb      	strb	r3, [r7, #11]
 8008464:	4613      	mov	r3, r2
 8008466:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008476:	893b      	ldrh	r3, [r7, #8]
 8008478:	7af9      	ldrb	r1, [r7, #11]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	f7f9 fce3 	bl	8001e46 <HAL_PCD_EP_Receive>
 8008480:	4603      	mov	r3, r0
 8008482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008484:	7dfb      	ldrb	r3, [r7, #23]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 f828 	bl	80084dc <USBD_Get_USB_Status>
 800848c:	4603      	mov	r3, r0
 800848e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008490:	7dbb      	ldrb	r3, [r7, #22]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084a4:	4b02      	ldr	r3, [pc, #8]	; (80084b0 <USBD_static_malloc+0x14>)
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr
 80084b0:	20000a90 	.word	0x20000a90

080084b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bc80      	pop	{r7}
 80084c4:	4770      	bx	lr

080084c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084c6:	b480      	push	{r7}
 80084c8:	b083      	sub	sp, #12
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	460b      	mov	r3, r1
 80084d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr

080084dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d817      	bhi.n	8008520 <USBD_Get_USB_Status+0x44>
 80084f0:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBD_Get_USB_Status+0x1c>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008509 	.word	0x08008509
 80084fc:	0800850f 	.word	0x0800850f
 8008500:	08008515 	.word	0x08008515
 8008504:	0800851b 	.word	0x0800851b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
    break;
 800850c:	e00b      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800850e:	2302      	movs	r3, #2
 8008510:	73fb      	strb	r3, [r7, #15]
    break;
 8008512:	e008      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008514:	2301      	movs	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
    break;
 8008518:	e005      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800851a:	2302      	movs	r3, #2
 800851c:	73fb      	strb	r3, [r7, #15]
    break;
 800851e:	e002      	b.n	8008526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008520:	2302      	movs	r3, #2
 8008522:	73fb      	strb	r3, [r7, #15]
    break;
 8008524:	bf00      	nop
  }
  return usb_status;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop

08008534 <__errno>:
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <__errno+0x8>)
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000164 	.word	0x20000164

08008540 <__libc_init_array>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	2600      	movs	r6, #0
 8008544:	4d0c      	ldr	r5, [pc, #48]	; (8008578 <__libc_init_array+0x38>)
 8008546:	4c0d      	ldr	r4, [pc, #52]	; (800857c <__libc_init_array+0x3c>)
 8008548:	1b64      	subs	r4, r4, r5
 800854a:	10a4      	asrs	r4, r4, #2
 800854c:	42a6      	cmp	r6, r4
 800854e:	d109      	bne.n	8008564 <__libc_init_array+0x24>
 8008550:	f000 fc9c 	bl	8008e8c <_init>
 8008554:	2600      	movs	r6, #0
 8008556:	4d0a      	ldr	r5, [pc, #40]	; (8008580 <__libc_init_array+0x40>)
 8008558:	4c0a      	ldr	r4, [pc, #40]	; (8008584 <__libc_init_array+0x44>)
 800855a:	1b64      	subs	r4, r4, r5
 800855c:	10a4      	asrs	r4, r4, #2
 800855e:	42a6      	cmp	r6, r4
 8008560:	d105      	bne.n	800856e <__libc_init_array+0x2e>
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	f855 3b04 	ldr.w	r3, [r5], #4
 8008568:	4798      	blx	r3
 800856a:	3601      	adds	r6, #1
 800856c:	e7ee      	b.n	800854c <__libc_init_array+0xc>
 800856e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008572:	4798      	blx	r3
 8008574:	3601      	adds	r6, #1
 8008576:	e7f2      	b.n	800855e <__libc_init_array+0x1e>
 8008578:	08008f64 	.word	0x08008f64
 800857c:	08008f64 	.word	0x08008f64
 8008580:	08008f64 	.word	0x08008f64
 8008584:	08008f6c 	.word	0x08008f6c

08008588 <memset>:
 8008588:	4603      	mov	r3, r0
 800858a:	4402      	add	r2, r0
 800858c:	4293      	cmp	r3, r2
 800858e:	d100      	bne.n	8008592 <memset+0xa>
 8008590:	4770      	bx	lr
 8008592:	f803 1b01 	strb.w	r1, [r3], #1
 8008596:	e7f9      	b.n	800858c <memset+0x4>

08008598 <siprintf>:
 8008598:	b40e      	push	{r1, r2, r3}
 800859a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800859e:	b500      	push	{lr}
 80085a0:	b09c      	sub	sp, #112	; 0x70
 80085a2:	ab1d      	add	r3, sp, #116	; 0x74
 80085a4:	9002      	str	r0, [sp, #8]
 80085a6:	9006      	str	r0, [sp, #24]
 80085a8:	9107      	str	r1, [sp, #28]
 80085aa:	9104      	str	r1, [sp, #16]
 80085ac:	4808      	ldr	r0, [pc, #32]	; (80085d0 <siprintf+0x38>)
 80085ae:	4909      	ldr	r1, [pc, #36]	; (80085d4 <siprintf+0x3c>)
 80085b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b4:	9105      	str	r1, [sp, #20]
 80085b6:	6800      	ldr	r0, [r0, #0]
 80085b8:	a902      	add	r1, sp, #8
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	f000 f868 	bl	8008690 <_svfiprintf_r>
 80085c0:	2200      	movs	r2, #0
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	b01c      	add	sp, #112	; 0x70
 80085c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085cc:	b003      	add	sp, #12
 80085ce:	4770      	bx	lr
 80085d0:	20000164 	.word	0x20000164
 80085d4:	ffff0208 	.word	0xffff0208

080085d8 <__ssputs_r>:
 80085d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085dc:	688e      	ldr	r6, [r1, #8]
 80085de:	4682      	mov	sl, r0
 80085e0:	429e      	cmp	r6, r3
 80085e2:	460c      	mov	r4, r1
 80085e4:	4690      	mov	r8, r2
 80085e6:	461f      	mov	r7, r3
 80085e8:	d838      	bhi.n	800865c <__ssputs_r+0x84>
 80085ea:	898a      	ldrh	r2, [r1, #12]
 80085ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085f0:	d032      	beq.n	8008658 <__ssputs_r+0x80>
 80085f2:	6825      	ldr	r5, [r4, #0]
 80085f4:	6909      	ldr	r1, [r1, #16]
 80085f6:	3301      	adds	r3, #1
 80085f8:	eba5 0901 	sub.w	r9, r5, r1
 80085fc:	6965      	ldr	r5, [r4, #20]
 80085fe:	444b      	add	r3, r9
 8008600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008608:	106d      	asrs	r5, r5, #1
 800860a:	429d      	cmp	r5, r3
 800860c:	bf38      	it	cc
 800860e:	461d      	movcc	r5, r3
 8008610:	0553      	lsls	r3, r2, #21
 8008612:	d531      	bpl.n	8008678 <__ssputs_r+0xa0>
 8008614:	4629      	mov	r1, r5
 8008616:	f000 fb6f 	bl	8008cf8 <_malloc_r>
 800861a:	4606      	mov	r6, r0
 800861c:	b950      	cbnz	r0, 8008634 <__ssputs_r+0x5c>
 800861e:	230c      	movs	r3, #12
 8008620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008624:	f8ca 3000 	str.w	r3, [sl]
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008634:	464a      	mov	r2, r9
 8008636:	6921      	ldr	r1, [r4, #16]
 8008638:	f000 face 	bl	8008bd8 <memcpy>
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	6126      	str	r6, [r4, #16]
 800864a:	444e      	add	r6, r9
 800864c:	6026      	str	r6, [r4, #0]
 800864e:	463e      	mov	r6, r7
 8008650:	6165      	str	r5, [r4, #20]
 8008652:	eba5 0509 	sub.w	r5, r5, r9
 8008656:	60a5      	str	r5, [r4, #8]
 8008658:	42be      	cmp	r6, r7
 800865a:	d900      	bls.n	800865e <__ssputs_r+0x86>
 800865c:	463e      	mov	r6, r7
 800865e:	4632      	mov	r2, r6
 8008660:	4641      	mov	r1, r8
 8008662:	6820      	ldr	r0, [r4, #0]
 8008664:	f000 fac6 	bl	8008bf4 <memmove>
 8008668:	68a3      	ldr	r3, [r4, #8]
 800866a:	2000      	movs	r0, #0
 800866c:	1b9b      	subs	r3, r3, r6
 800866e:	60a3      	str	r3, [r4, #8]
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	4433      	add	r3, r6
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	e7db      	b.n	8008630 <__ssputs_r+0x58>
 8008678:	462a      	mov	r2, r5
 800867a:	f000 fbb1 	bl	8008de0 <_realloc_r>
 800867e:	4606      	mov	r6, r0
 8008680:	2800      	cmp	r0, #0
 8008682:	d1e1      	bne.n	8008648 <__ssputs_r+0x70>
 8008684:	4650      	mov	r0, sl
 8008686:	6921      	ldr	r1, [r4, #16]
 8008688:	f000 face 	bl	8008c28 <_free_r>
 800868c:	e7c7      	b.n	800861e <__ssputs_r+0x46>
	...

08008690 <_svfiprintf_r>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	4698      	mov	r8, r3
 8008696:	898b      	ldrh	r3, [r1, #12]
 8008698:	4607      	mov	r7, r0
 800869a:	061b      	lsls	r3, r3, #24
 800869c:	460d      	mov	r5, r1
 800869e:	4614      	mov	r4, r2
 80086a0:	b09d      	sub	sp, #116	; 0x74
 80086a2:	d50e      	bpl.n	80086c2 <_svfiprintf_r+0x32>
 80086a4:	690b      	ldr	r3, [r1, #16]
 80086a6:	b963      	cbnz	r3, 80086c2 <_svfiprintf_r+0x32>
 80086a8:	2140      	movs	r1, #64	; 0x40
 80086aa:	f000 fb25 	bl	8008cf8 <_malloc_r>
 80086ae:	6028      	str	r0, [r5, #0]
 80086b0:	6128      	str	r0, [r5, #16]
 80086b2:	b920      	cbnz	r0, 80086be <_svfiprintf_r+0x2e>
 80086b4:	230c      	movs	r3, #12
 80086b6:	603b      	str	r3, [r7, #0]
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086bc:	e0d1      	b.n	8008862 <_svfiprintf_r+0x1d2>
 80086be:	2340      	movs	r3, #64	; 0x40
 80086c0:	616b      	str	r3, [r5, #20]
 80086c2:	2300      	movs	r3, #0
 80086c4:	9309      	str	r3, [sp, #36]	; 0x24
 80086c6:	2320      	movs	r3, #32
 80086c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086cc:	2330      	movs	r3, #48	; 0x30
 80086ce:	f04f 0901 	mov.w	r9, #1
 80086d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80086d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800887c <_svfiprintf_r+0x1ec>
 80086da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086de:	4623      	mov	r3, r4
 80086e0:	469a      	mov	sl, r3
 80086e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e6:	b10a      	cbz	r2, 80086ec <_svfiprintf_r+0x5c>
 80086e8:	2a25      	cmp	r2, #37	; 0x25
 80086ea:	d1f9      	bne.n	80086e0 <_svfiprintf_r+0x50>
 80086ec:	ebba 0b04 	subs.w	fp, sl, r4
 80086f0:	d00b      	beq.n	800870a <_svfiprintf_r+0x7a>
 80086f2:	465b      	mov	r3, fp
 80086f4:	4622      	mov	r2, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	4638      	mov	r0, r7
 80086fa:	f7ff ff6d 	bl	80085d8 <__ssputs_r>
 80086fe:	3001      	adds	r0, #1
 8008700:	f000 80aa 	beq.w	8008858 <_svfiprintf_r+0x1c8>
 8008704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008706:	445a      	add	r2, fp
 8008708:	9209      	str	r2, [sp, #36]	; 0x24
 800870a:	f89a 3000 	ldrb.w	r3, [sl]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80a2 	beq.w	8008858 <_svfiprintf_r+0x1c8>
 8008714:	2300      	movs	r3, #0
 8008716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800871a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800871e:	f10a 0a01 	add.w	sl, sl, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	9307      	str	r3, [sp, #28]
 8008726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800872a:	931a      	str	r3, [sp, #104]	; 0x68
 800872c:	4654      	mov	r4, sl
 800872e:	2205      	movs	r2, #5
 8008730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008734:	4851      	ldr	r0, [pc, #324]	; (800887c <_svfiprintf_r+0x1ec>)
 8008736:	f000 fa41 	bl	8008bbc <memchr>
 800873a:	9a04      	ldr	r2, [sp, #16]
 800873c:	b9d8      	cbnz	r0, 8008776 <_svfiprintf_r+0xe6>
 800873e:	06d0      	lsls	r0, r2, #27
 8008740:	bf44      	itt	mi
 8008742:	2320      	movmi	r3, #32
 8008744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008748:	0711      	lsls	r1, r2, #28
 800874a:	bf44      	itt	mi
 800874c:	232b      	movmi	r3, #43	; 0x2b
 800874e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008752:	f89a 3000 	ldrb.w	r3, [sl]
 8008756:	2b2a      	cmp	r3, #42	; 0x2a
 8008758:	d015      	beq.n	8008786 <_svfiprintf_r+0xf6>
 800875a:	4654      	mov	r4, sl
 800875c:	2000      	movs	r0, #0
 800875e:	f04f 0c0a 	mov.w	ip, #10
 8008762:	9a07      	ldr	r2, [sp, #28]
 8008764:	4621      	mov	r1, r4
 8008766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800876a:	3b30      	subs	r3, #48	; 0x30
 800876c:	2b09      	cmp	r3, #9
 800876e:	d94e      	bls.n	800880e <_svfiprintf_r+0x17e>
 8008770:	b1b0      	cbz	r0, 80087a0 <_svfiprintf_r+0x110>
 8008772:	9207      	str	r2, [sp, #28]
 8008774:	e014      	b.n	80087a0 <_svfiprintf_r+0x110>
 8008776:	eba0 0308 	sub.w	r3, r0, r8
 800877a:	fa09 f303 	lsl.w	r3, r9, r3
 800877e:	4313      	orrs	r3, r2
 8008780:	46a2      	mov	sl, r4
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	e7d2      	b.n	800872c <_svfiprintf_r+0x9c>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	1d19      	adds	r1, r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	9103      	str	r1, [sp, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfbb      	ittet	lt
 8008792:	425b      	neglt	r3, r3
 8008794:	f042 0202 	orrlt.w	r2, r2, #2
 8008798:	9307      	strge	r3, [sp, #28]
 800879a:	9307      	strlt	r3, [sp, #28]
 800879c:	bfb8      	it	lt
 800879e:	9204      	strlt	r2, [sp, #16]
 80087a0:	7823      	ldrb	r3, [r4, #0]
 80087a2:	2b2e      	cmp	r3, #46	; 0x2e
 80087a4:	d10c      	bne.n	80087c0 <_svfiprintf_r+0x130>
 80087a6:	7863      	ldrb	r3, [r4, #1]
 80087a8:	2b2a      	cmp	r3, #42	; 0x2a
 80087aa:	d135      	bne.n	8008818 <_svfiprintf_r+0x188>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	3402      	adds	r4, #2
 80087b0:	1d1a      	adds	r2, r3, #4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	9203      	str	r2, [sp, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bfb8      	it	lt
 80087ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008880 <_svfiprintf_r+0x1f0>
 80087c4:	2203      	movs	r2, #3
 80087c6:	4650      	mov	r0, sl
 80087c8:	7821      	ldrb	r1, [r4, #0]
 80087ca:	f000 f9f7 	bl	8008bbc <memchr>
 80087ce:	b140      	cbz	r0, 80087e2 <_svfiprintf_r+0x152>
 80087d0:	2340      	movs	r3, #64	; 0x40
 80087d2:	eba0 000a 	sub.w	r0, r0, sl
 80087d6:	fa03 f000 	lsl.w	r0, r3, r0
 80087da:	9b04      	ldr	r3, [sp, #16]
 80087dc:	3401      	adds	r4, #1
 80087de:	4303      	orrs	r3, r0
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087e6:	2206      	movs	r2, #6
 80087e8:	4826      	ldr	r0, [pc, #152]	; (8008884 <_svfiprintf_r+0x1f4>)
 80087ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ee:	f000 f9e5 	bl	8008bbc <memchr>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d038      	beq.n	8008868 <_svfiprintf_r+0x1d8>
 80087f6:	4b24      	ldr	r3, [pc, #144]	; (8008888 <_svfiprintf_r+0x1f8>)
 80087f8:	bb1b      	cbnz	r3, 8008842 <_svfiprintf_r+0x1b2>
 80087fa:	9b03      	ldr	r3, [sp, #12]
 80087fc:	3307      	adds	r3, #7
 80087fe:	f023 0307 	bic.w	r3, r3, #7
 8008802:	3308      	adds	r3, #8
 8008804:	9303      	str	r3, [sp, #12]
 8008806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008808:	4433      	add	r3, r6
 800880a:	9309      	str	r3, [sp, #36]	; 0x24
 800880c:	e767      	b.n	80086de <_svfiprintf_r+0x4e>
 800880e:	460c      	mov	r4, r1
 8008810:	2001      	movs	r0, #1
 8008812:	fb0c 3202 	mla	r2, ip, r2, r3
 8008816:	e7a5      	b.n	8008764 <_svfiprintf_r+0xd4>
 8008818:	2300      	movs	r3, #0
 800881a:	f04f 0c0a 	mov.w	ip, #10
 800881e:	4619      	mov	r1, r3
 8008820:	3401      	adds	r4, #1
 8008822:	9305      	str	r3, [sp, #20]
 8008824:	4620      	mov	r0, r4
 8008826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800882a:	3a30      	subs	r2, #48	; 0x30
 800882c:	2a09      	cmp	r2, #9
 800882e:	d903      	bls.n	8008838 <_svfiprintf_r+0x1a8>
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0c5      	beq.n	80087c0 <_svfiprintf_r+0x130>
 8008834:	9105      	str	r1, [sp, #20]
 8008836:	e7c3      	b.n	80087c0 <_svfiprintf_r+0x130>
 8008838:	4604      	mov	r4, r0
 800883a:	2301      	movs	r3, #1
 800883c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008840:	e7f0      	b.n	8008824 <_svfiprintf_r+0x194>
 8008842:	ab03      	add	r3, sp, #12
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	462a      	mov	r2, r5
 8008848:	4638      	mov	r0, r7
 800884a:	4b10      	ldr	r3, [pc, #64]	; (800888c <_svfiprintf_r+0x1fc>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	f3af 8000 	nop.w
 8008852:	1c42      	adds	r2, r0, #1
 8008854:	4606      	mov	r6, r0
 8008856:	d1d6      	bne.n	8008806 <_svfiprintf_r+0x176>
 8008858:	89ab      	ldrh	r3, [r5, #12]
 800885a:	065b      	lsls	r3, r3, #25
 800885c:	f53f af2c 	bmi.w	80086b8 <_svfiprintf_r+0x28>
 8008860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008862:	b01d      	add	sp, #116	; 0x74
 8008864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008868:	ab03      	add	r3, sp, #12
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	462a      	mov	r2, r5
 800886e:	4638      	mov	r0, r7
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <_svfiprintf_r+0x1fc>)
 8008872:	a904      	add	r1, sp, #16
 8008874:	f000 f87c 	bl	8008970 <_printf_i>
 8008878:	e7eb      	b.n	8008852 <_svfiprintf_r+0x1c2>
 800887a:	bf00      	nop
 800887c:	08008f30 	.word	0x08008f30
 8008880:	08008f36 	.word	0x08008f36
 8008884:	08008f3a 	.word	0x08008f3a
 8008888:	00000000 	.word	0x00000000
 800888c:	080085d9 	.word	0x080085d9

08008890 <_printf_common>:
 8008890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008894:	4616      	mov	r6, r2
 8008896:	4699      	mov	r9, r3
 8008898:	688a      	ldr	r2, [r1, #8]
 800889a:	690b      	ldr	r3, [r1, #16]
 800889c:	4607      	mov	r7, r0
 800889e:	4293      	cmp	r3, r2
 80088a0:	bfb8      	it	lt
 80088a2:	4613      	movlt	r3, r2
 80088a4:	6033      	str	r3, [r6, #0]
 80088a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088aa:	460c      	mov	r4, r1
 80088ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088b0:	b10a      	cbz	r2, 80088b6 <_printf_common+0x26>
 80088b2:	3301      	adds	r3, #1
 80088b4:	6033      	str	r3, [r6, #0]
 80088b6:	6823      	ldr	r3, [r4, #0]
 80088b8:	0699      	lsls	r1, r3, #26
 80088ba:	bf42      	ittt	mi
 80088bc:	6833      	ldrmi	r3, [r6, #0]
 80088be:	3302      	addmi	r3, #2
 80088c0:	6033      	strmi	r3, [r6, #0]
 80088c2:	6825      	ldr	r5, [r4, #0]
 80088c4:	f015 0506 	ands.w	r5, r5, #6
 80088c8:	d106      	bne.n	80088d8 <_printf_common+0x48>
 80088ca:	f104 0a19 	add.w	sl, r4, #25
 80088ce:	68e3      	ldr	r3, [r4, #12]
 80088d0:	6832      	ldr	r2, [r6, #0]
 80088d2:	1a9b      	subs	r3, r3, r2
 80088d4:	42ab      	cmp	r3, r5
 80088d6:	dc28      	bgt.n	800892a <_printf_common+0x9a>
 80088d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088dc:	1e13      	subs	r3, r2, #0
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	bf18      	it	ne
 80088e2:	2301      	movne	r3, #1
 80088e4:	0692      	lsls	r2, r2, #26
 80088e6:	d42d      	bmi.n	8008944 <_printf_common+0xb4>
 80088e8:	4649      	mov	r1, r9
 80088ea:	4638      	mov	r0, r7
 80088ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088f0:	47c0      	blx	r8
 80088f2:	3001      	adds	r0, #1
 80088f4:	d020      	beq.n	8008938 <_printf_common+0xa8>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	68e5      	ldr	r5, [r4, #12]
 80088fa:	f003 0306 	and.w	r3, r3, #6
 80088fe:	2b04      	cmp	r3, #4
 8008900:	bf18      	it	ne
 8008902:	2500      	movne	r5, #0
 8008904:	6832      	ldr	r2, [r6, #0]
 8008906:	f04f 0600 	mov.w	r6, #0
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	bf08      	it	eq
 800890e:	1aad      	subeq	r5, r5, r2
 8008910:	6922      	ldr	r2, [r4, #16]
 8008912:	bf08      	it	eq
 8008914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008918:	4293      	cmp	r3, r2
 800891a:	bfc4      	itt	gt
 800891c:	1a9b      	subgt	r3, r3, r2
 800891e:	18ed      	addgt	r5, r5, r3
 8008920:	341a      	adds	r4, #26
 8008922:	42b5      	cmp	r5, r6
 8008924:	d11a      	bne.n	800895c <_printf_common+0xcc>
 8008926:	2000      	movs	r0, #0
 8008928:	e008      	b.n	800893c <_printf_common+0xac>
 800892a:	2301      	movs	r3, #1
 800892c:	4652      	mov	r2, sl
 800892e:	4649      	mov	r1, r9
 8008930:	4638      	mov	r0, r7
 8008932:	47c0      	blx	r8
 8008934:	3001      	adds	r0, #1
 8008936:	d103      	bne.n	8008940 <_printf_common+0xb0>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800893c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008940:	3501      	adds	r5, #1
 8008942:	e7c4      	b.n	80088ce <_printf_common+0x3e>
 8008944:	2030      	movs	r0, #48	; 0x30
 8008946:	18e1      	adds	r1, r4, r3
 8008948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008952:	4422      	add	r2, r4
 8008954:	3302      	adds	r3, #2
 8008956:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800895a:	e7c5      	b.n	80088e8 <_printf_common+0x58>
 800895c:	2301      	movs	r3, #1
 800895e:	4622      	mov	r2, r4
 8008960:	4649      	mov	r1, r9
 8008962:	4638      	mov	r0, r7
 8008964:	47c0      	blx	r8
 8008966:	3001      	adds	r0, #1
 8008968:	d0e6      	beq.n	8008938 <_printf_common+0xa8>
 800896a:	3601      	adds	r6, #1
 800896c:	e7d9      	b.n	8008922 <_printf_common+0x92>
	...

08008970 <_printf_i>:
 8008970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	7e0f      	ldrb	r7, [r1, #24]
 8008976:	4691      	mov	r9, r2
 8008978:	2f78      	cmp	r7, #120	; 0x78
 800897a:	4680      	mov	r8, r0
 800897c:	460c      	mov	r4, r1
 800897e:	469a      	mov	sl, r3
 8008980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008986:	d807      	bhi.n	8008998 <_printf_i+0x28>
 8008988:	2f62      	cmp	r7, #98	; 0x62
 800898a:	d80a      	bhi.n	80089a2 <_printf_i+0x32>
 800898c:	2f00      	cmp	r7, #0
 800898e:	f000 80d9 	beq.w	8008b44 <_printf_i+0x1d4>
 8008992:	2f58      	cmp	r7, #88	; 0x58
 8008994:	f000 80a4 	beq.w	8008ae0 <_printf_i+0x170>
 8008998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800899c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089a0:	e03a      	b.n	8008a18 <_printf_i+0xa8>
 80089a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089a6:	2b15      	cmp	r3, #21
 80089a8:	d8f6      	bhi.n	8008998 <_printf_i+0x28>
 80089aa:	a101      	add	r1, pc, #4	; (adr r1, 80089b0 <_printf_i+0x40>)
 80089ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089b0:	08008a09 	.word	0x08008a09
 80089b4:	08008a1d 	.word	0x08008a1d
 80089b8:	08008999 	.word	0x08008999
 80089bc:	08008999 	.word	0x08008999
 80089c0:	08008999 	.word	0x08008999
 80089c4:	08008999 	.word	0x08008999
 80089c8:	08008a1d 	.word	0x08008a1d
 80089cc:	08008999 	.word	0x08008999
 80089d0:	08008999 	.word	0x08008999
 80089d4:	08008999 	.word	0x08008999
 80089d8:	08008999 	.word	0x08008999
 80089dc:	08008b2b 	.word	0x08008b2b
 80089e0:	08008a4d 	.word	0x08008a4d
 80089e4:	08008b0d 	.word	0x08008b0d
 80089e8:	08008999 	.word	0x08008999
 80089ec:	08008999 	.word	0x08008999
 80089f0:	08008b4d 	.word	0x08008b4d
 80089f4:	08008999 	.word	0x08008999
 80089f8:	08008a4d 	.word	0x08008a4d
 80089fc:	08008999 	.word	0x08008999
 8008a00:	08008999 	.word	0x08008999
 8008a04:	08008b15 	.word	0x08008b15
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	602a      	str	r2, [r5, #0]
 8008a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e0a4      	b.n	8008b66 <_printf_i+0x1f6>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	6829      	ldr	r1, [r5, #0]
 8008a20:	0606      	lsls	r6, r0, #24
 8008a22:	f101 0304 	add.w	r3, r1, #4
 8008a26:	d50a      	bpl.n	8008a3e <_printf_i+0xce>
 8008a28:	680e      	ldr	r6, [r1, #0]
 8008a2a:	602b      	str	r3, [r5, #0]
 8008a2c:	2e00      	cmp	r6, #0
 8008a2e:	da03      	bge.n	8008a38 <_printf_i+0xc8>
 8008a30:	232d      	movs	r3, #45	; 0x2d
 8008a32:	4276      	negs	r6, r6
 8008a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a38:	230a      	movs	r3, #10
 8008a3a:	485e      	ldr	r0, [pc, #376]	; (8008bb4 <_printf_i+0x244>)
 8008a3c:	e019      	b.n	8008a72 <_printf_i+0x102>
 8008a3e:	680e      	ldr	r6, [r1, #0]
 8008a40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	bf18      	it	ne
 8008a48:	b236      	sxthne	r6, r6
 8008a4a:	e7ef      	b.n	8008a2c <_printf_i+0xbc>
 8008a4c:	682b      	ldr	r3, [r5, #0]
 8008a4e:	6820      	ldr	r0, [r4, #0]
 8008a50:	1d19      	adds	r1, r3, #4
 8008a52:	6029      	str	r1, [r5, #0]
 8008a54:	0601      	lsls	r1, r0, #24
 8008a56:	d501      	bpl.n	8008a5c <_printf_i+0xec>
 8008a58:	681e      	ldr	r6, [r3, #0]
 8008a5a:	e002      	b.n	8008a62 <_printf_i+0xf2>
 8008a5c:	0646      	lsls	r6, r0, #25
 8008a5e:	d5fb      	bpl.n	8008a58 <_printf_i+0xe8>
 8008a60:	881e      	ldrh	r6, [r3, #0]
 8008a62:	2f6f      	cmp	r7, #111	; 0x6f
 8008a64:	bf0c      	ite	eq
 8008a66:	2308      	moveq	r3, #8
 8008a68:	230a      	movne	r3, #10
 8008a6a:	4852      	ldr	r0, [pc, #328]	; (8008bb4 <_printf_i+0x244>)
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a72:	6865      	ldr	r5, [r4, #4]
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	bfa8      	it	ge
 8008a78:	6821      	ldrge	r1, [r4, #0]
 8008a7a:	60a5      	str	r5, [r4, #8]
 8008a7c:	bfa4      	itt	ge
 8008a7e:	f021 0104 	bicge.w	r1, r1, #4
 8008a82:	6021      	strge	r1, [r4, #0]
 8008a84:	b90e      	cbnz	r6, 8008a8a <_printf_i+0x11a>
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	d04d      	beq.n	8008b26 <_printf_i+0x1b6>
 8008a8a:	4615      	mov	r5, r2
 8008a8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a90:	fb03 6711 	mls	r7, r3, r1, r6
 8008a94:	5dc7      	ldrb	r7, [r0, r7]
 8008a96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a9a:	4637      	mov	r7, r6
 8008a9c:	42bb      	cmp	r3, r7
 8008a9e:	460e      	mov	r6, r1
 8008aa0:	d9f4      	bls.n	8008a8c <_printf_i+0x11c>
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	d10b      	bne.n	8008abe <_printf_i+0x14e>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	07de      	lsls	r6, r3, #31
 8008aaa:	d508      	bpl.n	8008abe <_printf_i+0x14e>
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	6861      	ldr	r1, [r4, #4]
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	bfde      	ittt	le
 8008ab4:	2330      	movle	r3, #48	; 0x30
 8008ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008aba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008abe:	1b52      	subs	r2, r2, r5
 8008ac0:	6122      	str	r2, [r4, #16]
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	f8cd a000 	str.w	sl, [sp]
 8008acc:	aa03      	add	r2, sp, #12
 8008ace:	f7ff fedf 	bl	8008890 <_printf_common>
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d14c      	bne.n	8008b70 <_printf_i+0x200>
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ada:	b004      	add	sp, #16
 8008adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae0:	4834      	ldr	r0, [pc, #208]	; (8008bb4 <_printf_i+0x244>)
 8008ae2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ae6:	6829      	ldr	r1, [r5, #0]
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aee:	6029      	str	r1, [r5, #0]
 8008af0:	061d      	lsls	r5, r3, #24
 8008af2:	d514      	bpl.n	8008b1e <_printf_i+0x1ae>
 8008af4:	07df      	lsls	r7, r3, #31
 8008af6:	bf44      	itt	mi
 8008af8:	f043 0320 	orrmi.w	r3, r3, #32
 8008afc:	6023      	strmi	r3, [r4, #0]
 8008afe:	b91e      	cbnz	r6, 8008b08 <_printf_i+0x198>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	f023 0320 	bic.w	r3, r3, #32
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	2310      	movs	r3, #16
 8008b0a:	e7af      	b.n	8008a6c <_printf_i+0xfc>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	f043 0320 	orr.w	r3, r3, #32
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	2378      	movs	r3, #120	; 0x78
 8008b16:	4828      	ldr	r0, [pc, #160]	; (8008bb8 <_printf_i+0x248>)
 8008b18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b1c:	e7e3      	b.n	8008ae6 <_printf_i+0x176>
 8008b1e:	0659      	lsls	r1, r3, #25
 8008b20:	bf48      	it	mi
 8008b22:	b2b6      	uxthmi	r6, r6
 8008b24:	e7e6      	b.n	8008af4 <_printf_i+0x184>
 8008b26:	4615      	mov	r5, r2
 8008b28:	e7bb      	b.n	8008aa2 <_printf_i+0x132>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	6826      	ldr	r6, [r4, #0]
 8008b2e:	1d18      	adds	r0, r3, #4
 8008b30:	6961      	ldr	r1, [r4, #20]
 8008b32:	6028      	str	r0, [r5, #0]
 8008b34:	0635      	lsls	r5, r6, #24
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	d501      	bpl.n	8008b3e <_printf_i+0x1ce>
 8008b3a:	6019      	str	r1, [r3, #0]
 8008b3c:	e002      	b.n	8008b44 <_printf_i+0x1d4>
 8008b3e:	0670      	lsls	r0, r6, #25
 8008b40:	d5fb      	bpl.n	8008b3a <_printf_i+0x1ca>
 8008b42:	8019      	strh	r1, [r3, #0]
 8008b44:	2300      	movs	r3, #0
 8008b46:	4615      	mov	r5, r2
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	e7ba      	b.n	8008ac2 <_printf_i+0x152>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	2100      	movs	r1, #0
 8008b50:	1d1a      	adds	r2, r3, #4
 8008b52:	602a      	str	r2, [r5, #0]
 8008b54:	681d      	ldr	r5, [r3, #0]
 8008b56:	6862      	ldr	r2, [r4, #4]
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f000 f82f 	bl	8008bbc <memchr>
 8008b5e:	b108      	cbz	r0, 8008b64 <_printf_i+0x1f4>
 8008b60:	1b40      	subs	r0, r0, r5
 8008b62:	6060      	str	r0, [r4, #4]
 8008b64:	6863      	ldr	r3, [r4, #4]
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b6e:	e7a8      	b.n	8008ac2 <_printf_i+0x152>
 8008b70:	462a      	mov	r2, r5
 8008b72:	4649      	mov	r1, r9
 8008b74:	4640      	mov	r0, r8
 8008b76:	6923      	ldr	r3, [r4, #16]
 8008b78:	47d0      	blx	sl
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d0ab      	beq.n	8008ad6 <_printf_i+0x166>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	079b      	lsls	r3, r3, #30
 8008b82:	d413      	bmi.n	8008bac <_printf_i+0x23c>
 8008b84:	68e0      	ldr	r0, [r4, #12]
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	4298      	cmp	r0, r3
 8008b8a:	bfb8      	it	lt
 8008b8c:	4618      	movlt	r0, r3
 8008b8e:	e7a4      	b.n	8008ada <_printf_i+0x16a>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4632      	mov	r2, r6
 8008b94:	4649      	mov	r1, r9
 8008b96:	4640      	mov	r0, r8
 8008b98:	47d0      	blx	sl
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d09b      	beq.n	8008ad6 <_printf_i+0x166>
 8008b9e:	3501      	adds	r5, #1
 8008ba0:	68e3      	ldr	r3, [r4, #12]
 8008ba2:	9903      	ldr	r1, [sp, #12]
 8008ba4:	1a5b      	subs	r3, r3, r1
 8008ba6:	42ab      	cmp	r3, r5
 8008ba8:	dcf2      	bgt.n	8008b90 <_printf_i+0x220>
 8008baa:	e7eb      	b.n	8008b84 <_printf_i+0x214>
 8008bac:	2500      	movs	r5, #0
 8008bae:	f104 0619 	add.w	r6, r4, #25
 8008bb2:	e7f5      	b.n	8008ba0 <_printf_i+0x230>
 8008bb4:	08008f41 	.word	0x08008f41
 8008bb8:	08008f52 	.word	0x08008f52

08008bbc <memchr>:
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	b510      	push	{r4, lr}
 8008bc0:	b2c9      	uxtb	r1, r1
 8008bc2:	4402      	add	r2, r0
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	d101      	bne.n	8008bce <memchr+0x12>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e003      	b.n	8008bd6 <memchr+0x1a>
 8008bce:	7804      	ldrb	r4, [r0, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	428c      	cmp	r4, r1
 8008bd4:	d1f6      	bne.n	8008bc4 <memchr+0x8>
 8008bd6:	bd10      	pop	{r4, pc}

08008bd8 <memcpy>:
 8008bd8:	440a      	add	r2, r1
 8008bda:	4291      	cmp	r1, r2
 8008bdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008be0:	d100      	bne.n	8008be4 <memcpy+0xc>
 8008be2:	4770      	bx	lr
 8008be4:	b510      	push	{r4, lr}
 8008be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bea:	4291      	cmp	r1, r2
 8008bec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bf0:	d1f9      	bne.n	8008be6 <memcpy+0xe>
 8008bf2:	bd10      	pop	{r4, pc}

08008bf4 <memmove>:
 8008bf4:	4288      	cmp	r0, r1
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	eb01 0402 	add.w	r4, r1, r2
 8008bfc:	d902      	bls.n	8008c04 <memmove+0x10>
 8008bfe:	4284      	cmp	r4, r0
 8008c00:	4623      	mov	r3, r4
 8008c02:	d807      	bhi.n	8008c14 <memmove+0x20>
 8008c04:	1e43      	subs	r3, r0, #1
 8008c06:	42a1      	cmp	r1, r4
 8008c08:	d008      	beq.n	8008c1c <memmove+0x28>
 8008c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c12:	e7f8      	b.n	8008c06 <memmove+0x12>
 8008c14:	4601      	mov	r1, r0
 8008c16:	4402      	add	r2, r0
 8008c18:	428a      	cmp	r2, r1
 8008c1a:	d100      	bne.n	8008c1e <memmove+0x2a>
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c26:	e7f7      	b.n	8008c18 <memmove+0x24>

08008c28 <_free_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4605      	mov	r5, r0
 8008c2c:	2900      	cmp	r1, #0
 8008c2e:	d040      	beq.n	8008cb2 <_free_r+0x8a>
 8008c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c34:	1f0c      	subs	r4, r1, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bfb8      	it	lt
 8008c3a:	18e4      	addlt	r4, r4, r3
 8008c3c:	f000 f910 	bl	8008e60 <__malloc_lock>
 8008c40:	4a1c      	ldr	r2, [pc, #112]	; (8008cb4 <_free_r+0x8c>)
 8008c42:	6813      	ldr	r3, [r2, #0]
 8008c44:	b933      	cbnz	r3, 8008c54 <_free_r+0x2c>
 8008c46:	6063      	str	r3, [r4, #4]
 8008c48:	6014      	str	r4, [r2, #0]
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c50:	f000 b90c 	b.w	8008e6c <__malloc_unlock>
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d908      	bls.n	8008c6a <_free_r+0x42>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	1821      	adds	r1, r4, r0
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf01      	itttt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	1809      	addeq	r1, r1, r0
 8008c66:	6021      	streq	r1, [r4, #0]
 8008c68:	e7ed      	b.n	8008c46 <_free_r+0x1e>
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	b10b      	cbz	r3, 8008c74 <_free_r+0x4c>
 8008c70:	42a3      	cmp	r3, r4
 8008c72:	d9fa      	bls.n	8008c6a <_free_r+0x42>
 8008c74:	6811      	ldr	r1, [r2, #0]
 8008c76:	1850      	adds	r0, r2, r1
 8008c78:	42a0      	cmp	r0, r4
 8008c7a:	d10b      	bne.n	8008c94 <_free_r+0x6c>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	4401      	add	r1, r0
 8008c80:	1850      	adds	r0, r2, r1
 8008c82:	4283      	cmp	r3, r0
 8008c84:	6011      	str	r1, [r2, #0]
 8008c86:	d1e0      	bne.n	8008c4a <_free_r+0x22>
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4401      	add	r1, r0
 8008c8e:	6011      	str	r1, [r2, #0]
 8008c90:	6053      	str	r3, [r2, #4]
 8008c92:	e7da      	b.n	8008c4a <_free_r+0x22>
 8008c94:	d902      	bls.n	8008c9c <_free_r+0x74>
 8008c96:	230c      	movs	r3, #12
 8008c98:	602b      	str	r3, [r5, #0]
 8008c9a:	e7d6      	b.n	8008c4a <_free_r+0x22>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	1821      	adds	r1, r4, r0
 8008ca0:	428b      	cmp	r3, r1
 8008ca2:	bf01      	itttt	eq
 8008ca4:	6819      	ldreq	r1, [r3, #0]
 8008ca6:	685b      	ldreq	r3, [r3, #4]
 8008ca8:	1809      	addeq	r1, r1, r0
 8008caa:	6021      	streq	r1, [r4, #0]
 8008cac:	6063      	str	r3, [r4, #4]
 8008cae:	6054      	str	r4, [r2, #4]
 8008cb0:	e7cb      	b.n	8008c4a <_free_r+0x22>
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	20000aa4 	.word	0x20000aa4

08008cb8 <sbrk_aligned>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	4e0e      	ldr	r6, [pc, #56]	; (8008cf4 <sbrk_aligned+0x3c>)
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	6831      	ldr	r1, [r6, #0]
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	b911      	cbnz	r1, 8008cca <sbrk_aligned+0x12>
 8008cc4:	f000 f8bc 	bl	8008e40 <_sbrk_r>
 8008cc8:	6030      	str	r0, [r6, #0]
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f000 f8b7 	bl	8008e40 <_sbrk_r>
 8008cd2:	1c43      	adds	r3, r0, #1
 8008cd4:	d00a      	beq.n	8008cec <sbrk_aligned+0x34>
 8008cd6:	1cc4      	adds	r4, r0, #3
 8008cd8:	f024 0403 	bic.w	r4, r4, #3
 8008cdc:	42a0      	cmp	r0, r4
 8008cde:	d007      	beq.n	8008cf0 <sbrk_aligned+0x38>
 8008ce0:	1a21      	subs	r1, r4, r0
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 f8ac 	bl	8008e40 <_sbrk_r>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d101      	bne.n	8008cf0 <sbrk_aligned+0x38>
 8008cec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	20000aa8 	.word	0x20000aa8

08008cf8 <_malloc_r>:
 8008cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfc:	1ccd      	adds	r5, r1, #3
 8008cfe:	f025 0503 	bic.w	r5, r5, #3
 8008d02:	3508      	adds	r5, #8
 8008d04:	2d0c      	cmp	r5, #12
 8008d06:	bf38      	it	cc
 8008d08:	250c      	movcc	r5, #12
 8008d0a:	2d00      	cmp	r5, #0
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	db01      	blt.n	8008d14 <_malloc_r+0x1c>
 8008d10:	42a9      	cmp	r1, r5
 8008d12:	d905      	bls.n	8008d20 <_malloc_r+0x28>
 8008d14:	230c      	movs	r3, #12
 8008d16:	2600      	movs	r6, #0
 8008d18:	603b      	str	r3, [r7, #0]
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d20:	4e2e      	ldr	r6, [pc, #184]	; (8008ddc <_malloc_r+0xe4>)
 8008d22:	f000 f89d 	bl	8008e60 <__malloc_lock>
 8008d26:	6833      	ldr	r3, [r6, #0]
 8008d28:	461c      	mov	r4, r3
 8008d2a:	bb34      	cbnz	r4, 8008d7a <_malloc_r+0x82>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f7ff ffc2 	bl	8008cb8 <sbrk_aligned>
 8008d34:	1c43      	adds	r3, r0, #1
 8008d36:	4604      	mov	r4, r0
 8008d38:	d14d      	bne.n	8008dd6 <_malloc_r+0xde>
 8008d3a:	6834      	ldr	r4, [r6, #0]
 8008d3c:	4626      	mov	r6, r4
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	d140      	bne.n	8008dc4 <_malloc_r+0xcc>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	4631      	mov	r1, r6
 8008d46:	4638      	mov	r0, r7
 8008d48:	eb04 0803 	add.w	r8, r4, r3
 8008d4c:	f000 f878 	bl	8008e40 <_sbrk_r>
 8008d50:	4580      	cmp	r8, r0
 8008d52:	d13a      	bne.n	8008dca <_malloc_r+0xd2>
 8008d54:	6821      	ldr	r1, [r4, #0]
 8008d56:	3503      	adds	r5, #3
 8008d58:	1a6d      	subs	r5, r5, r1
 8008d5a:	f025 0503 	bic.w	r5, r5, #3
 8008d5e:	3508      	adds	r5, #8
 8008d60:	2d0c      	cmp	r5, #12
 8008d62:	bf38      	it	cc
 8008d64:	250c      	movcc	r5, #12
 8008d66:	4638      	mov	r0, r7
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7ff ffa5 	bl	8008cb8 <sbrk_aligned>
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d02b      	beq.n	8008dca <_malloc_r+0xd2>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	442b      	add	r3, r5
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	e00e      	b.n	8008d98 <_malloc_r+0xa0>
 8008d7a:	6822      	ldr	r2, [r4, #0]
 8008d7c:	1b52      	subs	r2, r2, r5
 8008d7e:	d41e      	bmi.n	8008dbe <_malloc_r+0xc6>
 8008d80:	2a0b      	cmp	r2, #11
 8008d82:	d916      	bls.n	8008db2 <_malloc_r+0xba>
 8008d84:	1961      	adds	r1, r4, r5
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	6025      	str	r5, [r4, #0]
 8008d8a:	bf18      	it	ne
 8008d8c:	6059      	strne	r1, [r3, #4]
 8008d8e:	6863      	ldr	r3, [r4, #4]
 8008d90:	bf08      	it	eq
 8008d92:	6031      	streq	r1, [r6, #0]
 8008d94:	5162      	str	r2, [r4, r5]
 8008d96:	604b      	str	r3, [r1, #4]
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f104 060b 	add.w	r6, r4, #11
 8008d9e:	f000 f865 	bl	8008e6c <__malloc_unlock>
 8008da2:	f026 0607 	bic.w	r6, r6, #7
 8008da6:	1d23      	adds	r3, r4, #4
 8008da8:	1af2      	subs	r2, r6, r3
 8008daa:	d0b6      	beq.n	8008d1a <_malloc_r+0x22>
 8008dac:	1b9b      	subs	r3, r3, r6
 8008dae:	50a3      	str	r3, [r4, r2]
 8008db0:	e7b3      	b.n	8008d1a <_malloc_r+0x22>
 8008db2:	6862      	ldr	r2, [r4, #4]
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	bf0c      	ite	eq
 8008db8:	6032      	streq	r2, [r6, #0]
 8008dba:	605a      	strne	r2, [r3, #4]
 8008dbc:	e7ec      	b.n	8008d98 <_malloc_r+0xa0>
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	6864      	ldr	r4, [r4, #4]
 8008dc2:	e7b2      	b.n	8008d2a <_malloc_r+0x32>
 8008dc4:	4634      	mov	r4, r6
 8008dc6:	6876      	ldr	r6, [r6, #4]
 8008dc8:	e7b9      	b.n	8008d3e <_malloc_r+0x46>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	4638      	mov	r0, r7
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	f000 f84c 	bl	8008e6c <__malloc_unlock>
 8008dd4:	e7a1      	b.n	8008d1a <_malloc_r+0x22>
 8008dd6:	6025      	str	r5, [r4, #0]
 8008dd8:	e7de      	b.n	8008d98 <_malloc_r+0xa0>
 8008dda:	bf00      	nop
 8008ddc:	20000aa4 	.word	0x20000aa4

08008de0 <_realloc_r>:
 8008de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de4:	4680      	mov	r8, r0
 8008de6:	4614      	mov	r4, r2
 8008de8:	460e      	mov	r6, r1
 8008dea:	b921      	cbnz	r1, 8008df6 <_realloc_r+0x16>
 8008dec:	4611      	mov	r1, r2
 8008dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df2:	f7ff bf81 	b.w	8008cf8 <_malloc_r>
 8008df6:	b92a      	cbnz	r2, 8008e04 <_realloc_r+0x24>
 8008df8:	f7ff ff16 	bl	8008c28 <_free_r>
 8008dfc:	4625      	mov	r5, r4
 8008dfe:	4628      	mov	r0, r5
 8008e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e04:	f000 f838 	bl	8008e78 <_malloc_usable_size_r>
 8008e08:	4284      	cmp	r4, r0
 8008e0a:	4607      	mov	r7, r0
 8008e0c:	d802      	bhi.n	8008e14 <_realloc_r+0x34>
 8008e0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e12:	d812      	bhi.n	8008e3a <_realloc_r+0x5a>
 8008e14:	4621      	mov	r1, r4
 8008e16:	4640      	mov	r0, r8
 8008e18:	f7ff ff6e 	bl	8008cf8 <_malloc_r>
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d0ed      	beq.n	8008dfe <_realloc_r+0x1e>
 8008e22:	42bc      	cmp	r4, r7
 8008e24:	4622      	mov	r2, r4
 8008e26:	4631      	mov	r1, r6
 8008e28:	bf28      	it	cs
 8008e2a:	463a      	movcs	r2, r7
 8008e2c:	f7ff fed4 	bl	8008bd8 <memcpy>
 8008e30:	4631      	mov	r1, r6
 8008e32:	4640      	mov	r0, r8
 8008e34:	f7ff fef8 	bl	8008c28 <_free_r>
 8008e38:	e7e1      	b.n	8008dfe <_realloc_r+0x1e>
 8008e3a:	4635      	mov	r5, r6
 8008e3c:	e7df      	b.n	8008dfe <_realloc_r+0x1e>
	...

08008e40 <_sbrk_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	2300      	movs	r3, #0
 8008e44:	4d05      	ldr	r5, [pc, #20]	; (8008e5c <_sbrk_r+0x1c>)
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7f7 fcb8 	bl	80007c0 <_sbrk>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_sbrk_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_sbrk_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20000aac 	.word	0x20000aac

08008e60 <__malloc_lock>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__malloc_lock+0x8>)
 8008e62:	f000 b811 	b.w	8008e88 <__retarget_lock_acquire_recursive>
 8008e66:	bf00      	nop
 8008e68:	20000ab0 	.word	0x20000ab0

08008e6c <__malloc_unlock>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__malloc_unlock+0x8>)
 8008e6e:	f000 b80c 	b.w	8008e8a <__retarget_lock_release_recursive>
 8008e72:	bf00      	nop
 8008e74:	20000ab0 	.word	0x20000ab0

08008e78 <_malloc_usable_size_r>:
 8008e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7c:	1f18      	subs	r0, r3, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfbc      	itt	lt
 8008e82:	580b      	ldrlt	r3, [r1, r0]
 8008e84:	18c0      	addlt	r0, r0, r3
 8008e86:	4770      	bx	lr

08008e88 <__retarget_lock_acquire_recursive>:
 8008e88:	4770      	bx	lr

08008e8a <__retarget_lock_release_recursive>:
 8008e8a:	4770      	bx	lr

08008e8c <_init>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	bf00      	nop
 8008e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e92:	bc08      	pop	{r3}
 8008e94:	469e      	mov	lr, r3
 8008e96:	4770      	bx	lr

08008e98 <_fini>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr
